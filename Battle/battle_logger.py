# battle_logger.py - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –±–æ—è —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º Observer

import time
from Config.curses_config import BATTLE_DELAY

class BattleLogger:
    def __init__(self):
        self.log_lines = []
        self.max_lines = 100
        self.observers = []  # –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        self.message_delay = BATTLE_DELAY  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    def set_message_delay(self, delay=BATTLE_DELAY):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        self.message_delay = max(0, delay)
    
    def get_message_delay(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–¥–µ—Ä–∂–∫—É"""
        return self.message_delay
    
    def add_observer(self, observer):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
        if observer not in self.observers:
            self.observers.append(observer)
    
    def remove_observer(self, observer):
        """–£–¥–∞–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
        if observer in self.observers:
            self.observers.remove(observer)
    
    def _notify_observers(self, message):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        for observer in self.observers:
            try:
                observer(message)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π"""
        self.log_lines.append(message)
        if len(self.log_lines) > self.max_lines:
            self.log_lines = self.log_lines[-self.max_lines:]
        self._notify_observers(message)  # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        if self.message_delay > 0:
            time.sleep(self.message_delay)

    def log_player_action(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –∏–≥—Ä–æ–∫–∞"""
        self.log(f"üë§ {message}")
    
    def log_enemy_action(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –≤—Ä–∞–≥–∞"""
        self.log(message)
    
    def log_system_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.log(f"‚ÑπÔ∏è  {message}")
    
    def log_combat_result(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±–æ—è"""
        self.log(f"‚öîÔ∏è  {message}")
    
    def log_heal(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–µ—á–µ–Ω–∏–∏"""
        self.log(f"üíñ {message}")
    
    def log_death(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏"""
        self.log(f"üíÄ {message}")
    
    def get_lines(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞"""
        return self.log_lines.copy()
    
    def clear(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        self.log_lines.clear()

    @staticmethod
    def create_log_message(template: str, elements: list[tuple[str, int]]) -> list[tuple[str, int]]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
        
        :param template: –°—Ç—Ä–æ–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Ç–∏–ø–∞ %1, %2, %3
        :param elements: –°–ø–∏—Å–æ–∫ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä [(–∫–ª—é—á, —Ü–≤–µ—Ç), ...] 
                        –≥–¥–µ –∫–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º
        :return: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–µ–∫—Å—Ç, —Ü–≤–µ—Ç) –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        """
        result = []
        current_pos = 0
        
        while current_pos < len(template):
            # –ò—â–µ–º —à–∞–±–ª–æ–Ω %—á–∏—Å–ª–æ
            template_start = template.find('%', current_pos)
            
            if template_start == -1:
                # –ë–æ–ª—å—à–µ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ç—Ä–æ–∫–∏
                if current_pos < len(template):
                    result.append((template[current_pos:], 0))
                break
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —à–∞–±–ª–æ–Ω–∞ (–≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ \n)
            if template_start > current_pos:
                result.append((template[current_pos:template_start], 0))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª —Ü–∏—Ñ—Ä–æ–π
            if (template_start + 1 < len(template) and 
                template[template_start + 1].isdigit()):
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –Ω–æ–º–µ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
                num_end = template_start + 1
                while num_end < len(template) and template[num_end].isdigit():
                    num_end += 1
                
                template_num = int(template[template_start + 1:num_end])
                
                # –ó–∞–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 1)
                if 1 <= template_num <= len(elements):
                    key, color = elements[template_num - 1]  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
                    key_str = str(key) if not isinstance(key, str) else key
                    result.append((key_str, color))
                else:
                    # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    result.append((template[template_start:num_end], 0))
                
                current_pos = num_end
            else:
                # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∏–º–≤–æ–ª %, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                result.append(('%', 0))
                current_pos = template_start + 1
        
        return result

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
battle_logger = BattleLogger()