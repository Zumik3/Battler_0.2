import random
from typing import Tuple, Dict, List, Any, Optional, Union
from Battle.battle_logger import battle_logger

# –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤ –∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from Characters.character import Character
    from Characters.Abilities.ability import Ability


class GameMechanics:
    """–ë–∞–∑–æ–≤—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏."""

    # ==================== –†–∞—Å—á–µ—Ç—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π ====================
    @staticmethod
    def calculate_dodge_chance(target: 'Character') -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –∞—Ç–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≤–∫–æ—Å—Ç–∏ —Ü–µ–ª–∏.
        :param target: –ü–µ—Ä—Å–æ–Ω–∞–∂, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—ã—Ç–∞–µ—Ç—Å—è —É–∫–ª–æ–Ω–∏—Ç—å—Å—è –∞—Ç–∞–∫–∞.
        :return: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–∫–ª–æ–Ω–µ–Ω–∏—è (float –æ—Ç 0.0 –¥–æ 1.0).
        """
        # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è 5%
        base_dodge = 0.05
        # –ë–æ–Ω—É—Å –∫ —É–∫–ª–æ–Ω–µ–Ω–∏—é: +1% –∑–∞ –∫–∞–∂–¥—ã–µ 2 –µ–¥–∏–Ω–∏—Ü—ã –ª–æ–≤–∫–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö 10
        dex_bonus = max(0, (target.stats.dexterity - 10) * 0.005)  # +0.5% –∑–∞ –∫–∞–∂–¥—É—é –µ–¥–∏–Ω–∏—Ü—É dex > 10
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è 30%
        return min(0.30, base_dodge + dex_bonus)

    @staticmethod
    def calculate_crit_chance(character: 'Character') -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ (—É–¥–∞—Ä–∞ –∏–ª–∏ –ª–µ—á–µ–Ω–∏—è) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≤–∫–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –ø—Ä–∏–º–µ–Ω—è—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç.
        :return: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ (float –æ—Ç 0.0 –¥–æ 1.0).
        """
        # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ 5%
        base_crit = 0.05
        # –ë–æ–Ω—É—Å –∫ –∫—Ä–∏—Ç—É: +1% –∑–∞ –∫–∞–∂–¥—É—é –µ–¥–∏–Ω–∏—Ü—É –ª–æ–≤–∫–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö 10
        crit_bonus = max(0, (character.stats.dexterity - 10) * 0.01)
        
        # TODO: –ø–æ–∫–∞ –¥–µ–ª–∞–µ–º –∫—Ä–∏—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ –≤ –ª–æ–± - –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
        a = 0
        crit_ability = character.ability_manager.get_passive_ability('criticalstrike')
        if crit_ability:
            ability_effect = crit_ability.apply_effect(character)
            crit_bonus += ability_effect['critical_bonus']
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ 50%
        return min(0.50, base_crit + crit_bonus)

    @staticmethod
    def check_critical(character: 'Character') -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º.
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –ø—Ä–∏–º–µ–Ω—è—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç
        :return: True –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        crit_chance = GameMechanics.calculate_crit_chance(character)
        return random.random() < crit_chance

    @staticmethod
    def check_dodge_with_message(attacker: 'Character', target: 'Character') -> Tuple[bool, Optional[List]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—É —É–∫–ª–æ–Ω–∏—Ç—å—Å—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
        :param attacker: –ê—Ç–∞–∫—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        :param target: –¶–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ø—ã—Ç–∞–µ—Ç—Å—è —É–∫–ª–æ–Ω–∏—Ç—å—Å—è
        :return: –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—à–Ω–æ_—É–∫–ª–æ–Ω–∏–ª—Å—è: bool, —Å–æ–æ–±—â–µ–Ω–∏–µ: list –∏–ª–∏ None)
        """
        dodge_chance = GameMechanics.calculate_dodge_chance(target)
        dodge_success = random.random() < dodge_chance
        
        if dodge_success:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–∫–ª–æ–Ω–µ–Ω–∏–∏
            icon = "üèÉ"

            template = "%1 %2 –∞—Ç–∞–∫—É–µ—Ç %3, –Ω–æ —Ç–æ—Ç —É–∫–ª–æ–Ω—è–µ—Ç—Å—è!"
            if attacker.is_player:
                elements = [(icon, 0), (attacker.name, 2), (target.name, 4)]
            else:
                elements = [(icon, 0), (attacker.name, 4), (target.name, 2)]
            message = battle_logger.create_log_message(template, elements)
        else:
            message = None
            
        return dodge_success, message

    # ==================== –†–∞—Å—á–µ—Ç—ã —É—Ä–æ–Ω–∞ ====================
    @staticmethod
    def calculate_damage_variance(base_damage: float, variance_percent: float = 0.1) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É—Ä–æ–Ω–∞.
        :param base_damage: –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        :param variance_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%)
        :return: –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
        """
        min_damage = base_damage * (1 - variance_percent)
        max_damage = base_damage * (1 + variance_percent)
        return random.uniform(min_damage, max_damage)

    @staticmethod
    def calculate_armor_reduction(damage: float, armor: int) -> Tuple[int, int]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –±—Ä–æ–Ω–µ–π —Å –ø–ª–∞–≤–Ω–æ–π S-–æ–±—Ä–∞–∑–Ω–æ–π –∫—Ä–∏–≤–æ–π.
        :param damage: –ò—Å—Ö–æ–¥–Ω—ã–π —É—Ä–æ–Ω
        :param armor: –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –±—Ä–æ–Ω–∏
        :return: –ö–æ—Ä—Ç–µ–∂ (—É—Ä–æ–Ω –ø–æ—Å–ª–µ —Å–Ω–∏–∂–µ–Ω–∏—è, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–Ω)
        """
        if armor <= 0:
            return int(damage), 0
        
        # S-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è (—Å–∏–≥–º–æ–∏–¥) –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        # k - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫—Ä—É—Ç–∏–∑–Ω—ã –∫—Ä–∏–≤–æ–π (–º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è)
        k = 0.03
        armor_effectiveness = 1 / (1 + 2.718 ** (-k * (armor - 50)))  # –°–∏–≥–º–æ–∏–¥ —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ 50
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–º–∞–∫—Å–∏–º—É–º 85% –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        armor_effectiveness = min(armor_effectiveness, 0.85)
        reduced_damage = damage * (1 - armor_effectiveness)
        # –£—Ä–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1
        final_damage = max(1, int(reduced_damage))
        blocked_damage = int(damage - reduced_damage)
        return final_damage, blocked_damage

    # ==================== –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ ====================
    @staticmethod
    def apply_all_mechanics(ability: 'Ability', attacker: 'Character', target: 'Character', base_damage: float) -> Dict[str, Any]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –±–∞–∑–æ–≤—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
        :param ability: –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
        :param attacker: –ê—Ç–∞–∫—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        :param target: –¶–µ–ª—å –∞—Ç–∞–∫–∏
        :param base_damage: –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —É—Ä–æ–Ω–æ–º
        """
        results = {
            'dodge_success': False,
            'dodge_message': None,
            'critical_hit': False,
            'base_damage': base_damage,
            'varied_damage': 0,
            'blocked_damage': 0,
            'reduced_damage': 0,
            'final_damage': 0
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
        results['critical_hit'] = GameMechanics.check_critical(attacker)
        crit_multiplier = 2.0 if results['critical_hit'] else 1.0
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —É—Ä–æ–Ω–∞/—Ö–∏–ª–∞
        results['varied_damage'] = GameMechanics.calculate_damage_variance(base_damage)
        damage_after_variance = results['varied_damage'] * crit_multiplier
        results['final_damage'] = int(damage_after_variance)
        
        if ability.type == 0:  # (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞—Ç–∞–∫–∏)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
            dodge_success, dodge_message = GameMechanics.check_dodge_with_message(attacker, target)
            results['dodge_success'] = dodge_success
            results['dodge_message'] = dodge_message
            
            if dodge_success:
                results['final_damage'] = 0
                return results
        
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
            defence = target.derived_stats.defense
            if defence > 0:
                results['reduced_damage'], results['blocked_damage'] = GameMechanics.calculate_armor_reduction(
                    damage_after_variance, defence)
            else:
                results['reduced_damage'] = damage_after_variance
            
            results['final_damage'] = max(0, round(results['reduced_damage']))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –Ω–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            if results['final_damage'] > 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞—Ç–∞–∫–∞ –ø–æ–ø–∞–ª–∞ –∏ –Ω–∞–Ω–µ—Å–ª–∞ —É—Ä–æ–Ω
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å "–û—Ç—Ä–∞–≤–ª—è—é—â–∏–π —É–¥–∞—Ä"
                poison_ability = attacker.ability_manager.get_passive_ability('poisonstrike')
                if poison_ability and poison_ability.is_available():
                    poison_result = poison_ability.apply_effect(attacker, target=target)
        
        return results

    # ==================== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã ====================
    @staticmethod
    def get_mechanics_summary() -> Dict[str, str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫.
        :return: –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Ö–∞–Ω–∏–∫
        """
        return {
            'dodge': '–†–∞—Å—á–µ—Ç —à–∞–Ω—Å–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –∞—Ç–∞–∫–∏',
            'crit': '–†–∞—Å—á–µ—Ç —à–∞–Ω—Å–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞',
            'variance': '–°–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É—Ä–æ–Ω–∞',
            'armor': '–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –±—Ä–æ–Ω–µ–π',
            'all': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ö–∞–Ω–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ'
        }