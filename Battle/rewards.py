# rewards.py - –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –≤ –∏–≥—Ä–µ

from typing import List, Dict, Any
import random
from Config.game_config import EXP_BASE, GOLD_BASE, EXP_VARIANCE, GOLD_VARIANCE
from Inventory.inventory import get_inventory
from Battle.battle_logger import battle_logger

class Reward:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–∞–≥—Ä–∞–¥."""
    
    def __init__(self, amount: int):
        self.amount = amount
        self.type = "base"
        self.icon = "üéÅ"
    
    def apply_reward(self, character=None):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É."""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ apply_reward –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")


class GoldReward(Reward):
    """–ù–∞–≥—Ä–∞–¥–∞ –≤ –≤–∏–¥–µ –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç."""
    
    def __init__(self, amount: int):
        super().__init__(amount)
        self.type = "gold"
        self.icon = "üí∞"
    
    def apply_reward(self, character=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–æ–ª–æ—Ç–æ –≤ –æ–±—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."""
        inventory = get_inventory()
        inventory.add_gold(self.amount)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        template = "%1 –ü–æ–ª—É—á–µ–Ω–æ %2 –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç!"
        elements = [(self.icon, 0), (str(self.amount), 6)]  # –≥–æ–ª—É–±–æ–π —Ü–≤–µ—Ç –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        
        self.message = battle_logger.create_log_message(template, elements)
        return self


class ExperienceReward(Reward):
    """–ù–∞–≥—Ä–∞–¥–∞ –≤ –≤–∏–¥–µ –æ–ø—ã—Ç–∞."""
    
    def __init__(self, amount: int):
        super().__init__(amount)
        self.type = "exp"
        self.icon = "‚≠ê"
        self.exp_distribution = {}  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
        self.level_up_messages = []  # –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
    
    def _distribute_exp_evenly(self, characters: List, total_exp: int) -> Dict[str, int]:
        """
        –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—ã—Ç –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏.
        
        :param characters: –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        :param total_exp: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞
        :return: –°–ª–æ–≤–∞—Ä—å {–∏–º—è_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ–ø—ã—Ç–∞}
        """
        if not characters:
            return {}
        
        num_characters = len(characters)
        base_exp = total_exp // num_characters
        remaining_exp = total_exp % num_characters
        
        distribution = {}
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç
        for character in characters:
            distribution[character.name] = base_exp
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        characters_list = list(characters)
        for i in range(remaining_exp):
            # –î–æ–±–∞–≤–ª—è–µ–º 1 –æ—á–∫–æ –æ–ø—ã—Ç–∞ —Å–ª—É—á–∞–π–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
            random_character = random.choice(characters_list)
            distribution[random_character.name] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ (¬±5-10%)
        for character in characters:
            current_exp = distribution[character.name]
            # –í–∞—Ä–∏–∞—Ü–∏—è –æ—Ç -10% –¥–æ +10%
            variation = int(current_exp * random.uniform(-0.1, 0.1))
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–ø—ã—Ç –Ω–µ —Å—Ç–∞–Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
            variation = max(variation, -current_exp + 1) if current_exp > 1 else 0
            distribution[character.name] += variation
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ–±—â—É—é —Å—É–º–º—É, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–∑-–∑–∞ –≤–∞—Ä–∏–∞—Ü–∏–π
        actual_total = sum(distribution.values())
        diff = total_exp - actual_total
        
        if diff != 0:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
            adjustment_characters = list(characters)
            random.shuffle(adjustment_characters)
            
            for i in range(abs(diff)):
                if i < len(adjustment_characters):
                    char_name = adjustment_characters[i].name
                    if diff > 0:
                        distribution[char_name] += 1
                    else:
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–ø—ã—Ç –Ω–µ —Å—Ç–∞–Ω–µ—Ç <= 0
                        if distribution[char_name] > 1:
                            distribution[char_name] -= 1
        
        return distribution
    
    def apply_reward(self, characters: List = None):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–ø—ã—Ç –∫–æ –≤—Å–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        
        :param characters: –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞
        """
        if not characters:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            template = "%1 –ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞!"
            elements = [(self.icon, 0)]
            self.message = battle_logger.create_log_message(template, elements)
            return self
        
        # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—ã—Ç —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        self.exp_distribution = self._distribute_exp_evenly(characters, self.amount)
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.level_up_messages = []
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—ã—Ç –∫–∞–∂–¥–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
        for character in characters:
            if character.name in self.exp_distribution:
                actual_exp = self.exp_distribution[character.name]
                if actual_exp > 0 and hasattr(character, 'add_exp'):
                    level_up_msgs = character.add_exp(actual_exp)
                    self.level_up_messages.extend(level_up_msgs)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if self.exp_distribution:
            # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            elements = [(self.icon, 0), (" –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: ", 0), (str(self.amount), 3), (" (", 0)]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ (–∑–µ–ª–µ–Ω—ã–µ) –∏ –æ–ø—ã—Ç (–∂–µ–ª—Ç—ã–π) –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            items_list = list(self.exp_distribution.items())
            for i, (name, exp) in enumerate(items_list):
                elements.extend([(name, 2), (": ", 0), (str(exp), 3)])
                if i < len(items_list) - 1:
                    elements.append((", ", 0))
            
            elements.append((")", 0))
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            template = "".join([f"%{i+1}" for i in range(len(elements))])
            self.message = battle_logger.create_log_message(template, elements)
        else:
            template = "%1 –û–ø—ã—Ç –Ω–µ –±—ã–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω!"
            elements = [(self.icon, 0)]
            self.message = battle_logger.create_log_message(template, elements)
        
        return self


class BattleRewards:
    """–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–±–µ–¥—É –≤ –±–∏—Ç–≤–µ."""
    
    @classmethod
    def calculate_for_enemy(cls, enemy) -> Dict[str, int]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –æ–¥–Ω–æ–≥–æ –≤—Ä–∞–≥–∞."""
        level = getattr(enemy, 'level', 1)
        
        exp = level * EXP_BASE + random.randint(0, level * EXP_VARIANCE)
        gold = level * GOLD_BASE + random.randint(0, level * GOLD_VARIANCE)
        
        return {"exp": exp, "gold": gold}
    
    @classmethod
    def generate_rewards(cls, defeated_enemies: List) -> List[Reward]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤."""
        total_exp = 0
        total_gold = 0
        
        # –°—É–º–º–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
        for enemy in defeated_enemies:
            rewards = cls.calculate_for_enemy(enemy)
            total_exp += rewards["exp"]
            total_gold += rewards["gold"]
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞–≥—Ä–∞–¥
        rewards_list = []
        if total_exp > 0:
            rewards_list.append(ExperienceReward(total_exp))
        if total_gold > 0:
            rewards_list.append(GoldReward(total_gold))
        
        return rewards_list
    
    @classmethod
    def distribute_rewards(cls, defeated_enemies: List, player_characters: List) -> Dict[str, Any]:
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏.
        
        :param defeated_enemies: –°–ø–∏—Å–æ–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤
        :param player_characters: –°–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–æ–≤
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞–≥—Ä–∞–¥
        """
        if not defeated_enemies or not player_characters:
            return {
                'exp_reward': None,
                'gold_reward': None,
                'messages': [],
                'level_up_messages': []
            }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        rewards = cls.generate_rewards(defeated_enemies)
        
        results = {
            'exp_reward': None,
            'gold_reward': None,
            'messages': [],
            'level_up_messages': []
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        for reward in rewards:
            if isinstance(reward, ExperienceReward):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—ã—Ç –∫–æ –≤—Å–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
                result = reward.apply_reward(player_characters)
                results['exp_reward'] = result
                results['messages'].append(result.message)
                results['level_up_messages'].extend(result.level_up_messages)
                
            elif isinstance(reward, GoldReward):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–æ–ª–æ—Ç–æ (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ–±—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å)
                result = reward.apply_reward()
                results['gold_reward'] = result
                results['messages'].append(result.message)
        
        return results