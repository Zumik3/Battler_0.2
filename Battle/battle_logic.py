import random
from Battle.battle_logger import battle_logger
from Battle.round_logic import battle_round, display_round_separator
from Battle.rewards import BattleRewards
from Config.game_config import MAX_ROUNDS
from Inventory.inventory import get_inventory

def pre_battle_setup(players, enemies) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –±–æ—è.
    
    :param players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    :param enemies: –°–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤
    """
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –±–æ–µ–º
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    # - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    # - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±–æ—è
    # - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞—Ö
    pass

def simulate_battle(players, enemies) -> str:
    """
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –±–æ–π –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –≤—Ä–∞–≥–∞–º–∏.
    
    :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã ("win", "loss", –∏–ª–∏ "draw")
    """
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –±–æ–µ–º
    pre_battle_setup(players, enemies)
    
    # –ù–∞—á–∞–ª–æ –±–æ—è
    battle_logger.log("")
    battle_logger.log("üèÅ –ë–û–ô –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!")
    battle_result = "draw"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–∏—á—å—è
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—è
    for round_num in range(1, MAX_ROUNDS + 1):
        
        display_round_separator(round_num)
        round_result = battle_round(players, enemies, battle_logger)
        
        if round_result == "win" or round_result == "loss":
            battle_result = round_result
            break  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –±–æ–π
        
        if round_num == MAX_ROUNDS:
            battle_logger.log(f"‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –†–∞—É–Ω–¥ {round_num} —Å—Ç–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º.")

    # –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –±–æ—è
    post_battle_processing(players, enemies, battle_result)
    
    return battle_result

def post_battle_processing(players, enemies, battle_result) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—è.
    
    :param players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    :param enemies: –°–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤
    :param battle_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è ("win", "loss", "draw")
    """
    # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–∏ –ø–æ–±–µ–¥–µ
    if battle_result == "win":
        
        battle_logger.set_message_delay(0)

        battle_logger.log(f"üéñÔ∏è –ü–û–ë–ï–î–ê! –í—Å–µ –≤—Ä–∞–≥–∏ –ø–æ–≤–µ—Ä–∂–µ–Ω—ã!")
        award_rewards(players, enemies)
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤—Å–µ–º –≤—ã–∂–∏–≤—à–∏–º –∏–≥—Ä–æ–∫–∞–º
        restore_energy_after_battle([p for p in players if p.is_alive()])

        battle_logger.set_message_delay()
    
    # –°–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–æ–≤ –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —É –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    reset_all_cooldowns(players + enemies)

def award_rewards(players, defeated_enemies) -> None:
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∏–≥—Ä–æ–∫–∞–º –∑–∞ –ø–æ–±–µ–¥—É –≤ –±–æ—é.
    
    :param players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    :param defeated_enemies: –°–ø–∏—Å–æ–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤
    """
    if not defeated_enemies:
        return
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –º–µ–∂–¥—É –≤—ã–∂–∏–≤—à–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
    alive_players = [p for p in players if p.is_alive()]
    
    if not alive_players:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    reward_results = BattleRewards.distribute_rewards(defeated_enemies, alive_players)
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö
    for message in reward_results['messages']:
        battle_logger.log(message)

    for message in reward_results['level_up_messages']:
        battle_logger.log(message)

def restore_energy_after_battle(players) -> None:
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 30% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –≤—Å–µ–º –≤—ã–∂–∏–≤—à–∏–º –∏–≥—Ä–æ–∫–∞–º –ø–æ—Å–ª–µ –±–æ—è.
    
    :param players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    """
    for player in players:
        if player.is_alive():
            player.restore_energy(percentage=30)
    
    #battle_logger.log(f"üßò –ö–æ–º–∞–Ω–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ—Å–ª–µ –±–æ—è")

def reset_all_cooldowns(characters) -> None:
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∫—É–ª–¥–∞—É–Ω—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —É –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
    
    :param characters: –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    """
    for character in characters:
        if hasattr(character, 'ability_manager'):
            character.ability_manager.reset_all_cooldowns()