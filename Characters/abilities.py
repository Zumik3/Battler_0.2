# abilities.py - –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

from logging import critical
import random
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics

class Ability:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"""
    
    def __init__(self, name, type=0, damage_scale=0.0, cooldown=1, energy_cost=0, description="", icon="", is_mass=False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        
        :param name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param type: –¢–∏–ø —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ - 0 - –∞—Ç–∞–∫–∞, 1 - –ª–µ—á–µ–Ω–∏–µ, 2 - –æ—Ç–¥—ã—Ö –∏ —Ç.–¥.
        :param damage_scale: –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ä–æ–Ω–∞ –æ—Ç –∞—Ç–∞–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        :param cooldown: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param energy_cost: –°—Ç–æ–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param icon: –ò–∫–æ–Ω–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param is_mass: –ú–∞—Å—Å–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        """
        self.name = name
        self.type = type # –¢–∏–ø —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ - 0 - –∞—Ç–∞–∫–∞, 1 - –ª–µ—á–µ–Ω–∏–µ, 2 - –æ—Ç–¥—ã—Ö –∏ —Ç.–¥.
        self.is_mass = is_mass
        self.damage_scale = damage_scale
        self.cooldown = cooldown # —á—Ç–æ–±—ã –±—ã–ª–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ 1 —Ö–æ–¥ - —É–∫–∞–∑—ã–≤–∞–µ–º 2
        self.current_cooldown = 0
        self.energy_cost = energy_cost
        self.description = description
        self.icon = icon
        
    
    def can_use(self, character, targets=None):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.
        
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        :param targets: –¶–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: True, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∏–Ω–∞—á–µ False
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if self.current_cooldown > 0:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
        if hasattr(character, 'energy') and character.energy < self.energy_cost:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        return self.check_specific_conditions(character, targets)
    
    def check_specific_conditions(self, character, targets):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö.
        """
        return True
    
    def use(self, character, targets, **kwargs):
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.
        
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        :param targets: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        :param kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        """
        if not self.can_use(character, targets):
            return self.get_cannot_use_result(character)
        
        # –¢—Ä–∞—Ç–∏–º —ç–Ω–µ—Ä–≥–∏—é
        if hasattr(character, 'energy'):
            character.energy -= self.energy_cost
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        self.current_cooldown = self.cooldown
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        result = self.execute(character, targets, **kwargs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.on_use(character, targets, result)
        
        return result
    
    def execute(self, character, targets, **kwargs):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö.
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ execute –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ")
    
    def update_cooldown(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞."""
        if self.current_cooldown > 0:
            self.current_cooldown -= 1

    
    def on_use(self, character, targets, result):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ç.–¥.
        """
        pass
    
    def get_cannot_use_result(self, character):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ–≥–¥–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
        """
        return {
            'success': False,
            'reason': '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å',
            'character': character.name
        }
    
    def get_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
        return {
            'name': self.name,
            'type': self.type,
            'damage_scale': self.damage_scale,
            'cooldown': self.cooldown,
            'current_cooldown': self.current_cooldown,
            'energy_cost': self.energy_cost,
            'description': self.description
        }

class BasicAttack(Ability):
    """–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    def __init__(self):
        super().__init__(
            name="–ê—Ç–∞–∫–∞", 
            damage_scale=1.0, 
            cooldown=0, 
            energy_cost=10, 
            description="–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞",
            icon="‚öîÔ∏è"
        )
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—É—é –∞—Ç–∞–∫—É –ø–æ –æ–¥–Ω–æ–π —Ü–µ–ª–∏."""
        if not targets:
            return {
                'success': False, 
                'message': '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏',
                'type': 'basic_attack'
            }
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∂–∏–≤—É—é —Ü–µ–ª—å
        target = None
        for t in targets:
            if t.is_alive():
                target = t
                break
        
        if not target:
            return {
                'success': False, 
                'message': '–ù–µ—Ç –∂–∏–≤—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏',
                'type': 'basic_attack'
            }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ —Å—Ä–∞–∑—É
        base_damage = int(character.derived_stats.attack * self.damage_scale)
        mechanics_results = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'type': 'basic_attack',
            'attacker': character.name,
            'target': target.name,
            'damage_dealt': 0,
            'damage_blocked': 0,
            'is_critical': False,
            'dodge': mechanics_results['dodge_success'],
            'target_alive': target.is_alive(),
            'mechanics_details': mechanics_results
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if mechanics_results['dodge_success']:
            # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–µ—Ö–∞–Ω–∏–∫
            result['messages'] = [mechanics_results['dodge_message']]
        else:
            # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
            actual_damage = mechanics_results['final_damage']
            # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
            target.take_damage(actual_damage)
            
            result['damage_dealt'] = actual_damage
            result['damage_blocked'] = mechanics_results['blocked_damage']
            result['is_critical'] = mechanics_results['critical_hit']
            result['target_alive'] = target.is_alive()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞—Ç–∞–∫–µ
            result['messages'] = [self._create_attack_message(
                character, target, damage=actual_damage, 
                blocked=result['damage_blocked'], is_critical=result['is_critical']
            )]
        
        return result
    
    def _create_attack_message(self, character, target, damage=0, blocked=0, is_critical=False):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞—Ç–∞–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
        if is_critical:
            template = "%1 %2 –∞—Ç–∞–∫—É–µ—Ç %3 –∏ –Ω–∞–Ω–æ—Å–∏—Ç %4 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û —É—Ä–æ–Ω–∞! (%5 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) %6"
            crit_text = "üí•" if damage > 0 else ""
            if hasattr(character, 'is_player') and character.is_player:
                elements = [(self.icon, 0), (character.name, 2), (target.name, 4), (str(damage), 1), (str(blocked), 3), (crit_text, 0)]
            else:
                elements = [(self.icon, 0), (character.name, 4), (target.name, 2), (str(damage), 1), (str(blocked), 3), (crit_text, 0)]
        else:
            template = "%1 %2 –∞—Ç–∞–∫—É–µ—Ç %3 –∏ –Ω–∞–Ω–æ—Å–∏—Ç %4 —É—Ä–æ–Ω–∞. (%5 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
            if hasattr(character, 'is_player') and character.is_player:
                elements = [(self.icon, 0), (character.name, 2), (target.name, 4), (str(damage), 1), (str(blocked), 3)]
            else:
                elements = [(self.icon, 0), (character.name, 4), (target.name, 2), (str(damage), 1), (str(blocked), 3)]
            
        return battle_logger.create_log_message(template, elements)
    
    def check_specific_conditions(self, character, targets):
        return True

class RestAbility(Ability):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –û—Ç–¥—ã—Ö - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é"""
    
    def __init__(self):
        super().__init__(
            name="–û—Ç–¥—ã—Ö",
            type=2,
            damage_scale=0.0,
            cooldown=0,  # –ù–µ—Ç –∫—É–ª–¥–∞—É–Ω–∞
            energy_cost=0,  # –ù–µ —Ç—Ä–µ–±—É–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            description="–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 30 —ç–Ω–µ—Ä–≥–∏–∏",
            icon="üßò"
        )
        self.energy_restore = 30
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞
        old_energy = character.energy if hasattr(character, 'energy') else 0
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
        if hasattr(character, 'energy') and hasattr(character, 'derived_stats'):
            character.energy = min(character.derived_stats.max_energy, character.energy + self.energy_restore)
            actual_restore = character.energy - old_energy
        else:
            actual_restore = 0
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        template = "%1 %2 –æ—Ç–¥—ã—Ö–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç %3 —ç–Ω–µ—Ä–≥–∏–∏!"
        elements = [(self.icon, 0), (character.name, 2), (str(actual_restore), 6)]  # –≥–æ–ª—É–±–æ–π —Ü–≤–µ—Ç –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
        
        messages = [battle_logger.create_log_message(template, elements)]
            
        return {
            'type': 'rest',
            'character': character.name,
            'energy_restored': actual_restore,
            'messages': messages
        }
    
    def check_specific_conditions(self, character, targets):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç–¥—ã—Ö–∞—Ç—å (–Ω–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ —ç–Ω–µ—Ä–≥–∏–∏)."""
        if not hasattr(character, 'energy') or not hasattr(character, 'derived_stats'):
            return False
        return character.energy < character.derived_stats.max_energy

class SplashAttack(Ability):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ê—Ç–∞–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç–∏ (—Å–ø–ª—ç—à)"""
    
    def __init__(self):
        super().__init__(
            name="–°–ø–ª—ç—à –ê—Ç–∞–∫–∞",
            is_mass=True,
            damage_scale=0.7,
            cooldown=3,
            energy_cost=20,
            description="–ê—Ç–∞–∫–∞, –ø–æ—Ä–∞–∂–∞—é—â–∞—è –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤",
            icon="üí•"
        )
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–ª—ç—à –∞—Ç–∞–∫—É –ø–æ –≤—Å–µ–º —Ü–µ–ª—è–º."""
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∏–≤—ã–µ —Ü–µ–ª–∏
        alive_targets = [target for target in targets if target.is_alive()]
        
        if not alive_targets:
            return {
                'success': False,
                'message': '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏',
                'type': 'splash_attack'
            }
        
        results = {
            'type': 'splash_attack',
            'attacker': character.name,
            'targets': {},
            'total_damage': 0
        }
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage = int(character.derived_stats.attack * self.damage_scale)
        
        # –ê—Ç–∞–∫—É–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫
        for target in alive_targets:
            mechanics_results = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
            
            target_result = {
                'damage_dealt': 0,
                'damage_blocked': 0,
                'is_critical': False,
                'dodge': mechanics_results['dodge_success'],
                'target_alive': target.is_alive()
            }
            
            if mechanics_results['dodge_success']:
                # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
                target_result['message'] = mechanics_results['dodge_message']
            else:
                # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                actual_damage = mechanics_results['final_damage']
                is_critical = mechanics_results['critical_hit']
                
                # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
                damage_dealt, blocked = target.take_damage(actual_damage)
                
                target_result['damage_dealt'] = damage_dealt
                target_result['damage_blocked'] = blocked
                target_result['is_critical'] = is_critical
                target_result['target_alive'] = target.is_alive()
                
                results['total_damage'] += damage_dealt
            
            results['targets'][target.name] = target_result
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template = "%1 %2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –°–ø–ª—ç—à –ê—Ç–∞–∫—É –ø–æ %3 —Ü–µ–ª—è–º!"
        elements = [(self.icon, 0), (character.name, 2), (str(len(alive_targets)), 1)]
        
        results['messages'] = [battle_logger.create_log_message(template, elements)]
        
        return results
    
    def check_specific_conditions(self, character, targets):
        return True

class HealAbility(Ability):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –õ–µ—á–µ–Ω–∏–µ —Å–æ—é–∑–Ω–∏–∫–∞"""
    
    def __init__(self):
        super().__init__(
            name="–õ–µ—á–µ–Ω–∏–µ",
            type=1,
            damage_scale=0.0,
            cooldown=2,
            energy_cost=15,
            description="–õ–µ—á–∏—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞",
            icon="üíó"
        )
        self.base_heal_amount = 25
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞."""
        if not targets:
            return {
                'success': False, 
                'message': '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –ª–µ—á–µ–Ω–∏—è',
                'type': 'heal'
            }
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∂–∏–≤—É—é —Ü–µ–ª—å
        target = None
        for t in targets:
            if t.is_alive():
                target = t
                break
        
        if not target:
            return {
                'success': False, 
                'message': '–ù–µ—Ç –∂–∏–≤—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –ª–µ—á–µ–Ω–∏—è',
                'type': 'heal'
            }
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ
        base_heal = random.randint(self.base_heal_amount - 5, self.base_heal_amount + 5)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–µ—á–µ–Ω–∏—è
        mechanics_results = GameMechanics.apply_all_mechanics(self, character, target, base_heal)
        final_heal_amount = mechanics_results['final_damage']
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ—á–µ–Ω–∏–µ
        actual_heal = target.take_heal(final_heal_amount)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if mechanics_results['critical_hit']:
            template = "%1 %2 –ª–µ—á–∏—Ç %3 –Ω–∞ %4 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –∑–¥–æ—Ä–æ–≤—å—è! %5"
            crit_text = "‚ú®" if actual_heal > 0 else ""
            elements = [(self.icon, 0), (character.name, 2), (target.name, 2), (str(actual_heal), 3), (crit_text, 0)]
        else:
            template = "%1 %2 –ª–µ—á–∏—Ç %3 –Ω–∞ %4 –∑–¥–æ—Ä–æ–≤—å—è."
            elements = [(self.icon, 0), (character.name, 2), (target.name, 2), (str(actual_heal), 3)]
        
        messages = [battle_logger.create_log_message(template, elements)]
        
        return {
            'type': 'heal',
            'healer': character.name,
            'target': target.name,
            'heal_amount': actual_heal,
            'is_critical': mechanics_results['critical_hit'],
            'messages': messages
        }
    
    def check_specific_conditions(self, character, targets):
        return True

class MassHealAbility(Ability):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ú–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ"""
    
    def __init__(self):
        super().__init__(
            name="–ú–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ",
            type=1,
            is_mass=True,
            damage_scale=0.0,
            cooldown=4,
            energy_cost=30,
            description="–õ–µ—á–∏—Ç –≤—Å–µ—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤",
            icon="üíñ"
        )
        self.base_heal_amount = 20
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤."""
        alive_allies = [ally for ally in targets if ally.is_alive()]
        
        if not alive_allies:
            return {
                'success': False, 
                'message': '–ù–µ—Ç –∂–∏–≤—ã—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤ –¥–ª—è –ª–µ—á–µ–Ω–∏—è',
                'type': 'mass_heal'
            }
        
        results = {
            'type': 'mass_heal',
            'healer': character.name,
            'targets': [],
            'total_healed': 0
        }
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–µ—á–µ–Ω–∏–µ –Ω–∞ —Ü–µ–ª—å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        heal_per_target = max(1, self.base_heal_amount // max(1, len(alive_allies)))
        base_heal_amount = max(1, random.randint(heal_per_target - 3, heal_per_target + 3))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–µ—á–µ–Ω–∏—è (—Å–Ω–∏–∂–µ–Ω–Ω—ã–π —à–∞–Ω—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ)
        heal_crit_chance = GameMechanics.calculate_crit_chance(character) * 0.7
        is_critical = random.random() < heal_crit_chance
        heal_multiplier = 1.8 if is_critical else 1.0
        final_heal_amount = int(base_heal_amount * heal_multiplier)
        
        # –õ–µ—á–∏–º –∫–∞–∂–¥–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞
        for target_ally in alive_allies:
            old_hp = target_ally.hp
            target_ally.hp = min(target_ally.derived_stats.max_hp, target_ally.hp + final_heal_amount)
            actual_heal = target_ally.hp - old_hp
            
            results['targets'].append({
                'target': target_ally.name,
                'heal_amount': actual_heal
            })
            results['total_healed'] += actual_heal
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_critical:
            message_template = "%1 %2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç %3 –∑–¥–æ—Ä–æ–≤—å—è! %4"
            crit_text = "üåü" if results['total_healed'] > 0 else ""
            message_elements = [(self.icon, 0), (character.name, 2), (str(results['total_healed']), 3), (crit_text, 0)]
        else:
            message_template = "%1 %2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç %3 –∑–¥–æ—Ä–æ–≤—å—è."
            message_elements = [(self.icon, 0), (character.name, 2), (str(results['total_healed']), 3)]
        
        results['messages'] = []
        results['messages'].append(battle_logger.create_log_message(message_template, message_elements))

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—é–∑–Ω–∏–∫—É (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
        last_element = 0
        for target_info in results['targets']:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞: –∏–º—è, " –≤—ã–ª–µ—á–µ–Ω –Ω–∞ ", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            detail_template = "  üîπ %1 –≤—ã–ª–µ—á–µ–Ω –Ω–∞ %2 –∑–¥–æ—Ä–æ–≤—å—è"
            detail_elements = [(target_info['target'], 2),  # –∏–º—è - –∑–µ–ª–µ–Ω—ã–π        # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                (str(target_info['heal_amount']), 6),  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –±–∏—Ä—é–∑–æ–≤—ã–π
            ]
            results['messages'].append(battle_logger.create_log_message(detail_template, detail_elements))

        results['is_critical'] = is_critical
        
        return results
    
    def check_specific_conditions(self, character, targets):
        return True

class VolleyAbility(Ability):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ì—Ä–∞–¥ —Å—Ç—Ä–µ–ª - –º–∞—Å—Å–æ–≤–∞—è –∞—Ç–∞–∫–∞ –ø–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º"""
    
    def __init__(self):
        super().__init__(
            name="–ì—Ä–∞–¥ —Å—Ç—Ä–µ–ª",
            type=0,
            is_mass=True,
            damage_scale=0.6,
            cooldown=3,
            energy_cost=25,
            description="–ú–∞—Å—Å–æ–≤–∞—è –∞—Ç–∞–∫–∞, –ø–æ—Ä–∞–∂–∞—é—â–∞—è –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ —Å—Ç—Ä–µ–ª–∞–º–∏",
            icon="üèπ"
        )
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é –∞—Ç–∞–∫—É –ø–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º."""
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∏–≤—ã–µ —Ü–µ–ª–∏
        alive_targets = [target for target in targets if target.is_alive()]
        
        if not alive_targets:
            return {
                'success': False,
                'message': '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏',
                'type': 'volley'
            }
        
        results = {
            'type': 'volley',
            'attacker': character.name,
            'targets': {},
            'total_damage': 0,
            'messages': []
        }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template = "%1 %2 –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ì—Ä–∞–¥ —Å—Ç—Ä–µ–ª!"
        elements = [(self.icon, 0), (character.name, 2)]
        results['messages'].append(battle_logger.create_log_message(template, elements))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage = int(character.derived_stats.attack * self.damage_scale)
        
        # –ê—Ç–∞–∫—É–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫
        for target in alive_targets:
            mechanics_results = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
            
            target_result = {
                'damage_dealt': 0,
                'damage_blocked': 0,
                'is_critical': False,
                'dodge': mechanics_results['dodge_success'],
                'target_alive': target.is_alive()
            }
            
            if mechanics_results['dodge_success']:
                # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
                target_result['message'] = mechanics_results['dodge_message']
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–∫–ª–æ–Ω–µ–Ω–∏–∏
                dodge_template = "  üî∏ %1 —É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —Å—Ç—Ä–µ–ª!"
                dodge_elements = [(target.name, 4)]
                results['messages'].append(battle_logger.create_log_message(dodge_template, dodge_elements))
            else:
                # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                actual_damage = mechanics_results['final_damage']
                # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
                target.take_damage(actual_damage)
                
                target_result['damage_dealt'] = actual_damage
                target_result['damage_blocked'] = mechanics_results['blocked_damage']
                target_result['is_critical'] = mechanics_results['critical_hit']
                target_result['target_alive'] = target.is_alive()
                
                results['total_damage'] += actual_damage
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Ä–æ–Ω–µ –ø–æ —Ü–µ–ª–∏
                if mechanics_results['critical_hit']:
                    damage_template = "  üî∏ %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û —É—Ä–æ–Ω–∞! (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) %4"
                    crit_text = "üí•" if actual_damage > 0 else ""
                    damage_elements = [(target.name, 4), (str(actual_damage), 1), (str(mechanics_results['blocked_damage']), 3), (crit_text, 0)]
                else:
                    damage_template = "  üî∏ %1 –ø–æ–ª—É—á–∞–µ—Ç %2 —É—Ä–æ–Ω–∞. (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
                    damage_elements = [(target.name, 4), (str(actual_damage), 1), (str(mechanics_results['blocked_damage']), 3)]
                
                results['messages'].append(battle_logger.create_log_message(damage_template, damage_elements))
            
            results['targets'][target.name] = target_result
        
        return results
    
    def check_specific_conditions(self, character, targets):
        return True

# === –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ===

class AbilityManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    def __init__(self):
        # –û–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å, —Ö—Ä–∞–Ω—è—â–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.abilities = {}  # {name: Ability instance}
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.add_ability('basic_attack', BasicAttack())
        self.add_ability('rest', RestAbility())
    
    def add_ability(self, name, ability_instance):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂—É."""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if hasattr(ability_instance, '__class__'):
            new_ability = ability_instance.__class__()
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            for attr, value in ability_instance.__dict__.items():
                setattr(new_ability, attr, value)
            self.abilities[name] = new_ability
        else:
            self.abilities[name] = ability_instance
    
    def remove_ability(self, name):
        """–£–¥–∞–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∏."""
        if name in self.abilities:
            del self.abilities[name]
            return True
        return False
    
    def clear_abilities(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
        self.abilities.clear()
    
    def get_ability(self, name):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∏."""
        return self.abilities.get(name)
    
    def get_all_abilities(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return list(self.abilities.values())
    
    def get_all_ability_names(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–∞ –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return list(self.abilities.keys())
    
    def get_available_abilities(self, character):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã.
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
        :return: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (Ability instances)
        """
        return [ability for ability in self.abilities.values() if ability.can_use(character)]
    
    def get_available_ability_names(self, character):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã.
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
        :return: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        """
        return [name for name, ability in self.abilities.items() if ability.can_use(character)]
    
    def use_ability(self, ability, character, targets, **kwargs):
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä—è–º—É—é."""
        if ability and ability.can_use(character, targets):
            return ability.use(character, targets, **kwargs)
        return None
    
    def update_cooldowns(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É–ª–¥–∞—É–Ω—ã –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ –∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞."""
        for ability in self.abilities.values():
            ability.update_cooldown()

    def reset_all_cooldowns(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∫—É–ª–¥–∞—É–Ω—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –¥–æ 0."""
        for ability in self.abilities.values():
            ability.current_cooldown = 0

# === –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ===

ABILITY_TEMPLATES = {
    'basic_attack': BasicAttack,
    'rest': RestAbility,
    'splash_attack': SplashAttack,
    'heal': HealAbility,
    'mass_heal': MassHealAbility,
    'volley': VolleyAbility
}

def create_ability(ability_name):
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏."""
    ability_class = ABILITY_TEMPLATES.get(ability_name)
    if ability_class:
        return ability_class()
    return None