from Characters.abilities import AbilityManager
from Config.game_config import BASE_ENERGY_COST
from Battle.battle_logger import battle_logger

class Character:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∏–≥—Ä–µ."""
    def __init__(self, name, role, hp=0, max_hp=0, attack=0, defense=0, 
        level=1, is_player=False, ability=None, dexterity=10, constitution=10, strength=10, intelligence=10):
        
        self.name = name
        self.role = role
        self.is_player = is_player
        self.hp = hp
        self.max_hp = max_hp
        self.attack = attack
        self.defense = defense
        self.level = level  # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        self.dexterity = dexterity # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≤–∫–æ—Å—Ç—å
        self.constitution = constitution # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        self.strength = strength # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–ª—É
        self.intelligence = intelligence # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
        self.alive = True
        self.exp = 0  # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ–ø—ã—Ç–∞
        self.exp_to_next_level = 0  # –û–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
        self.energy = 100
        self.max_energy = 100
        self.can_heal = False
        self.ability_manager = AbilityManager()  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        self.calculate_derived_attributes()
        
    # –í –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ Character
    DEFENSE_MULTIPLIERS = {
        "tank": 1.0,
        "warrior": 0.66,
        "healer": 0.6,
        "archer": 0.44,
        "rogue": 0.375,
        "mage": 0.285
    }
    
    @staticmethod
    def scale_stats(base_stats, level, growth_rates):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è."""
        scaled_stats = {}
        for stat, base_value in base_stats.items():
            growth_rate = growth_rates.get(stat, 0.05)  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            scaled_stats[stat] = int(base_value * (1 + (level - 1) * growth_rate))
        return scaled_stats
    
    def calculate_defense_from_constitution(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–æ–ª–∏."""
        base_defense = int(self.constitution * 1.0) # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞
        multiplier = self.DEFENSE_MULTIPLIERS.get(self.role, 0.5) # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ —Ä–æ–ª–∏
        return int(base_defense * multiplier)
        
    def calculate_attack_from_primary_stat(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞—Ç–∞–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–æ–ª–∏."""
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞—Ç–∞–∫–∏ –ø–æ —Ä–æ–ª–∏
        primary_stat_multipliers = {
            "tank": 0.8,      # –¢–∞–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–∏–ª—É
            "warrior": 1.0,   # –í–æ–∏–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–∏–ª—É
            "rogue": 1.2,     # –†–∞–∑–±–æ–π–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ª–æ–≤–∫–æ—Å—Ç—å
            "archer": 1.1,    # –õ—É—á–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ª–æ–≤–∫–æ—Å—Ç—å
            "mage": 1.3,      # –ú–∞–≥–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
            "healer": 0.6     # –õ–µ–∫–∞—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–Ω–∏–∑–∫–∞—è –∞—Ç–∞–∫–∞)
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –∞—Ç–∞–∫–∏ –ø–æ —Ä–æ–ª–∏
        if self.role in ["tank", "warrior"]:
            primary_stat = self.strength
        elif self.role in ["rogue", "archer"]:
            primary_stat = self.dexterity
        elif self.role in ["mage", "healer"]:
            primary_stat = self.intelligence
        else:
            primary_stat = self.strength  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        multiplier = primary_stat_multipliers.get(self.role, 0.8)
        return int(primary_stat * multiplier)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏
    def add_ability(self, name, ability):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂—É."""
        self.ability_manager.add_ability(name, ability)
        
    def get_available_abilities(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π."""
        return self.ability_manager.get_available_abilities(self)
        
    def use_ability(self, name, targets, **kwargs):
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∏."""
        return self.ability_manager.use_ability(name, self, targets, **kwargs)
        
    def update_ability_cooldowns(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É–ª–¥–∞—É–Ω—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ –∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞."""
        self.ability_manager.update_cooldowns()
        
    def take_damage(self, damage):
        """–ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂—É, —É—á–∏—Ç—ã–≤–∞—è –∑–∞—â–∏—Ç—É."""
        blocked = int((1 - (1 / (1 + self.defense * 0.1))) * damage)
        blocked = min(blocked, int(damage * 0.7))
        blocked = max(0, blocked)
        final_damage = max(1, damage - blocked)
        self.hp -= final_damage
        if self.hp <= 0:
            self.hp = 0
            self.alive = False
        return final_damage, blocked
        
    def is_alive(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂."""
        return self.alive
        
    def get_level(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return self.level
        
    def calculate_exp_for_next_level(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è."""
        return int(20 * (self.level ** 1.5))  # 20 * level^1.5
        
    def add_exp(self, exp_amount):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è."""
        if not hasattr(self, 'exp'):
            self.exp = 0
            
        self.exp += exp_amount
        level_up_messages = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        while self.exp >= self.calculate_exp_for_next_level():
            level_up_message = self.level_up()
            level_up_messages.append(level_up_message)
            
        return level_up_messages
        
    def level_up(self):
        """–ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —É–ª—É—á—à–∞–µ—Ç –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏."""
        old_level = self.level
        old_dexterity = self.dexterity
        old_constitution = self.constitution
        old_strength = self.strength
        old_intelligence = self.intelligence
        old_max_hp = self.max_hp
        old_max_energy = self.max_energy
        old_attack = self.attack
        old_defense = self.defense
        
        self.level += 1
        icon = "üåü"
        
        if hasattr(self, 'BASE_STATS') and hasattr(self, 'GROWTH_RATES'):
            scaled_stats = Character.scale_stats(self.BASE_STATS, self.level, self.GROWTH_RATES)

            # –£–ª—É—á—à–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è, –∏—Å–ø–æ–ª—å–∑—É—è scaled_stats
            self.constitution = scaled_stats.get('constitution', self.constitution)
            self.strength = scaled_stats.get('strength', self.strength)
            self.dexterity = scaled_stats.get('dexterity', self.dexterity)
            self.intelligence = scaled_stats.get('intelligence', self.intelligence)
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        self.max_hp = self.calculate_max_hp()  # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP
        self.hp = self.max_hp
        
        self.attack = self.calculate_attack_from_primary_stat()  # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Ç–∞–∫—É
        self.defense = self.calculate_defense_from_constitution()  # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é
        self.max_energy = self.calculate_max_energy()
        self.energy = self.max_energy
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        self.exp_to_next_level = self.calculate_exp_for_next_level()
        
        # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        elements = [
            (self.name, 2),           # –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–º–µ–Ω–∏
            (" –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å ", 0),
            (str(old_level), 3),      # –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            (" ‚û§ ", 0),
            (str(self.level), 3),     # –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            (". (", 0)
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        stats_changed = []
        if self.dexterity != old_dexterity:
            stats_changed.append((f"dex:{old_dexterity} ‚û§ {self.dexterity}", 6))  # –±–∏—Ä—é–∑–æ–≤—ã–π
        if self.constitution != old_constitution:
            stats_changed.append((f"con:{old_constitution} ‚û§ {self.constitution}", 6))  # –±–∏—Ä—é–∑–æ–≤—ã–π
        if self.strength != old_strength:
            stats_changed.append((f"str:{old_strength} ‚û§ {self.strength}", 6))  # –±–∏—Ä—é–∑–æ–≤—ã–π
        if self.intelligence != old_intelligence:
            stats_changed.append((f"int:{old_intelligence} ‚û§ {self.intelligence}", 6))  # –±–∏—Ä—é–∑–æ–≤—ã–π
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for i, (stat_text, color) in enumerate(stats_changed):
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if ' ‚û§ ' in stat_text:
                parts = stat_text.split(' ‚û§ ')
                if ':' in parts[0]:
                    stat_name, old_val = parts[0].split(':')
                    new_val = parts[1]
                    # stat_name - –±–∏—Ä—é–∑–æ–≤—ã–π, old_val –∏ new_val - –∂–µ–ª—Ç—ã–µ
                    elements.extend([
                        (stat_name + ":", 6),  # –±–∏—Ä—é–∑–æ–≤—ã–π
                        (old_val, 3),          # –∂–µ–ª—Ç—ã–π
                        (" ‚û§ ", 0),
                        (new_val, 3)           # –∂–µ–ª—Ç—ã–π
                    ])
                else:
                    elements.append((stat_text, 6))  # –±–∏—Ä—é–∑–æ–≤—ã–π
            else:
                elements.append((stat_text, 6))  # –±–∏—Ä—é–∑–æ–≤—ã–π
                
            if i < len(stats_changed) - 1:
                elements.append((", ", 0))
        
        elements.append((")", 0))
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        template = "".join([f"%{i+1}" for i in range(len(elements))])
        message = battle_logger.create_log_message(template, elements)
        
        return message
        
    def get_exp_progress(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö."""
        next_level_exp = self.calculate_exp_for_next_level()
        if next_level_exp <= 0:
            return 100
        return int((self.exp / next_level_exp) * 100)

    def get_level_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –∏ –æ–ø—ã—Ç–µ."""
        return {
            'level': self.level,
            'current_exp': self.exp,
            'exp_to_next': self.calculate_exp_for_next_level(),
            'exp_progress': self.get_exp_progress()
        }
        
    def calculate_max_hp(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HP –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è."""
        return int(self.constitution * 10 + self.level * 5) # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ HP
        
    def calculate_max_energy(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return 50 + int(self.dexterity * 7 + self.constitution * 2) # –§–æ—Ä–º—É–ª–∞ —ç–Ω–µ—Ä–≥–∏–∏
        
    def restore_energy(self, amount=None, percentage=None):
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        :param amount: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        :param percentage: –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if percentage is not None:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
            restore_amount = int(self.max_energy * (percentage / 100))
            self.energy = min(self.max_energy, self.energy + restore_amount)
        elif amount is not None:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏
            self.energy = min(self.max_energy, self.energy + amount)
        else:
            # –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.energy = self.max_energy
            
    def spend_energy(self, amount=BASE_ENERGY_COST):
        self.energy -= amount
        
    def calculate_derived_attributes(self):
        self.max_hp = self.calculate_max_hp()
        self.hp = self.max_hp
        self.max_energy = self.calculate_max_energy()
        self.energy = self.max_energy
        self.exp_to_next_level = self.calculate_exp_for_next_level()
        self.defense = self.calculate_defense_from_constitution()
        self.attack = self.calculate_attack_from_primary_stat()