# Characters/Abilities/splash_attack.py

from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult

class SplashAttack(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ê—Ç–∞–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç–∏ (—Å–ø–ª—ç—à)"""
    
    def __init__(self):
        super().__init__(
            name="–°–ø–ª—ç—à –ê—Ç–∞–∫–∞",
            is_mass=True,
            damage_scale=0.7,
            cooldown=3,
            energy_cost=20,
            description="–ê—Ç–∞–∫–∞, –ø–æ—Ä–∞–∂–∞—é—â–∞—è –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤",
            icon="üí•"
        )
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–ª—ç—à –∞—Ç–∞–∫—É –ø–æ –≤—Å–µ–º —Ü–µ–ª—è–º."""
        result = AbilityResult()
        result.ability_type = "splash_attack"
        result.character = character.name
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∏–≤—ã–µ —Ü–µ–ª–∏
        alive_targets = [target for target in targets if target.is_alive()]
        
        if not alive_targets:
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        result.targets = [target.name for target in alive_targets]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage = int(character.derived_stats.attack * self.damage_scale)
        
        # –ê—Ç–∞–∫—É–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫
        total_damage = 0
        target_details = {}
        
        for target in alive_targets:
            mechanics_results = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
            
            target_info = {
                'damage_dealt': 0,
                'damage_blocked': 0,
                'is_critical': False,
                'dodge': mechanics_results['dodge_success'],
                'target_alive': target.is_alive()
            }
            
            if mechanics_results['dodge_success']:
                # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
                target_info['message'] = mechanics_results['dodge_message']
            else:
                # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                actual_damage = mechanics_results['final_damage']
                is_critical = mechanics_results['critical_hit']
                
                # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
                damage_dealt, blocked = target.take_damage(actual_damage)
                
                target_info['damage_dealt'] = damage_dealt
                target_info['damage_blocked'] = blocked
                target_info['is_critical'] = is_critical
                target_info['target_alive'] = target.is_alive()
                
                total_damage += damage_dealt
            
            target_details[target.name] = target_info
        
        result.total_damage = total_damage
        result.details['targets_info'] = target_details
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template = "%1 %2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –°–ø–ª—ç—à –ê—Ç–∞–∫—É –ø–æ %3 —Ü–µ–ª—è–º!"
        elements = [(self.icon, 0), (character.name, 2), (str(len(alive_targets)), 1)]
        
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        return result
    
    def check_specific_conditions(self, character, targets):
        return True