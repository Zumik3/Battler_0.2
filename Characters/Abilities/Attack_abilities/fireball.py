# characters/abilities/attack/fireball.py

from typing import List, Dict, Any
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.abilities import ActiveAbility, AbilityResult
from Characters.base_class import Character
from Config.curses_config import COLOR_GREEN, COLOR_BLUE, COLOR_RED, COLOR_YELLOW
from Config.game_config import DAMAGE_LIST_ICON

class Fireball(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä - –º–æ—â–Ω–∞—è –æ–¥–∏–Ω–æ—á–Ω–∞—è –∞—Ç–∞–∫–∞ –æ–≥–Ω—ë–º"""
    
    def __init__(self) -> None:
        super().__init__(
            name="–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä",
            damage_scale=2.0,  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω
            cooldown=5,
            energy_cost=35,
            description="–ú–æ—â–Ω—ã–π –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä, –Ω–∞–Ω–æ—Å—è—â–∏–π –æ–≥—Ä–æ–º–Ω—ã–π —É—Ä–æ–Ω –æ–¥–Ω–æ–π —Ü–µ–ª–∏",
            icon="üî•"
        )
    
    def execute(self, character: Character, targets: List[Character], **kwargs: Any) -> AbilityResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–≥–Ω–µ–Ω–Ω—É—é –∞—Ç–∞–∫—É –ø–æ –æ–¥–Ω–æ–π —Ü–µ–ª–∏."""
        result: AbilityResult = AbilityResult()
        result.ability_type = "fireball"
        result.character = character.name
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å (–æ–¥–∏–Ω–æ—á–Ω–∞—è –∞—Ç–∞–∫–∞)
        if not targets or not targets[0].is_alive():
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        target: Character = targets[0]
        result.targets = [target.name]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage: int = int(character.stats.intelligence * self.damage_scale)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template: str = "%1 %2 –≤—ã–ø—É—Å–∫–∞–µ—Ç –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä –≤ %3"
        elements: List[tuple] = [(self.icon, 0), (character.name, COLOR_GREEN), (target.name, COLOR_BLUE)]
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏
        mechanics_results: Dict[str, Any] = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
        
        target_info: Dict[str, Any] = {
            'damage_dealt': 0,
            'damage_blocked': 0,
            'is_critical': False,
            'dodge': mechanics_results['dodge_success'],
            'target_alive': target.is_alive()
        }
        
        if mechanics_results['dodge_success']:
            # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
            target_info['message'] = mechanics_results['dodge_message']
            dodge_template: str = "  üî∏ %1 —É–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —à–∞—Ä–∞!"
            dodge_elements: List[tuple] = [(target.name, COLOR_BLUE)]
            result.messages.append(battle_logger.create_log_message(dodge_template, dodge_elements))
            result.success = False
        else:
            # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
            actual_damage: int = mechanics_results['final_damage']
            # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
            target.take_damage(actual_damage)
            
            target_info['damage_dealt'] = actual_damage
            target_info['damage_blocked'] = mechanics_results['blocked_damage']
            target_info['is_critical'] = mechanics_results['critical_hit']
            target_info['target_alive'] = target.is_alive()
            
            result.total_damage = actual_damage
            result.success = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Ä–æ–Ω–µ
            if mechanics_results['critical_hit']:
                damage_template: str = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞! (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) üí•"
            else:
                damage_template: str = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞. (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
                
            damage_elements: List[tuple] = [(target.name, COLOR_BLUE), 
                                          (str(actual_damage), COLOR_RED), 
                                          (str(mechanics_results['blocked_damage']), COLOR_YELLOW)]
            
            result.messages.append(battle_logger.create_log_message(damage_template, damage_elements))
        
        result.details['target_info'] = target_info
        return result
    
    def check_specific_conditions(self, character: Character, targets: List[Character]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–µ–Ω–∏—è"""
        # –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ç–∏–≤ –æ–¥–Ω–æ–π —Ü–µ–ª–∏
        return True