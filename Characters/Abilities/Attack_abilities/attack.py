# Characters/Abilities/basic_attack.py

from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.abilities import Ability, AbilityResult

class Attack(Ability):
    """–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    def __init__(self):
        super().__init__(
            name="–ê—Ç–∞–∫–∞", 
            damage_scale=1.0, 
            cooldown=0, 
            energy_cost=10, 
            description="–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞",
            icon="‚öîÔ∏è"
        )
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—É—é –∞—Ç–∞–∫—É –ø–æ –æ–¥–Ω–æ–π —Ü–µ–ª–∏."""
        result = AbilityResult()
        result.ability_type = "basic_attack"
        result.character = character.name
        
        if not targets:
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∂–∏–≤—É—é —Ü–µ–ª—å
        target = None
        for t in targets:
            if t.is_alive():
                target = t
                break
        
        if not target:
            result.success = False
            result.reason = '–ù–µ—Ç –∂–∏–≤—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        result.targets = [target.name]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ —Å—Ä–∞–∑—É
        base_damage = int(character.derived_stats.attack * self.damage_scale)
        mechanics_results = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if mechanics_results['dodge_success']:
            # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–µ—Ö–∞–Ω–∏–∫
            result.messages = [mechanics_results['dodge_message']]
            result.details['dodge'] = True
            result.details['target_alive'] = target.is_alive()
        else:
            # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
            actual_damage = mechanics_results['final_damage']
            # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
            target.take_damage(actual_damage)
            
            result.damage_dealt = actual_damage
            result.total_damage = actual_damage
            result.details['damage_blocked'] = mechanics_results['blocked_damage']
            result.is_critical = mechanics_results['critical_hit']
            result.details['target_alive'] = target.is_alive()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞—Ç–∞–∫–µ
            result.messages = [self._create_attack_message(
                character, target, damage=actual_damage, 
                blocked=mechanics_results['blocked_damage'], 
                is_critical=mechanics_results['critical_hit']
            )]
        
        return result
    
    def _create_attack_message(self, character, target, damage=0, blocked=0, is_critical=False):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞—Ç–∞–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
        if is_critical:
            template = "%1 %2 –∞—Ç–∞–∫—É–µ—Ç %3 –∏ –Ω–∞–Ω–æ—Å–∏—Ç %4 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û —É—Ä–æ–Ω–∞! (%5 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) %6"
            crit_text = "üí•" if damage > 0 else ""
            if character.is_player:
                elements = [(self.icon, 0), (character.name, 2), (target.name, 4), (str(damage), 1), (str(blocked), 3), (crit_text, 0)]
            else:
                elements = [(self.icon, 0), (character.name, 4), (target.name, 2), (str(damage), 1), (str(blocked), 3), (crit_text, 0)]
        else:
            template = "%1 %2 –∞—Ç–∞–∫—É–µ—Ç %3 –∏ –Ω–∞–Ω–æ—Å–∏—Ç %4 —É—Ä–æ–Ω–∞. (%5 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
            if character.is_player:
                elements = [(self.icon, 0), (character.name, 2), (target.name, 4), (str(damage), 1), (str(blocked), 3)]
            else:
                elements = [(self.icon, 0), (character.name, 4), (target.name, 2), (str(damage), 1), (str(blocked), 3)]
            
        return battle_logger.create_log_message(template, elements)
    
    def check_specific_conditions(self, character, targets):
        return True