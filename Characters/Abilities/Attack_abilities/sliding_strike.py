# characters/abilities/attack/sliding_strike.py

from typing import List, Dict, Any
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult
from Characters.character import Character
from Config.curses_config import COLOR_GREEN, COLOR_BLUE, COLOR_RED, COLOR_YELLOW
from Config.game_config import DAMAGE_LIST_ICON
from Utils.types import IApplyEffectResult

class SlidingStrike(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –°–∫–æ–ª—å–∑—è—â–∏–π —É–¥–∞—Ä - –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–∫–≤–æ–∑—å –≤—Ä–∞–≥–æ–≤, –∞—Ç–∞–∫—É—è 2—Ö"""
    
    def __init__(self) -> None:
        super().__init__(
            name="–°–∫–æ–ª—å–∑—è—â–∏–π —É–¥–∞—Ä",
            is_mass=True,
            damage_scale=0.55,  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –∑–∞ –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞–≥–∞
            cooldown=4,
            energy_cost=25,
            description="–ü—Ä–æ—Ö–æ–¥–∏—Ç —Å–∫–≤–æ–∑—å –≤—Ä–∞–≥–æ–≤, –∞—Ç–∞–∫—É—è 2—Ö –Ω–∞ –ø—É—Ç–∏",
            icon="üó°Ô∏è"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        self.add_effect_by_class_name("PoisonEffect")
    
    def execute(self, character: 'Character', targets: List[Character], **kwargs: Any) -> AbilityResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫–æ–ª—å–∑—è—â–∏–π —É–¥–∞—Ä –ø–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º."""
        result: AbilityResult = AbilityResult()
        result.ability_type = "sliding_strike"
        result.character = character
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∏–≤—ã–µ —Ü–µ–ª–∏
        alive_targets = [target for target in targets if target.is_alive()]
        
        if not alive_targets:
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        chosen_targets = character.ability_manager.get_random_elements(alive_targets, 2)
        result.targets = chosen_targets
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage: int = int(character.derived_stats.attack * self.damage_scale)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template: str = "%1 %2 —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Å–∫–æ–ª—å–∑—è—â–∏–π —É–¥–∞—Ä –ø–æ –≤—Ä–∞–≥–∞–º!"
        elements: List[tuple] = [(self.icon, 0), (character.name, COLOR_GREEN)]
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        # –ê—Ç–∞–∫—É–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å
        total_damage = 0
        target_details = {}
        
        for target in chosen_targets:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
            mechanics_results: Dict[str, Any] = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
            
            target_info: Dict[str, Any] = {
                'damage_dealt': 0,
                'damage_blocked': 0,
                'is_critical': False,
                'dodge': mechanics_results['dodge_success'],
                'target_alive': target.is_alive()
            }
            
            if mechanics_results['dodge_success']:
                # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
                target_info['message'] = mechanics_results['dodge_message']
                dodge_template: str = "  üî∏ %1 —É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —É–¥–∞—Ä–∞!"
                dodge_elements: List[tuple] = [(target.name, COLOR_BLUE)]
                result.messages.append(battle_logger.create_log_message(dodge_template, dodge_elements))
            else:
                # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                actual_damage: int = mechanics_results['final_damage']
                # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
                target.take_damage(actual_damage)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º
                apply_effect_result_list: List[IApplyEffectResult] = []
                if target.is_alive():
                    apply_effect_result_list = self.apply_effects_with_chance(target, chance=0.7)  # 100% —à–∞–Ω—Å –Ω–∞–ª–æ–∂–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç


                target_info['damage_dealt'] = actual_damage
                target_info['damage_blocked'] = mechanics_results['blocked_damage']
                target_info['is_critical'] = mechanics_results['critical_hit']
                target_info['target_alive'] = target.is_alive()
                
                total_damage += actual_damage
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Ä–æ–Ω–µ
                damage_template: str = ""
                if mechanics_results['critical_hit']:
                    damage_template = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û —É—Ä–æ–Ω–∞ –æ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —É–¥–∞—Ä–∞! (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) üí•"
                else:
                    damage_template = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 —É—Ä–æ–Ω–∞ –æ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —É–¥–∞—Ä–∞. (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
                
                damage_elements: List[tuple] = [(target.name, COLOR_BLUE), 
                                              (str(actual_damage), COLOR_RED), 
                                              (str(mechanics_results['blocked_damage']), COLOR_YELLOW)]
                
                result.messages.append(battle_logger.create_log_message(damage_template, damage_elements))

                for apply_effect_result in apply_effect_result_list:
                    result.messages.append(apply_effect_result.message)
            
            target_details[target.name] = target_info
        
        result.total_damage = total_damage
        result.details['targets_info'] = target_details
        result.success = True
        
        return result
    
    def check_specific_conditions(self, character: Character, targets: List[Character]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–µ–Ω–∏—è"""
        # –°–∫–æ–ª—å–∑—è—â–∏–π —É–¥–∞—Ä –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π
        return True