# characters/abilities/attack/fire_storm.py

from typing import List, Dict, Any
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult
from Characters.character import Character
from Config.curses_config import COLOR_GREEN, COLOR_BLUE, COLOR_RED, COLOR_YELLOW
from Config.game_config import DAMAGE_LIST_ICON
from Utils.types import IApplyEffectResult


class FireStorm(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –û–≥–Ω–µ–Ω–Ω—ã–π —à—Ç–æ—Ä–º - –º–æ—â–Ω–∞—è –º–∞—Å—Å–æ–≤–∞—è –∞—Ç–∞–∫–∞ –æ–≥–Ω—ë–º –ø–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º"""
    
    def __init__(self) -> None:
        super().__init__(
            name="–û–≥–Ω–µ–Ω–Ω—ã–π —à—Ç–æ—Ä–º",
            damage_scale=0.6,  # –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ —É—Ä–æ–Ω–∞ –∏–∑-–∑–∞ –º–∞—Å—Å–æ–≤–æ—Å—Ç–∏
            cooldown=3,        # –±–æ–ª—å—à–∏–π –∫—É–ª–¥–∞—É–Ω –∏–∑-–∑–∞ –º–æ—â–Ω–æ—Å—Ç–∏
            energy_cost=12,    # –≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏
            description="–ú–æ—â–Ω—ã–π –æ–≥–Ω–µ–Ω–Ω—ã–π —à—Ç–æ—Ä–º, –Ω–∞–Ω–æ—Å—è—â–∏–π —É—Ä–æ–Ω –≤—Å–µ–º –≤—Ä–∞–≥–∞–º",
            icon="üå™Ô∏è",
            is_mass=True       # –º–∞—Å—Å–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        )
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ–∂–æ–≥–∞ –∫ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        self.add_effect_by_class_name("BurnEffect")
    
    def execute(self, character: Character, targets: List[Character], **kwargs: Any) -> AbilityResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–≥–Ω–µ–Ω–Ω—É—é –∞—Ç–∞–∫—É –ø–æ –≤—Å–µ–º —Ü–µ–ª—è–º.
        
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        :param targets: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–µ–ª–µ–π
        :param kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        """
        result: AbilityResult = AbilityResult()
        result.ability_type = "fire_storm"
        result.character = character
        result.targets = targets
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∂–∏–≤—ã—Ö —Ü–µ–ª–µ–π
        alive_targets = [target for target in targets if target.is_alive()]
        if not alive_targets:
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage: int = int(character.stats.intelligence * self.damage_scale)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template: str = "%1 %2 –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –æ–≥–Ω–µ–Ω–Ω—ã–π —à—Ç–æ—Ä–º!"
        elements: List[tuple] = [(self.icon, 0), (character.name, COLOR_GREEN), ("", 0)]
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result.total_damage = 0
        total_effects_applied = 0
        
        # –ê—Ç–∞–∫—É–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å
        for target in alive_targets:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
            mechanics_results: Dict[str, Any] = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
            
            if mechanics_results['dodge_success']:
                # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
                dodge_template: str = "  üî∏ %1 —É–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —à—Ç–æ—Ä–º–∞!"
                dodge_elements: List[tuple] = [(target.name, COLOR_BLUE)]
                result.messages.append(battle_logger.create_log_message(dodge_template, dodge_elements))
            else:
                # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                actual_damage: int = mechanics_results['final_damage']
                target.take_damage(actual_damage)

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º
                apply_effect_result_list: List[IApplyEffectResult] = []
                if target.is_alive():
                    apply_effect_result_list = self.apply_effects_with_chance(target, chance=0.7)  # 70% —à–∞–Ω—Å –Ω–∞–ª–æ–∂–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç

                result.total_damage += actual_damage
                total_effects_applied += len(apply_effect_result_list)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Ä–æ–Ω–µ
                damage_template: str = ""
                if mechanics_results['critical_hit']:
                    damage_template = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) üí•"
                else:
                    damage_template = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
                    
                damage_elements: List[tuple] = [(target.name, COLOR_BLUE), 
                                              (str(actual_damage), COLOR_RED), 
                                              (str(mechanics_results['blocked_damage']), COLOR_YELLOW)]
                
                message = battle_logger.create_log_message(damage_template, damage_elements)
                result.messages.append(message)
                
                for apply_effect_result in apply_effect_result_list:
                    result.messages.append(apply_effect_result.message)
        
        result.success = True
        result.details['targets_hit'] = len(alive_targets)
        result.details['effects_applied'] = total_effects_applied
        
        return result
    
    def check_specific_conditions(self, character: Character, targets: List[Character]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–µ–Ω–∏—è.
        
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        :param targets: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        :return: True –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        # –û–≥–Ω–µ–Ω–Ω—ã–π —à—Ç–æ—Ä–º –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Ç–∏–≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–µ–ª–µ–π
        return True