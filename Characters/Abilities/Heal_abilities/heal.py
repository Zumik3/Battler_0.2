# Characters/Abilities/heal_ability.py

import random
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.abilities import Ability, AbilityResult

class Heal(Ability):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –õ–µ—á–µ–Ω–∏–µ —Å–æ—é–∑–Ω–∏–∫–∞"""
    
    def __init__(self):
        super().__init__(
            name="–õ–µ—á–µ–Ω–∏–µ",
            type=1,
            damage_scale=0.0,
            cooldown=2,
            energy_cost=15,
            description="–õ–µ—á–∏—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞",
            icon="üíó"
        )
        self.base_heal_amount = 25
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞."""
        result = AbilityResult()
        result.ability_type = "heal"
        result.character = character.name
        
        if not targets:
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –ª–µ—á–µ–Ω–∏—è'
            return result
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∂–∏–≤—É—é —Ü–µ–ª—å
        target = None
        for t in targets:
            if t.is_alive():
                target = t
                break
        
        if not target:
            result.success = False
            result.reason = '–ù–µ—Ç –∂–∏–≤—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –ª–µ—á–µ–Ω–∏—è'
            return result
        
        result.targets = [target.name]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ
        base_heal = random.randint(self.base_heal_amount - 5, self.base_heal_amount + 5)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–µ—á–µ–Ω–∏—è
        mechanics_results = GameMechanics.apply_all_mechanics(self, character, target, base_heal)
        final_heal_amount = mechanics_results['final_damage']
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ—á–µ–Ω–∏–µ
        actual_heal = target.take_heal(final_heal_amount)
        
        result.heal_amount = actual_heal
        result.total_heal = actual_heal
        result.is_critical = mechanics_results['critical_hit']
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if mechanics_results['critical_hit']:
            template = "%1 %2 –ª–µ—á–∏—Ç %3 –Ω–∞ %4 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –∑–¥–æ—Ä–æ–≤—å—è! %5"
            crit_text = "‚ú®" if actual_heal > 0 else ""
            elements = [(self.icon, 0), (character.name, 2), (target.name, 2), (str(actual_heal), 3), (crit_text, 0)]
        else:
            template = "%1 %2 –ª–µ—á–∏—Ç %3 –Ω–∞ %4 –∑–¥–æ—Ä–æ–≤—å—è."
            elements = [(self.icon, 0), (character.name, 2), (target.name, 2), (str(actual_heal), 3)]
        
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        return result
    
    def check_specific_conditions(self, character, targets):
        return True