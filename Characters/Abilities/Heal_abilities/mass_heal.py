# Characters/Abilities/mass_heal_ability.py

import random
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult

class MassHeal(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ú–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ"""
    
    def __init__(self):
        super().__init__(
            name="–ú–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ",
            type=1,
            is_mass=True,
            damage_scale=0.0,
            cooldown=4,
            energy_cost=30,
            description="–õ–µ—á–∏—Ç –≤—Å–µ—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤",
            icon="üíñ"
        )
        self.base_heal_amount = 20
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤."""
        result = AbilityResult()
        result.ability_type = "mass_heal"
        result.character = character.name
        
        alive_allies = [ally for ally in targets if ally.is_alive()]
        
        if not alive_allies:
            result.success = False
            result.reason = '–ù–µ—Ç –∂–∏–≤—ã—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤ –¥–ª—è –ª–µ—á–µ–Ω–∏—è'
            return result
        
        result.targets = [ally.name for ally in alive_allies]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–µ—á–µ–Ω–∏–µ –Ω–∞ —Ü–µ–ª—å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        heal_per_target = max(1, self.base_heal_amount // max(1, len(alive_allies)))
        base_heal_amount = max(1, random.randint(heal_per_target - 3, heal_per_target + 3))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–µ—á–µ–Ω–∏—è (—Å–Ω–∏–∂–µ–Ω–Ω—ã–π —à–∞–Ω—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ)
        heal_crit_chance = GameMechanics.calculate_crit_chance(character) * 0.7
        is_critical = random.random() < heal_crit_chance
        heal_multiplier = 1.8 if is_critical else 1.0
        final_heal_amount = int(base_heal_amount * heal_multiplier)
        
        # –õ–µ—á–∏–º –∫–∞–∂–¥–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞ –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        total_healed = 0
        healed_targets = []
        
        for target_ally in alive_allies:
            old_hp = target_ally.hp
            target_ally.hp = min(target_ally.derived_stats.max_hp, target_ally.hp + final_heal_amount)
            actual_heal = target_ally.hp - old_hp
            
            healed_targets.append({
                'target': target_ally.name,
                'heal_amount': actual_heal
            })
            total_healed += actual_heal
        
        result.total_heal = total_healed
        result.heal_amount = total_healed
        result.is_critical = is_critical
        result.details['healed_targets'] = healed_targets
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_critical:
            message_template = "%1 %2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç %3 –∑–¥–æ—Ä–æ–≤—å—è! %4"
            crit_text = "üåü" if total_healed > 0 else ""
            message_elements = [(self.icon, 0), (character.name, 2), (str(total_healed), 3), (crit_text, 0)]
        else:
            message_template = "%1 %2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç %3 –∑–¥–æ—Ä–æ–≤—å—è."
            message_elements = [(self.icon, 0), (character.name, 2), (str(total_healed), 3)]
        
        result.messages = []
        result.messages.append(battle_logger.create_log_message(message_template, message_elements))

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—é–∑–Ω–∏–∫—É (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
        for target_info in healed_targets:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞: –∏–º—è, " –≤—ã–ª–µ—á–µ–Ω –Ω–∞ ", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            detail_template = "  üîπ %1 –≤—ã–ª–µ—á–µ–Ω –Ω–∞ %2 –∑–¥–æ—Ä–æ–≤—å—è"
            detail_elements = [(target_info['target'], 2),  # –∏–º—è - –∑–µ–ª–µ–Ω—ã–π
                (str(target_info['heal_amount']), 6),  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –±–∏—Ä—é–∑–æ–≤—ã–π
            ]
            result.messages.append(battle_logger.create_log_message(detail_template, detail_elements))
        
        return result
    
    def check_specific_conditions(self, character, targets):
        return True