# Characters/Abilities/rest_ability.py

from Battle.battle_logger import battle_logger
from Characters.Abilities.abilities import ActiveAbility, AbilityResult

class Rest(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –û—Ç–¥—ã—Ö - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é"""
    
    def __init__(self):
        super().__init__(
            name="–û—Ç–¥—ã—Ö",
            type=2,
            damage_scale=0.0,
            cooldown=0,  # –ù–µ—Ç –∫—É–ª–¥–∞—É–Ω–∞
            energy_cost=0,  # –ù–µ —Ç—Ä–µ–±—É–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            description="–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 30 —ç–Ω–µ—Ä–≥–∏–∏",
            icon="üßò"
        )
        self.energy_restore = 30
        self.set_level(1)
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é."""
        result = AbilityResult()
        result.ability_type = "rest"
        result.character = character.name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞
        old_energy = character.energy if hasattr(character, 'energy') else 0
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
        if hasattr(character, 'energy') and hasattr(character, 'derived_stats'):
            character.energy = min(character.derived_stats.max_energy, character.energy + self.energy_restore)
            actual_restore = character.energy - old_energy
        else:
            actual_restore = 0
            
        result.energy_restored = actual_restore
        result.details['old_energy'] = old_energy
        result.details['new_energy'] = character.energy if hasattr(character, 'energy') else 0
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        template = "%1 %2 –æ—Ç–¥—ã—Ö–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç %3 —ç–Ω–µ—Ä–≥–∏–∏!"
        elements = [(self.icon, 0), (character.name, 2), (str(actual_restore), 6)]
        
        result.messages = [battle_logger.create_log_message(template, elements)]
            
        return result
    
    def check_specific_conditions(self, character, targets):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç–¥—ã—Ö–∞—Ç—å (–Ω–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ —ç–Ω–µ—Ä–≥–∏–∏)."""
        if not hasattr(character, 'energy') or not hasattr(character, 'derived_stats'):
            return False
        return character.energy < character.derived_stats.max_energy