# Characters/Status_effects/burn_effect.py
import random
from typing import Dict, Any, List

from curses import COLOR_RED, COLOR_WHITE, COLOR_YELLOW

from Battle.battle_logger import battle_logger
from Characters.Status_effects.effect_result import EffectResult
from Characters.Status_effects.status_effect import StatusEffect
from Characters.character import Character


class BurnEffect(StatusEffect):
    """–≠—Ñ—Ñ–µ–∫—Ç –æ–∂–æ–≥–∞ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –∫–∞–∂–¥—ã–π —Ö–æ–¥ —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏"""
    
    def __init__(self, duration: int = 3, base_damage: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ–∂–æ–≥–∞.
        
        :param duration: –ë–∞–∑–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ —Ä–∞—É–Ω–¥–∞—Ö
        :param base_damage: –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –æ—Ç –æ–∂–æ–≥–∞ –∑–∞ —Ö–æ–¥ (—É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤)
        """
        super().__init__(
            name="–û–∂–æ–≥",
            duration=duration,
            description=f"–ù–∞–Ω–æ—Å–∏—Ç –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–π —É—Ä–æ–Ω –∫–∞–∂–¥—ã–π —Ö–æ–¥ –∏ —Å–Ω–∏–∂–∞–µ—Ç –∑–∞—â–∏—Ç—É",
            icon="üî•"
        )
        self.base_damage = base_damage
        self.base_duration = duration  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.stacks = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∞
    
    def apply_effect(self, target: Character) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç
        if target.has_status_effect("–û–∂–æ–≥"):
            # –ï—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            existing_effect = target.status_manager.get_effect("–û–∂–æ–≥")
            if existing_effect:
                existing_effect.stacks += 1
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                existing_effect.duration = existing_effect.base_duration
                return {
                    'message': f"{target.name} –ø–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–∫ –æ–∂–æ–≥–∞! (–°—Ç–∞–∫–æ–≤: {existing_effect.stacks})",
                    'effect': 'burn_stacked'
                }
        
        # –ü–µ—Ä–≤–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        return {
            'message': f"{target.name} –ø–æ–ª—É—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –æ–∂–æ–≥–∞!",
            'effect': 'burn_applied'
        }
    
    def update_effect(self, target: Character) -> EffectResult:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ö–æ–¥ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –æ—Ç –æ–∂–æ–≥–∞ —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º"""
        result: EffectResult = EffectResult()
        result.effect = 'burn_tick'
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–∫–æ–≤ (–ª–∏–Ω–µ–π–Ω—ã–π —Ä–æ—Å—Ç)
        current_damage = self.base_damage * self.stacks
        result.total_damage = current_damage

        # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
        target.take_damage(current_damage)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Ä–æ–Ω–µ
        damage_template = f"%1 %2 –ø–æ–ª—É—á–∞–µ—Ç %3 —É—Ä–æ–Ω–∞ –æ—Ç –æ–∂–æ–≥–∞"
        if self.stacks > 1:
            damage_template += f" ({self.stacks} —Å—Ç–∞–∫–æ–≤)"
            
        damage_elements: List[tuple] = [(self.icon, COLOR_WHITE), (target.name, COLOR_YELLOW), 
                                      (str(current_damage), COLOR_RED)]
        
        log_message = battle_logger.create_log_message(damage_template, damage_elements)
        result.messages.append(log_message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–Ω—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç - –≤–æ—Å–ø–ª–∞–º–µ–Ω–µ–Ω–∏–µ
        if random.random() < 0.15:  # 15% —à–∞–Ω—Å
            result.additional_effects.append({
                'type': 'ignite',
                'message': f"{target.name} –≤—Å–ø—ã—Ö–∏–≤–∞–µ—Ç –æ—Ç –æ–≥–Ω—è!",
                'extra_damage': int(current_damage * 0.5)
            })
            # –ù–∞–Ω–æ—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω –æ—Ç –≤–æ—Å–ø–ª–∞–º–µ–Ω–µ–Ω–∏—è
            target.take_damage(int(current_damage * 0.5))
        
        return result
    
    def remove_effect(self, target: Character) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        return {
            'message': f"–≠—Ñ—Ñ–µ–∫—Ç –æ–∂–æ–≥–∞ –Ω–∞ {target.name} –∏—Å—á–µ–∑",
            'effect': 'burn_removed'
        }
    
    def get_intensity_description(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–∫–æ–≤"""
        if self.stacks == 1:
            return "–ª–µ–≥–∫–∏–π"
        elif self.stacks == 2:
            return "—Å—Ä–µ–¥–Ω–∏–π"
        elif self.stacks == 3:
            return "—Å–∏–ª—å–Ω—ã–π"
        else:
            return "—Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π"