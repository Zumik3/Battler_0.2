# inventory.py - –°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (Singleton)

from typing import Dict, List, Any

class Inventory:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (Singleton)."""
    
    _instance = None
    _initialized = False
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(Inventory, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if not Inventory._initialized:
            self.gold = 0
            self.items: Dict[Any, int] = {}  # –æ–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            Inventory._initialized = True
    
    @classmethod
    def get_instance(cls):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—Å–æ–∑–¥–∞–µ—Ç, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."""
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance
    
    @classmethod
    def reset_instance(cls):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        cls._instance = None
        cls._initialized = False
    
    def add_gold(self, amount: int) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∑–æ–ª–æ—Ç–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.
        
        :param amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        if amount > 0:
            self.gold += amount
    
    def remove_gold(self, amount: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–æ–ª–æ—Ç–æ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.
        
        :param amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞
        """
        if amount <= 0:
            return True
        if self.gold >= amount:
            self.gold -= amount
            return True
        return False
    
    def get_gold(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ."""
        return self.gold
    
    def add_item(self, item_object: Any, quantity: int = 1) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.
        
        :param item_object: –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        :param quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        if quantity > 0:
            if item_object in self.items:
                self.items[item_object] += quantity
            else:
                self.items[item_object] = quantity
    
    def remove_item(self, item_object: Any, quantity: int = 1) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.
        
        :param item_object: –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        :param quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        if item_object not in self.items:
            return False
        
        if quantity <= 0:
            return True
            
        if self.items[item_object] >= quantity:
            self.items[item_object] -= quantity
            if self.items[item_object] == 0:
                del self.items[item_object]
            return True
        return False
    
    def get_item_count(self, item_object: Any) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.
        
        :param item_object: –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        return self.items.get(item_object, 0)
    
    def has_item(self, item_object: Any, quantity: int = 1) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.
        
        :param item_object: –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        :param quantity: –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        :return: True –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        return self.get_item_count(item_object) >= quantity
    
    def get_all_items(self) -> Dict[Any, int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.
        
        :return: –°–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        return self.items.copy()
    
    def is_empty(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç –ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.
        
        :return: True –µ—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç, False –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
        """
        return len(self.items) == 0 and self.gold == 0
    
    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."""
        self.gold = 0
        self.items.clear()
    
    def get_total_items_count(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.
        
        :return: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        return sum(self.items.values())
    
    def __str__(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""
        if self.is_empty():
            return "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç"
        
        result = []
        if self.gold > 0:
            result.append(f"üí∞ –ó–æ–ª–æ—Ç–æ: {self.gold}")
        
        if self.items:
            result.append("–ü—Ä–µ–¥–º–µ—Ç—ã:")
            for item_object, quantity in self.items.items():
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                item_name = getattr(item_object, 'name', str(item_object))
                result.append(f"  {item_name}: {quantity}")
        
        return "\n".join(result)
    
    def __repr__(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""
        return f"Inventory(gold={self.gold}, items={len(self.items)})"


# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
def get_inventory() -> Inventory:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (Singleton).
    –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π.
    """
    return Inventory.get_instance()