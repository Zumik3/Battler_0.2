# draw_character.py - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

import curses
import random
from Config.game_config import ENERGY_BAR_WIDTH, MONSTER_NAME_COLUMN_WIDTH, PLAYER_NAME_COLUMN_WIDTH, PROGRESS_BORDER_CHARS, PROGRESS_BAR_CHARS, HP_BAR_WIDTH, BASE_ENERGY_COST
from Config.curses_config import get_color_pair, COLOR_RED, COLOR_GREEN, COLOR_YELLOW, COLOR_BLUE, COLOR_GRAY, COLOR_WHITE

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
ENEMY_NAME_EXTRA_WIDTH = 25
CLASS_ICON_DISPLAY_WIDTH = 3
LEVEL_DISPLAY_BASE_WIDTH = 2
DEATH_SYMBOL_WIDTH = 2
CLASS_DISPLAY_WIDTH = 4
MIN_LENGTH_FOR_DOTS = 2
MIN_LENGTH_FOR_DOT = 1
HP_BAR_DEFAULT_WIDTH = 10
ENERGY_BAR_DEFAULT_WIDTH = 8
DEFAULT_SPACING = 1
AFTER_BAR_SPACING = 2
ENERGY_BAR_COLOR = 7
HIGH_HP_THRESHOLD = 0.75
LOW_HP_THRESHOLD = 0.25
MAX_EFFECT_NAME_LENGTH = 6
MAX_DISPLAYED_EFFECTS = 3
EFFECT_DOTS_LENGTH = 2
STATUS_EFFECTS_MAX_WIDTH = 15


class DrawCharacter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –∏–º—è, HP, Energy, —Å—Ç–∞—Ç—É—Å—ã.
    –í–∫–ª—é—á–∞–µ—Ç –í–°–Å: –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∏–º–µ–Ω–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã, —ç—Ñ—Ñ–µ–∫—Ç—ã ‚Äî –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    """

    @staticmethod
    def draw_character_name(screen, position_y: int, position_x: int, character) -> int:
        """
        –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∏–∫–æ–Ω–∫–æ–π –∫–ª–∞—Å—Å–∞, —É—Ä–æ–≤–Ω–µ–º, —Ü–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∫–æ–π —Å–º–µ—Ä—Ç–∏.
        - –ò–≥—Ä–æ–∫: –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ (NAME_COLUMN_WIDTH + 15)
        - –í—Ä–∞–≥: –º–µ–Ω—å—à–µ –º–µ—Å—Ç–∞ (NAME_COLUMN_WIDTH)
        - –ò–º—è –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è —Å "..", –µ—Å–ª–∏ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç —Å —É—á—ë—Ç–æ–º –∫–ª–∞—Å—Å–∞ –∏ —É—Ä–æ–≤–Ω—è
        - –¶–≤–µ—Ç–∞: –∏–º—è ‚Äî –∑–µ–ª—ë–Ω–æ–µ (–∏–≥—Ä–æ–∫), —Å–∏–Ω–µ–µ (–≤—Ä–∞–≥); –∫–ª–∞—Å—Å ‚Äî –µ–≥–æ —Ü–≤–µ—Ç–æ–º; —É—Ä–æ–≤–µ–Ω—å ‚Äî –∂—ë–ª—Ç—ã–π; —Å–∫–æ–±–∫–∏ ‚Äî –±–µ–ª—ã–µ
        - –ú—ë—Ä—Ç–≤—ã–π: ‚Ä† –≤ –Ω–∞—á–∞–ª–µ, —Å–µ—Ä—ã–π —Ü–≤–µ—Ç, —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ
        """
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        total_name_width = PLAYER_NAME_COLUMN_WIDTH if character.is_player else MONSTER_NAME_COLUMN_WIDTH

        current_x_position = position_x
        max_x_position = position_x + total_name_width  # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞

        # –¶–≤–µ—Ç–∞
        white_color_pair = get_color_pair(COLOR_WHITE)
        yellow_color_pair = get_color_pair(COLOR_YELLOW)
        gray_dim_color_pair = get_color_pair(COLOR_GRAY) | curses.A_DIM
        base_name_color_pair = get_color_pair(COLOR_GREEN) if character.is_player else get_color_pair(COLOR_BLUE)
        final_name_color_pair = gray_dim_color_pair if not character.is_alive() else base_name_color_pair

        # 1. –†–∏—Å—É–µ–º ‚Ä† –µ—Å–ª–∏ –º—ë—Ä—Ç–≤ + –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ
        if not character.is_alive():
            try:
                if current_x_position < max_x_position:
                    screen.addstr(position_y, current_x_position, "‚Ä† ", gray_dim_color_pair)
                    current_x_position += DEATH_SYMBOL_WIDTH
            except curses.error:
                pass

        # üîπ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç: —Å–∫–æ–ª—å–∫–æ –∑–∞–π–º—É—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã
        suffix_total_length = 0
        has_class_icon = bool(getattr(character, 'class_icon', ''))
        has_level_info = getattr(character, 'level', None) is not None

        if has_class_icon:
            suffix_total_length += CLASS_ICON_DISPLAY_WIDTH  # " [X]" ‚Üí 3 —Å–∏–º–≤–æ–ª–∞
        if has_level_info:
            suffix_total_length += LEVEL_DISPLAY_BASE_WIDTH + len(str(character.level))  # " [10]" ‚Üí 5, " [5]" ‚Üí 4 –∏ —Ç.–¥.

        # –°–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥ –∏–º—è (—É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ ‚Ä†)
        available_space_for_name = max_x_position - current_x_position - suffix_total_length
        available_space_for_name = max(0, available_space_for_name)

        # 2. –û–±—Ä–µ–∑–∞–µ–º –∏–º—è —Å —É—á—ë—Ç–æ–º –º–µ—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º ".."
        character_full_name = getattr(character, 'name', '')
        display_name_text = ""

        if available_space_for_name >= MIN_LENGTH_FOR_DOTS:
            if len(character_full_name) <= available_space_for_name:
                display_name_text = character_full_name
            else:
                display_name_text = character_full_name[:available_space_for_name - EFFECT_DOTS_LENGTH] + ".."
        elif available_space_for_name == MIN_LENGTH_FOR_DOT:
            display_name_text = "." if len(character_full_name) > 0 else ""
        # –ï—Å–ª–∏ 0 ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º

        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–º—è
        if display_name_text:
            try:
                if current_x_position < max_x_position:
                    # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É
                    end_x_position = min(current_x_position + len(display_name_text), max_x_position)
                    text_to_render = display_name_text[:end_x_position - current_x_position]
                    screen.addstr(position_y, current_x_position, text_to_render, final_name_color_pair)
                    current_x_position += len(text_to_render)
            except curses.error:
                pass

        # 3. –ö–ª–∞—Å—Å: [X]
        class_icon_symbol = getattr(character, 'class_icon', '')
        class_icon_color_pair = get_color_pair(getattr(character, 'class_icon_color', COLOR_WHITE))
        if class_icon_symbol and current_x_position + CLASS_ICON_DISPLAY_WIDTH <= max_x_position:
            try:
                screen.addstr(position_y, current_x_position, " [", white_color_pair)
                screen.addstr(position_y, current_x_position + LEVEL_DISPLAY_BASE_WIDTH, class_icon_symbol, class_icon_color_pair)
                screen.addstr(position_y, current_x_position + CLASS_ICON_DISPLAY_WIDTH, "]", white_color_pair)
                current_x_position += CLASS_DISPLAY_WIDTH  # " [X]" = 4 —Å–∏–º–≤–æ–ª–∞
            except curses.error:
                pass

        # 4. –£—Ä–æ–≤–µ–Ω—å: [N]
        character_level = getattr(character, 'level', None)
        if character_level is not None:
            level_string = str(character_level)
            required_space = LEVEL_DISPLAY_BASE_WIDTH + len(level_string) + DEFAULT_SPACING  # " [N]" ‚Üí 3 + —Ü–∏—Ñ—Ä—ã
            if current_x_position + required_space <= max_x_position:
                try:
                    screen.addstr(position_y, current_x_position, " [", white_color_pair)
                    screen.addstr(position_y, current_x_position + LEVEL_DISPLAY_BASE_WIDTH, level_string, yellow_color_pair)
                    screen.addstr(position_y, current_x_position + LEVEL_DISPLAY_BASE_WIDTH + len(level_string), "]", white_color_pair)
                    current_x_position += required_space
                except curses.error:
                    pass

        # 5. –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–±–µ–ª–∞–º–∏
        try:
            while current_x_position < max_x_position:
                screen.addstr(position_y, current_x_position, " ", final_name_color_pair)
                current_x_position += 1
        except curses.error:
            pass

        return current_x_position

    @staticmethod
    def draw_progress_bar(screen, position_y: int, position_x: int, current_value: int, max_value: int,
                         bar_width: int, bar_color=None,
                         show_percent: bool = False, show_values: bool = False,
                         border_characters=PROGRESS_BORDER_CHARS, bar_characters=PROGRESS_BAR_CHARS):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (HP, Energy –∏ –¥—Ä.) ‚Äî –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –∏–∑ progress_bar.py.
        """
        if max_value <= 0:
            ratio_value = 0
        else:
            ratio_value = max(0.0, min(1.0, current_value / max_value))

        filled_segment_width = int(ratio_value * bar_width)
        if current_value > 0 and filled_segment_width == 0 and bar_width > 0:
            filled_segment_width = 1
        filled_segment_width = max(0, min(filled_segment_width, bar_width))

        filled_character = bar_characters[0]
        empty_character = bar_characters[1]
        progress_bar_string = filled_character * filled_segment_width + empty_character * (bar_width - filled_segment_width)

        # –¶–≤–µ—Ç
        if bar_color is None:
            if current_value <= 0:
                bar_color_pair = get_color_pair(COLOR_RED)
            elif ratio_value > HIGH_HP_THRESHOLD:
                bar_color_pair = get_color_pair(COLOR_GREEN)
            elif ratio_value > LOW_HP_THRESHOLD:
                bar_color_pair = get_color_pair(COLOR_YELLOW)
            else:
                bar_color_pair = get_color_pair(COLOR_RED)
        elif isinstance(bar_color, int):
            bar_color_pair = get_color_pair(bar_color)
        else:
            bar_color_pair = bar_color

        # –ì—Ä–∞–Ω–∏—Ü—ã
        left_border_char, right_border_char = border_characters
        try:
            screen.addstr(position_y, position_x, left_border_char, get_color_pair(COLOR_GRAY))
            screen.addstr(position_y, position_x + 1, progress_bar_string, bar_color_pair)
            screen.addstr(position_y, position_x + 1 + bar_width, right_border_char, get_color_pair(COLOR_GRAY))

            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            text_parts_list = []
            if show_percent:
                text_parts_list.append(f"{int(ratio_value * 100)}%")
            if show_values:
                text_parts_list.append(f"{current_value}/{max_value}")
            if text_parts_list:
                additional_text = " " + " ".join(text_parts_list)
                screen.addstr(position_y, position_x + 1 + bar_width + 1, additional_text, get_color_pair(COLOR_GRAY))
        except curses.error:
            pass

    @staticmethod
    def draw_energy_bar(screen, position_y: int, position_x: int, current_energy: int, max_energy: int, bar_width: int = None):
        """
        –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞—Ä —ç–Ω–µ—Ä–≥–∏–∏ ‚Äî —Å–∫—Ä—ã–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é, –µ—Å–ª–∏ < BASE_ENERGY_COST.
        """
        if bar_width is None:
            bar_width = HP_BAR_WIDTH

        display_energy_value = 0 if current_energy < BASE_ENERGY_COST else current_energy

        DrawCharacter.draw_progress_bar(
            screen=screen,
            position_y=position_y,
            position_x=position_x,
            current_value=display_energy_value,
            max_value=max_energy,
            bar_width=bar_width,
            bar_color=ENERGY_BAR_COLOR,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ü–≤–µ—Ç 7 ‚Äî —Å–∏–Ω–∏–π (—ç–Ω–µ—Ä–≥–∏—è)
            show_percent=False,
            show_values=False
        )

    @staticmethod
    def draw_hp_bar(screen, position_y: int, position_x: int, character, bar_width: int = None) -> int:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ HP-–±–∞—Ä–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É.
        """
        if bar_width is None:
            bar_width = HP_BAR_DEFAULT_WIDTH
            
        current_hp_value = getattr(character, 'hp', 0)
        max_hp_value = getattr(character.derived_stats, 'max_hp', 1)
        DrawCharacter.draw_progress_bar(
            screen=screen,
            position_y=position_y,
            position_x=position_x,
            current_value=current_hp_value,
            max_value=max_hp_value,
            bar_width=bar_width,
            bar_color=None,
            show_percent=False,
            show_values=False
        )
        return position_x + bar_width + AFTER_BAR_SPACING

    @staticmethod
    def draw_energy_bar_direct(screen, position_y: int, position_x: int, character, bar_width: int = None) -> int:
        """
        –£–¥–æ–±–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏.
        """
        if bar_width is None:
            bar_width = ENERGY_BAR_DEFAULT_WIDTH
            
        current_energy_value = getattr(character, 'energy', 0)
        max_energy_value = getattr(character.derived_stats, 'max_energy', 1)
        DrawCharacter.draw_energy_bar(
            screen=screen,
            position_y=position_y,
            position_x=position_x,
            current_energy=current_energy_value,
            max_energy=max_energy_value,
            bar_width=bar_width
        )
        return position_x + bar_width + AFTER_BAR_SPACING

    @staticmethod
    def draw_status_effects(screen, position_y: int, position_x: int, character, max_width: int = None) -> int:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–ø–æ–∫–∞ ‚Äî –∑–∞–≥–ª—É—à–∫–∞).
        """
        if max_width is None:
            max_width = STATUS_EFFECTS_MAX_WIDTH
            
        try:
            active_effects_list = getattr(character, 'active_effects', [])
            if not active_effects_list:
                return position_x

            effect_names_list = [effect.name[:MAX_EFFECT_NAME_LENGTH] for effect in active_effects_list[:MAX_DISPLAYED_EFFECTS]]
            effects_text = " | ".join(effect_names_list)
            if len(effects_text) > max_width:
                effects_text = effects_text[:max_width - EFFECT_DOTS_LENGTH] + ".."

            screen.addstr(position_y, position_x, effects_text, get_color_pair(COLOR_GRAY) | curses.A_DIM)
            return position_x + len(effects_text) + DEFAULT_SPACING
        except Exception:
            pass
        return position_x

    @classmethod
    def draw_character_row(cls, screen, character, position_y: int, position_x: int, is_player: bool = True):
        """
        –ü–æ–ª–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        """
        current_x_position = position_x

        # 1. –ò–º—è
        current_x_position = cls.draw_character_name(screen, position_y, current_x_position, character)
        current_x_position += DEFAULT_SPACING
        # 2. HP
        current_x_position = cls.draw_hp_bar(screen, position_y, current_x_position, character, HP_BAR_WIDTH)
        current_x_position += DEFAULT_SPACING

        # 3. Energy
        current_x_position = cls.draw_energy_bar_direct(screen, position_y, current_x_position, character, ENERGY_BAR_WIDTH)
        current_x_position += DEFAULT_SPACING

        # 4. –≠—Ñ—Ñ–µ–∫—Ç—ã
        cls.draw_status_effects(screen, position_y, current_x_position, character, max_width=STATUS_EFFECTS_MAX_WIDTH)