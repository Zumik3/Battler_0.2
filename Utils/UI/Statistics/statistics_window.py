# stats_windows.py

import curses
import abc
from typing import List, Optional, TYPE_CHECKING

if TYPE_CHECKING:
    from Battle.battle_statistics import BattleSummaryRecord, CombatActionRecord, GameTotalsRecord

from Battle.battle_statistics import get_battle_statistics
from Utils.UI.window import AbstractWindow
from Utils.UI.key_hints import STATISTICS_HINTS

class GlobalStatsWindow(AbstractWindow):
    """–û–∫–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self, stdscr) -> None:
        super().__init__(stdscr)
        self.battle_stats = get_battle_statistics()
        self.selected_battle_index: int = 0
        self.battle_summaries: List['BattleSummaryRecord'] = []
        self.hint_class = STATISTICS_HINTS
    
    def get_header_text(self) -> str:
        return "üìä –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê"
    
    def _display_body(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ - –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å–ø–∏—Å–æ–∫ –±–∏—Ç–≤"""
        if self.height < 5:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        game_totals = self.battle_stats.get_current_game_totals()
        self.battle_summaries = self.battle_stats.get_battle_summaries()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å)
        self._display_global_stats(game_totals, 2)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator_y = min(12, self.height - 3)
        if separator_y > 3:
            try:
                self.stdscr.addstr(separator_y, 0, "‚îÄ" * (self.width - 1), self.get_separator_style())
                if separator_y + 1 < self.height - 2:
                    self.stdscr.addstr(separator_y + 1, max(0, self.width // 2 - 7), "–°–ø–∏—Å–æ–∫ –±–∏—Ç–≤", curses.A_BOLD)
            except curses.error:
                pass
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∏—Ç–≤ (–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)
        list_start_y = separator_y + 3
        if list_start_y < self.height - 2:
            self._display_battle_list(list_start_y)
    
    def _display_global_stats(self, game_totals: 'GameTotalsRecord', start_y: int) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.height <= start_y:
            return
            
        stats_lines = [
            f"–í—Å–µ–≥–æ –±–æ—ë–≤: {game_totals.total_battles}",
            f"–ü–æ–±–µ–¥: {game_totals.total_victories} | –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {game_totals.total_defeats}",
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {self._calculate_win_rate(game_totals):.1f}%",
            f"–û–±—â–∏–π –Ω–∞–Ω–µ—Å—ë–Ω–Ω—ã–π —É—Ä–æ–Ω: {game_totals.total_damage_dealt}",
            f"–û–±—â–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω: {game_totals.total_damage_taken}",
            f"–û–±—â–µ–µ –ª–µ—á–µ–Ω–∏–µ: {game_totals.total_healing_done}",
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –≤ –±–∏—Ç–≤–µ: {game_totals.most_damage_in_single_battle}",
            f"–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –±–∏—Ç–≤–∞: {game_totals.longest_battle_rounds} —Ä–∞—É–Ω–¥–æ–≤"
        ]
        
        for i, line in enumerate(stats_lines):
            if start_y + i >= self.height - 3:
                break
            try:
                self.stdscr.addstr(start_y + i, 2, line[:self.width - 4], curses.A_NORMAL)
            except curses.error:
                pass
    
    def _calculate_win_rate(self, game_totals: 'GameTotalsRecord') -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥"""
        if game_totals.total_battles == 0:
            return 0.0
        return (game_totals.total_victories / game_totals.total_battles) * 100
    
    def _display_battle_list(self, start_y: int) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –±–∏—Ç–≤"""
        if not self.battle_summaries:
            if start_y < self.height - 3:
                try:
                    self.stdscr.addstr(start_y, 2, "–ù–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –±–æ—ë–≤", curses.A_DIM)
                except curses.error:
                    pass
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∏—Ç–≤—ã —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π
        max_battles_to_show = max(1, self.height - start_y - 3)
        
        for i, battle in enumerate(self.battle_summaries[:max_battles_to_show]):
            if start_y + i >= self.height - 3:
                break
                
            y_pos = start_y + i
            battle_text = f"–ë–∏—Ç–≤–∞ {battle.battle_id[:10]} - –†–∞—É–Ω–¥–æ–≤: {battle.total_rounds} - "
            battle_text += "–ü–æ–±–µ–¥–∞" if battle.player_victory else "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
            
            try:
                if i == self.selected_battle_index:
                    # –í—ã–¥–µ–ª–µ–Ω–Ω–∞—è –±–∏—Ç–≤–∞
                    self.stdscr.addstr(y_pos, 2, f"> {battle_text[:self.width - 6]}", 
                                     curses.A_BOLD | curses.A_REVERSE)
                else:
                    # –û–±—ã—á–Ω–∞—è –±–∏—Ç–≤–∞
                    self.stdscr.addstr(y_pos, 2, f"  {battle_text[:self.width - 6]}", 
                                     curses.A_NORMAL)
            except curses.error:
                pass
    
    def _handle_input(self, key: int) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –æ–∫–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if key in [ord('q'), ord('Q'), ord('e'), ord('E'), 27]:  # ESC, q, e
            return True
        elif key == curses.KEY_UP:
            if self.battle_summaries:
                self.selected_battle_index = max(0, self.selected_battle_index - 1)
        elif key == curses.KEY_DOWN:
            if self.battle_summaries:
                self.selected_battle_index = min(len(self.battle_summaries) - 1, 
                                               self.selected_battle_index + 1)
        elif key in [10, 13]:  # Enter
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∏—Ç–≤—ã
            if self.battle_summaries and 0 <= self.selected_battle_index < len(self.battle_summaries):
                selected_battle = self.battle_summaries[self.selected_battle_index]
                battle_detail_window = BattleDetailWindow(self.stdscr, selected_battle)
                battle_detail_window.run()
        elif key == curses.KEY_RESIZE:
            return False  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ
        
        return False


class BattleDetailWindow(AbstractWindow):
    """–û–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ç–≤—ã"""
    
    def __init__(self, stdscr, battle_record: 'BattleSummaryRecord') -> None:
        super().__init__(stdscr)
        self.battle_record = battle_record
        self.battle_stats = get_battle_statistics()
        self.selected_action_index: int = 0
        self.detailed_actions: List['CombatActionRecord'] = []
        self.hint_class = STATISTICS_HINTS
    
    def get_header_text(self) -> str:
        return f"üìä –î–ï–¢–ê–õ–ò –ë–ò–¢–í–´ {self.battle_record.battle_id}"
    
    def _display_body(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏—Ç–≤–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏"""
        if self.height < 5:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–π –±–∏—Ç–≤—ã
        self.detailed_actions = self.battle_stats.get_detailed_records(self.battle_record.battle_id)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏—Ç–≤–µ (–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å)
        self._display_battle_summary(2)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator_y = min(10, self.height - 3)
        if separator_y > 4:
            try:
                self.stdscr.addstr(separator_y, 0, "‚îÄ" * (self.width - 1), self.get_separator_style())
                if separator_y + 1 < self.height - 2:
                    self.stdscr.addstr(separator_y + 1, max(0, self.width // 2 - 12), "–î–µ—Ç–∞–ª–∏ –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π", curses.A_BOLD)
            except curses.error:
                pass
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)
        list_start_y = separator_y + 3
        if list_start_y < self.height - 2:
            self._display_detailed_actions(list_start_y)
    
    def _display_battle_summary(self, start_y: int) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏—Ç–≤–µ"""
        if self.height <= start_y:
            return
            
        summary_lines = [
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü–æ–±–µ–¥–∞' if self.battle_record.player_victory else '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}",
            f"–í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: {self.battle_record.total_rounds}",
            f"–ò–≥—Ä–æ–∫–∏: {', '.join(self.battle_record.player_names)}",
            f"–í—Ä–∞–≥–∏: {', '.join(self.battle_record.enemy_names)}",
            f"–£—Ä–æ–Ω –∏–≥—Ä–æ–∫–æ–≤: {self.battle_record.total_damage_dealt_by_players}",
            f"–£—Ä–æ–Ω –ø–æ –∏–≥—Ä–æ–∫–∞–º: {self.battle_record.total_damage_dealt_to_players}",
            f"–õ–µ—á–µ–Ω–∏–µ: {self.battle_record.total_healing_done}",
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–¥–∞—Ä—ã: {self.battle_record.critical_hits_count}",
            f"–£–∫–ª–æ–Ω–µ–Ω–∏—è: {self.battle_record.dodges_count}"
        ]
        
        for i, line in enumerate(summary_lines):
            if start_y + i >= self.height - 3:
                break
            try:
                self.stdscr.addstr(start_y + i, 2, line[:self.width - 4], curses.A_NORMAL)
            except curses.error:
                pass
    
    def _display_detailed_actions(self, start_y: int) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        if not self.detailed_actions:
            if start_y < self.height - 3:
                try:
                    self.stdscr.addstr(start_y, 2, "–ù–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", curses.A_DIM)
                except curses.error:
                    pass
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
        max_actions_to_show = max(1, self.height - start_y - 3)
        
        for i, action in enumerate(self.detailed_actions[:max_actions_to_show]):
            if start_y + i >= self.height - 3:
                break
                
            y_pos = start_y + i
            action_text = f"–†–∞—É–Ω–¥ {action.round_number}: {action.attacker_name} -> {action.target_name} ({action.ability_name})"
            if action.damage_dealt > 0:
                action_text += f" –£—Ä–æ–Ω: {action.damage_dealt}"
            if action.heal_amount > 0:
                action_text += f" –õ–µ—á–µ–Ω–∏–µ: {action.heal_amount}"
            if action.is_critical:
                action_text += " [–ö–†–ò–¢]"
            if action.is_dodge:
                action_text += " [–£–ö–õ–û–ù–ï–ù–ò–ï]"
            
            try:
                if i == self.selected_action_index:
                    # –í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                    self.stdscr.addstr(y_pos, 2, f"> {action_text[:self.width - 6]}", 
                                     curses.A_BOLD | curses.A_REVERSE)
                else:
                    # –û–±—ã—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                    self.stdscr.addstr(y_pos, 2, f"  {action_text[:self.width - 6]}", 
                                     curses.A_NORMAL)
            except curses.error:
                pass
    
    def _handle_input(self, key: int) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –±–∏—Ç–≤—ã"""
        if key in [ord('q'), ord('Q'), ord('e'), ord('E'), 27]:  # ESC, q, e
            return True
        elif key == curses.KEY_UP:
            if self.detailed_actions:
                self.selected_action_index = max(0, self.selected_action_index - 1)
        elif key == curses.KEY_DOWN:
            if self.detailed_actions:
                self.selected_action_index = min(len(self.detailed_actions) - 1, 
                                               self.selected_action_index + 1)
        elif key == curses.KEY_RESIZE:
            return False  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ
        
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–∫–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def display_global_stats_screen(stdscr) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    window = GlobalStatsWindow(stdscr)
    window.run()