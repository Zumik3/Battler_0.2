# Utils/UI/inventory_window.py
"""
–û–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, —Ä–µ–∞–ª–∏–∑—É—é—â–µ–µ –ø–∞—Ç—Ç–µ—Ä–Ω Window.
"""

import curses
from typing import List, Dict, Any, TYPE_CHECKING

# –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ç–∏–ø–æ–≤
if TYPE_CHECKING:
    from Characters.player_classes import Player # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ç–∏–ø –¥–ª—è players
    # Item - —ç—Ç–æ Protocol, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ inventory
    from Inventory.inventory import Item 

from Utils.UI.window import Window # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
from Inventory.inventory import get_inventory, Item
from Utils.UI.key_hints import InventoryHints
from Config.curses_config import get_color_pair, COLOR_CYAN, COLOR_GRAY, COLOR_WHITE, COLOR_MAGENTA, COLOR_YELLOW

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
TAB_SPACING = 4
HEADER_HEIGHT = 4
HERO_STATS_START_Y = 4
INVENTORY_START_Y = 11
BOTTOM_MARGIN = 2

# –û–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ key_hints.py
# (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å –∫–∞–∫ InventoryHints, –µ—Å–ª–∏ –Ω–µ—Ç - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –Ω–∏–∂–µ)
# INVENTORY_HINTS_DATA = [
#     ("‚Üê ‚Üí", "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤"),
#     ("Q", "–ù–∞–∑–∞–¥")
# ]
# class InventoryHints(KeyHints):
#     def get_hints(self):
#         return [(hint[0], self.hint_color) for hint in INVENTORY_HINTS_DATA] + \
#                [(hint[1], self.hint_color) for hint in INVENTORY_HINTS_DATA]

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ INVENTORY_HINTS —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ key_hints.py



def _display_hero_stats_in_inventory(stdscr: curses.window, player: Any, y: int, x: int, max_width: int) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (–±–µ–∑ –±–∞—Ä–æ–≤, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç).
    –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ display_hero_stats_in_inventory –∏–∑ output.txt.
    """
    try:
        height, width = stdscr.getmaxyx()
        
        # –ò–º—è –≥–µ—Ä–æ—è
        stdscr.addstr(y, x, player.name, get_color_pair(COLOR_CYAN) | curses.A_BOLD)
        
        # –£—Ä–æ–≤–µ–Ω—å –∏ –∫–ª–∞—Å—Å
        level_class_text = f"[–£—Ä.{player.level} {player.role.capitalize()}]"
        stdscr.addstr(y, x + len(player.name) + 1, level_class_text, get_color_pair(COLOR_WHITE))
        
        # HP –∏ –≠–Ω–µ—Ä–≥–∏—è
        hp_text = f"HP: {player.hp}/{player.derived_stats.max_hp}"
        energy_text = f"–≠–Ω–µ—Ä–≥–∏—è: {player.energy}/{player.derived_stats.max_energy}"
        stdscr.addstr(y + 1, x, hp_text, get_color_pair(COLOR_WHITE))
        stdscr.addstr(y + 1, x + len(hp_text) + 2, energy_text, get_color_pair(COLOR_WHITE))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        stats_text = f"–°–∏–ª–∞: {player.stats.strength}  –õ–æ–≤–∫: {player.stats.dexterity}  –¢–µ–ª–æ: {player.stats.constitution}  –ò–Ω—Ç: {player.stats.intelligence}"
        stdscr.addstr(y + 2, x, stats_text, get_color_pair(COLOR_WHITE))
        
        # –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞
        equip_col_x = x + max_width // 2 # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        if hasattr(player, 'equipment_slots'):
            weapon_name = getattr(player.equipped_weapon, 'name', '-') if hasattr(player, 'equipped_weapon') else '-'
            armor_name = getattr(player.equipped_armor, 'name', '-') if hasattr(player, 'equipped_armor') else '-'
            accessory_name = getattr(player.equipped_accessory, 'name', '-') if hasattr(player, 'equipped_accessory') else '-'
            
            stdscr.addstr(y + 1, equip_col_x, f"–û—Ä—É–∂–∏–µ: {weapon_name}", get_color_pair(COLOR_WHITE))
            stdscr.addstr(y + 2, equip_col_x, f"–ë—Ä–æ–Ω—è: {armor_name}", get_color_pair(COLOR_WHITE))
            stdscr.addstr(y + 3, equip_col_x, f"–ê–∫—Å–µ—Å—Å—É–∞—Ä: {accessory_name}", get_color_pair(COLOR_WHITE))
        else:
            stdscr.addstr(y + 1, equip_col_x, "–û—Ä—É–∂–∏–µ: -", get_color_pair(COLOR_GRAY))
            stdscr.addstr(y + 2, equip_col_x, "–ë—Ä–æ–Ω—è: -", get_color_pair(COLOR_GRAY))
            stdscr.addstr(y + 3, equip_col_x, "–ê–∫—Å–µ—Å—Å—É–∞—Ä: -", get_color_pair(COLOR_GRAY))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if y + 4 < height:
            separator_length = min(max_width - 4, width - x - 1)
            stdscr.addstr(y + 4, x, "‚îÄ" * separator_length, get_color_pair(COLOR_GRAY) | curses.A_DIM)
            
    except curses.error:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏


class InventoryWindow(Window):
    """
    –û–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≥—Ä—É–ø–ø—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–æ–≤.
    """

    def __init__(self, stdscr: curses.window, players: List[Any]) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.

        Args:
            stdscr: –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ curses.
            players: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤.
        """
        super().__init__(stdscr)
        self.players: List[Any] = players
        self.current_tab: int = 0 # –ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ (–∏–≥—Ä–æ–∫–∞)
        self.inventory = get_inventory() # –ü–æ–ª—É—á–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.hint_class = InventoryHints()

    def get_header_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞."""
        return "üéí –ò–ù–í–ï–ù–¢–ê–†–¨"

    def _display_body(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞ - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""
        if not self.players:
            try:
                self.stdscr.addstr(2, 2, "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.")
            except curses.error:
                pass
            return

        height, width = self.stdscr.getmaxyx()
        
        try:
            # 1. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            tab_x = 2
            for i, player in enumerate(self.players):
                if i == self.current_tab:
                    self.stdscr.attron(get_color_pair(COLOR_CYAN) | curses.A_BOLD)
                    self.stdscr.addstr(2, tab_x, f"[{player.name}]")
                    self.stdscr.attroff(get_color_pair(COLOR_CYAN) | curses.A_BOLD)
                else:
                    self.stdscr.attron(get_color_pair(COLOR_WHITE))
                    self.stdscr.addstr(2, tab_x, f" {player.name} ")
                    self.stdscr.attroff(get_color_pair(COLOR_WHITE))
                tab_x += len(player.name) + TAB_SPACING

            self.stdscr.addstr(3, 0, "‚îÄ" * (width - 1), get_color_pair(COLOR_GRAY) | curses.A_DIM)

            # 2. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –≥–µ—Ä–æ—è
            current_player = self.players[self.current_tab]
            max_content_width = width - 4
            _display_hero_stats_in_inventory(
                self.stdscr, 
                current_player, 
                HERO_STATS_START_Y, 
                2, 
                max_content_width
            )

            # 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            inventory_start_y = INVENTORY_START_Y
            self.stdscr.addstr(inventory_start_y, 2, "üß≥ –ò–ù–í–ï–ù–¢–ê–†–¨", get_color_pair(COLOR_MAGENTA) | curses.A_BOLD)
            self.stdscr.addstr(inventory_start_y + 1, 0, "‚îÄ" * (width - 1), get_color_pair(COLOR_GRAY) | curses.A_DIM)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
            gold_y = inventory_start_y + 2
            self.stdscr.addstr(gold_y, 4, f"üí∞ –ó–æ–ª–æ—Ç–æ: {self.inventory.get_gold()}", get_color_pair(COLOR_YELLOW))

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            item_objects: Dict[Item, int] = self.inventory.get_all_items()
            item_y = inventory_start_y + 4
            item_index = 0

            if not item_objects:
                self.stdscr.addstr(item_y, 4, "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç", get_color_pair(COLOR_GRAY))
            else:
                for item_object, quantity in item_objects.items():
                    if item_y + item_index >= height - BOTTOM_MARGIN:
                        # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
                        self.stdscr.addstr(item_y + item_index, 4, "...", get_color_pair(COLOR_GRAY))
                        break
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞
                        item_name = getattr(item_object, 'name', str(item_object))
                        rarity_color = getattr(item_object, 'get_rarity_color', lambda: COLOR_WHITE)()
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞
                        item_line = f"‚ó¶ {item_name}"
                        if quantity > 1:
                            item_line += f" (x{quantity})"
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                        self.stdscr.addstr(item_y + item_index, 4, item_line, get_color_pair(rarity_color))
                        item_index += 1
                    except Exception: # –ù–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
                        item_name = getattr(item_object, 'name', str(item_object))
                        self.stdscr.addstr(item_y + item_index, 4, f"‚ó¶ {item_name}: {quantity}", get_color_pair(COLOR_WHITE))
                        item_index += 1

        except curses.error:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –º–∞–ª–µ–Ω—å–∫–æ–º –æ–∫–Ω–µ
            pass
        except Exception as e:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            try:
                self.stdscr.addstr(2, 2, f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
            except curses.error:
                pass

    def _handle_input(self, key: int) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.

        Args:
            key: –ö–æ–¥ –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏.

        Returns:
            bool: True, –µ—Å–ª–∏ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 'q'), –∏–Ω–∞—á–µ False.
        """
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        # –°—Ç—Ä–µ–ª–∫–∏ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –∏ Tab
        if key == curses.KEY_LEFT or key == curses.KEY_RIGHT or key == 9: # 9 - –∫–æ–¥ –∫–ª–∞–≤–∏—à–∏ Tab
            if len(self.players) > 1:
                if key == curses.KEY_LEFT:
                    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–ª–µ–≤–æ –ø–æ —Å—Ç—Ä–µ–ª–∫–µ
                    self.current_tab = (self.current_tab - 1) % len(self.players)
                elif key == curses.KEY_RIGHT or key == 9: # –í–ø—Ä–∞–≤–æ –ø–æ —Å—Ç—Ä–µ–ª–∫–µ –∏–ª–∏ Tab
                    self.current_tab = (self.current_tab + 1) % len(self.players)
            return False # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
        if key == ord('q') or key == ord('Q'):
            return True # –°–∏–≥–Ω–∞–ª –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–∫–Ω–∞

        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏—à–∏
        return False
