# Utils/UI/event_window.py
"""–û–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è/–±–æ—è."""

import curses
import time
import uuid
from typing import List, Optional, TYPE_CHECKING

# –ò–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
# from Battle.battle_logger import battle_logger
# from Battle.battle_statistics import get_battle_statistics
# from Battle.rewards import BattleRewards
# from Config.game_config import MAX_ROUNDS
# from Battle.round_logic import battle_round

if TYPE_CHECKING:
    from Characters.player_classes import Player
    from Utils.command_handler import CommandHandler

from Utils.UI.window import Window
from Utils.UI.key_hints import BattleHints
from Battle.battle_logger import battle_logger
from Characters.char_utils import create_enemies


class EventWindow(Window):
    """–û–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è/–±–æ—è."""

    def __init__(self, stdscr: curses.window, players: List['Player']) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ —Å–æ–±—ã—Ç–∏—è."""
        super().__init__(stdscr)
        self.players: List['Player'] = players
        self.enemies: List = create_enemies(players)
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CommandHandler –≤–Ω—É—Ç—Ä–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from Utils.command_handler import CommandHandler
        self.command_handler: CommandHandler = CommandHandler(
            players=self.players,
            enemies=self.enemies,
            stdscr=self.stdscr
        )
        self.hint_class = BattleHints()
        self.battle_started = False # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—è


    def get_header_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞."""
        return "‚öîÔ∏è –ë–ò–¢–í–ê"

    def _display_body(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞ - –ª–æ–≥ –±–æ—è."""
        try:
            height, width = self.stdscr.getmaxyx()
            log_start_y = 3
            max_log_lines = max(1, height - log_start_y - 3)

            if hasattr(battle_logger, 'log_lines'):
                start_index = max(0, len(battle_logger.log_lines) - max_log_lines)
                lines_to_display = battle_logger.log_lines[start_index:]

                for i, line in enumerate(lines_to_display):
                    y_pos = log_start_y + i
                    if y_pos >= height - 3:
                        break
                    if isinstance(line, str):
                        self.stdscr.addstr(y_pos, 2, line[:width - 4], curses.A_NORMAL)
                    elif isinstance(line, tuple) and len(line) >= 2:
                        text, attr = line[0], line[1]
                        self.stdscr.addstr(y_pos, 2, text[:width - 4], attr)
            else:
                self.stdscr.addstr(log_start_y, 2, "–õ–æ–≥ –±–æ—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", curses.A_DIM)

        except curses.error:
            pass
        except Exception as e:
            battle_logger.log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–ª–∞ EventWindow: {e}")

    def _handle_input(self, key: int) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
        Args:
            key: –ö–æ–¥ –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏.
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 'q'), –∏–Ω–∞—á–µ False.
        """
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ ('q', 'Q', ESC)
        # –ü—Ä–æ–±–µ–ª –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–æ—è
        try:
            if key in [ord('q'), ord('Q'), 27]: # ESC, Q
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã—Ö–æ–¥–∞ –≤ command_handler.context
                if self.command_handler.context:
                    self.command_handler.context.set_exit_flag(True)
                return True # –°–∏–≥–Ω–∞–ª –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–∫–Ω–∞/—Å–æ—Å—Ç–æ—è–Ω–∏—è
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏—à–∏, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª
            return False
        except Exception as e:
            battle_logger.log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ EventWindow: {e}")
            return False

    def render(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–∫–Ω–∞ —Å–æ–±—ã—Ç–∏—è/–±–æ—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π self.stdscr.
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GameContext/GameState."""
        try:
            # –û—á–∏—â–∞–µ–º –æ–∫–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
            self.stdscr.clear()
            # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–∑ Window
            self._display_header() # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            self._display_body()   # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–ª–∞ (–ª–æ–≥ –±–æ—è)
            self._display_footer() # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
            self.stdscr.refresh()
        except curses.error:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ curses
            pass
        except Exception as e:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            battle_logger.log_system_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ EventWindow: {e}")
            pass

    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∫–Ω–∞.
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –±–æ—è –∏ –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            if not self.battle_started:
                self.battle_started = True
                # –û—á–∏—â–∞–µ–º –ª–æ–≥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –±–æ—è
                if hasattr(battle_logger, 'log_lines'):
                    battle_logger.log_lines.clear()
                battle_logger.log("")
                battle_logger.log("üèÅ –ë–û–ô –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!")

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ–π
                self.run_automatic_battle()

            else:
                # –ï—Å–ª–∏ run –≤—ã–∑–≤–∞–Ω —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏), –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                super().run()

        finally:
            try:
                pass
            except Exception as e:
                pass

    def run_automatic_battle(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ–π, –æ–±–Ω–æ–≤–ª—è—è —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞."""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        from Battle.battle_statistics import get_battle_statistics
        from Battle.rewards import BattleRewards
        from Config.game_config import MAX_ROUNDS
        from Battle.round_logic import battle_round
        from Config.curses_config import ROUND_DELAY_MS

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –±–æ–µ–º
        from Battle.battle_simulator import BattleSimulator
        BattleSimulator.pre_battle_setup(self.players, self.enemies)

        # –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        battle_id = str(uuid.uuid4())
        stats = get_battle_statistics()
        stats.start_battle_tracking(battle_id, self.players, self.enemies)

        # –ù–∞—á–∞–ª–æ –±–æ—è
        battle_result = "draw" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–∏—á—å—è

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—è
        for round_num in range(1, MAX_ROUNDS + 1):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –±–æ–π —Ä–∞–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª 'q')
            if self.command_handler.context and self.command_handler.context.should_exit():
                battle_result = "interrupted"
                break

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–æ–≤
            battle_logger.log(f"--- –†–∞—É–Ω–¥ {round_num} ---")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ä–∞—É–Ω–¥
            round_result = battle_round(self.players, self.enemies, battle_logger)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
            if round_result == "win":
                battle_result = "win"
                battle_logger.log("üéâ –ü–û–ë–ï–î–ê! –í—Å–µ –≤—Ä–∞–≥–∏ –ø–æ–≤–µ—Ä–∂–µ–Ω—ã!")
                break
            elif round_result == "loss":
                battle_result = "loss"
                # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤ battle_round
                break

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
            from Battle.round_logic import post_round_processing
            post_round_processing(self.players, self.enemies)

            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
            self.render()
            self.stdscr.refresh()

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏
            delay_ms = ROUND_DELAY_MS

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º getch —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
            self.stdscr.timeout(delay_ms)
            key = self.stdscr.getch()
            self.stdscr.timeout(-1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –Ω–∞ —Å–ª—É—á–∞–π –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ ('q')
            if key != -1: # –ï—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞
                if self._handle_input(key): # _handle_input –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –¥–ª—è –≤—ã—Ö–æ–¥–∞ ('q')
                    battle_result = "interrupted"
                    battle_logger.log("‚ö†Ô∏è –ë–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

        # –ï—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
        if battle_result == "draw":
            battle_logger.log("‚öîÔ∏è –ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω (–Ω–∏—á—å—è –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤).")

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—è
        BattleSimulator.post_battle_processing(self.players, self.enemies, battle_result)

        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.render()
        self.stdscr.refresh()

        # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –±–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è EventState)
        battle_logger.log("–ù–∞–∂–º–∏—Ç–µ 'Q' –∏–ª–∏ ESC –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.")
