import abc
import curses

from Utils.UI.key_hints import INVENTORY_HINTS

class AbstractWindow(abc.ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self, stdscr):
        self.stdscr = stdscr
        self.height = 0
        self.width = 0
        self.hint_class = None
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∫–Ω–∞"""
        while True:
            try:
                self.height, self.width = self.stdscr.getmaxyx()
                self.stdscr.clear()
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–∫–Ω–∞
                self._display_header()
                self._display_body()
                self._display_footer()
                
                self.stdscr.refresh()
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
                key = self.stdscr.getch()
                if self._handle_input(key):
                    break
                    
            except curses.error:
                pass
            except Exception:
                pass
    
    def _display_header(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞"""
        header_text = self.get_header_text()
        if header_text:
            self.stdscr.addstr(0, self.width // 2 - len(header_text) // 2, 
                             header_text, self.get_header_style())
            self.stdscr.addstr(1, 0, "‚îÄ" * (self.width - 1), 
                             self.get_separator_style())
    
    def _display_footer(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–ª–∞–≤–∏—à–∞–º"""
        if self.hint_class and hasattr(self.hint_class, 'display_hints'):
            self.hint_class.display_hints(self.stdscr)

    @abc.abstractmethod
    def get_header_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞"""
        pass
    
    @abc.abstractmethod
    def get_key_hints(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ø–æ –∫–ª–∞–≤–∏—à–∞–º"""
        pass
    
    @abc.abstractmethod
    def _display_body(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞"""
        pass
    
    @abc.abstractmethod
    def _handle_input(self, key: int) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –¥–ª—è –≤—ã—Ö–æ–¥–∞"""
        pass
    
    def get_header_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        return curses.A_BOLD
    
    def get_separator_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
        return curses.A_DIM
    
    def get_hints_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
        return curses.A_NORMAL


# –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:

class InventoryWindow(AbstractWindow):
    """–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    
    def __init__(self, stdscr, players, inventory):
        super().__init__(stdscr)
        self.players = players or []
        self.inventory = inventory
        self.current_tab = 0
        self.hint_class = INVENTORY_HINTS
        
        if not self.players:
            raise ValueError("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    def get_header_text(self) -> str:
        return "üéí –ò–ù–í–ï–ù–¢–ê–†–¨"
    
    def get_key_hints(self) -> str:
        return "‚Üê‚Üí –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ | Q/E/ESC –í—ã—Ö–æ–¥ | Enter –í—ã–±—Ä–∞—Ç—å"
    
    def _display_body(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        if len(self.players) <= self.current_tab:
            return
            
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        self._display_player_tabs()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        if self.height > 4:
            self._display_player_content()
    
    def _display_player_tabs(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤"""
        if self.height <= 2:
            return
            
        tab_x = 2
        for i, player in enumerate(self.players):
            if i == self.current_tab:
                # –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
                self.stdscr.addstr(2, tab_x, f" [{player.name}] ", 
                                 curses.A_BOLD)
            else:
                # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
                self.stdscr.addstr(2, tab_x, f" {player.name} ", 
                                 curses.A_NORMAL)
            tab_x += len(player.name) + 4
    
    def _display_player_content(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞"""
        current_player = self.players[self.current_tab]
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–∞
        if self.height > 5:
            self._display_hero_stats(current_player)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        if self.height > 12:
            self._display_inventory_items()
    
    def _display_hero_stats(self, player):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è display_hero_stats_in_inventory
        pass
    
    def _display_inventory_items(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        pass
    
    def _handle_input(self, key: int) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –æ–∫–Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        if key in [ord('q'), ord('Q'), 27]:  # 27 = ESC
            return True
        elif key == curses.KEY_LEFT:
            self.current_tab = (self.current_tab - 1) % len(self.players)
        elif key == curses.KEY_RIGHT:
            self.current_tab = (self.current_tab + 1) % len(self.players)
        elif key == curses.KEY_RESIZE:
            return False  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ
        elif key in [10, 13]:  # Enter
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
            pass
        
        return False