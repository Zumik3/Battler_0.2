# commands.py - –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–∞–Ω–¥

import curses
from Battle.battle_logic import simulate_battle
from Battle.battle_logger import battle_logger
from Config.curses_config import BATTLE_DELAY
from Characters.char_utils import create_enemies
from Inventory.inventory import get_inventory
from Utils.UI.Statistics.statistics_window import GlobalStatsWindow
from Utils.display import display_inventory_screen
from Utils.UI.Skills.skills_window import display_abilities_screen

class CommandHandler:
    def __init__(self, players, enemies, stdscr=None):
        self.players = players
        self.enemies = enemies
        self.stdscr = stdscr
        self.commands = {
            'go': self.start_battle,
            'start': self.start_battle,
            'fight': self.start_battle,
            'help': self.show_help,
            'h': self.show_help,
            'clear': self.clear_log,
            'cls': self.clear_log,
            'exit': self.exit_game,
            'quit': self.exit_game,
            'q': self.exit_game,
            'inventory': self.open_inventory,
            'inv': self.open_inventory,
            'i': self.open_inventory,
            'skills': self.open_skills,
            'abilities': self.open_skills,
            'abil': self.open_skills,
            'stat': self.open_statistics  # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        }
    
    def process_input(self, key):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏"""
        try:
            if key == ord('q') or key == ord('Q'):
                return self.exit_game()
            elif key == 10 or key == 13:  # Enter
                return self.start_battle()
            elif key == ord('i') or key == ord('I'):
                self.open_inventory()
                return False
            elif key == ord('s') or key == ord('S'):
                self.open_skills()
                return False
            elif key == curses.KEY_F12:
                self.open_statistics()
                return False
            elif key == ord('h') or key == ord('H'):
                self.show_help()
                return False
            elif key == ord('c') or key == ord('C'):
                self.clear_log()
                return False
            elif key == 27:  # ESC
                return True  # –í—ã—Ö–æ–¥
            elif key == 3:   # Ctrl+C
                return True  # –í—ã—Ö–æ–¥
        except Exception:
            pass
        return False  # –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    
    def execute_command(self, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
        cmd = command.strip().lower()
        
        if cmd in self.commands:
            return self.commands[cmd]()
        else:
            battle_logger.log_system_message(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            battle_logger.log_system_message("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
            return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def start_battle(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –±–æ–π"""
        try:
            self.enemies = create_enemies(self.players)
            result = simulate_battle(self.players, self.enemies)
            return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
            
        except Exception as e:
            battle_logger.log_system_message(f"üí• –û—à–∏–±–∫–∞ –≤ –±–æ—é: {str(e)}")
            return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å"""
        battle_logger.set_message_delay(0)
        battle_logger.log_system_message("üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É):")
        battle_logger.log_system_message("  Enter - –Ω–∞—á–∞—Ç—å –±–æ–π")
        battle_logger.log_system_message("  I - –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
        battle_logger.log_system_message("  S - –æ—Ç–∫—Ä—ã—Ç—å —É–º–µ–Ω–∏—è")
        battle_logger.log_system_message("  H - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å")
        battle_logger.log_system_message("  C - –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥")
        battle_logger.log_system_message("  T - —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ")
        battle_logger.log_system_message("  Q - –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")
        battle_logger.set_message_delay(BATTLE_DELAY)
        return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        battle_logger.clear()
        battle_logger.log_system_message("üóëÔ∏è  –õ–æ–≥ –æ—á–∏—â–µ–Ω")
        return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def exit_game(self):
        """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –∏–≥—Ä—ã"""
        battle_logger.log_system_message("üëã –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")
        return True  # –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
    
    def open_inventory(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
        if self.stdscr:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Ä–∞–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                display_inventory_screen(self.stdscr, self.players)
                #inventory = get_inventory()
                #window = InventoryWindow(self.stdscr, self.players, inventory)
                #window.run()
            except Exception as e:
                battle_logger.log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {str(e)}")
        else:
            battle_logger.log_system_message("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ")
        return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def open_skills(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —É–º–µ–Ω–∏–π"""
        if self.stdscr:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Ä–∞–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                display_abilities_screen(self.stdscr, self.players)
            except Exception as e:
                battle_logger.log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —É–º–µ–Ω–∏–π: {str(e)}")
        else:
            battle_logger.log_system_message("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —É–º–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ")
        return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def open_statistics(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ"""
        if self.stdscr:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Ä–∞–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                window = GlobalStatsWindow(self.stdscr)
                window.run()
            except Exception as e:
                battle_logger.log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        else:
            battle_logger.log_system_message("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ")
        return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def get_input(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞ (–ø—É—Å—Ç–∞—è –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)"""
        return ""
    
    def get_available_commands(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        return list(self.commands.keys())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main)
command_handler = None