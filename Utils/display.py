# display.py - –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞

import curses
from Battle.battle_logger import battle_logger
from Config.curses_config import *
from Config.game_config import NAME_COLUMN_WIDTH, HP_BAR_WIDTH, ENERGY_BAR_WIDTH
from Characters.char_utils import draw_character_name
from Utils.progress_bar import draw_progress_bar, draw_energy_bar
from Inventory.inventory import get_inventory

def create_screen_observer(stdscr, command_handler):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞"""
    def screen_observer(message):
        update_display(stdscr, command_handler)
        stdscr.refresh()
    return screen_observer

def update_display(stdscr, command_handler):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞"""
    try:
        height, width = stdscr.getmaxyx()
        input_str = command_handler.get_input()
        
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        stdscr.clear()
        stdscr.bkgd(' ', get_color_pair(COLOR_WHITE))
        
        # === –í–ï–†–•–ù–Ø–Ø –û–ë–õ–ê–°–¢–¨ ===
        stdscr.addstr(0, width//2-10, "üõ°Ô∏è –ü–†–ò–ú–ò–¢–ò–í–ù–ê–Ø –ò–ì–†–ê", get_color_pair(COLOR_CYAN) | curses.A_BOLD)
        inventory = get_inventory()
        stdscr.addstr(1, 2, f"–ó–æ–ª–æ—Ç–æ: {inventory.get_gold()}", get_color_pair(COLOR_GRAY))
        stdscr.addstr(2, 0, "‚îÄ" * (width-1), get_color_pair(COLOR_GRAY) | curses.A_DIM)
        
        # === –û–ë–õ–ê–°–¢–¨ –ü–ï–†–°–û–ù–ê–ñ–ï–ô ===
        display_characters(stdscr, command_handler.players, command_handler.enemies, width, height)

        # === –û–ë–õ–ê–°–¢–¨ –õ–û–ì–ê ===
        log_start_y = 9
        stdscr.addstr(log_start_y, 0, "‚îÄ" * (width-1), get_color_pair(COLOR_GRAY) | curses.A_DIM)
        stdscr.addstr(log_start_y + 1, 2, "üìú –õ–û–ì –ë–û–Ø:", get_color_pair(COLOR_WHITE) | curses.A_BOLD)
        
        display_log(stdscr, width, height, log_start_y)
        
        # === –û–ë–õ–ê–°–¢–¨ –í–í–û–î–ê ===
        input_y = height - 2
        stdscr.addstr(input_y, 0, "‚îÄ" * (width-1), get_color_pair(COLOR_GRAY) | curses.A_DIM)
        stdscr.addstr(input_y + 1, 0, f"‚ù± {input_str}", get_color_pair(COLOR_WHITE) | curses.A_BOLD)
        
    except curses.error:
        pass

def display_characters(stdscr, players, enemies, width, height):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
    
    # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–≥—Ä–æ–∫–∏
    mid_x = width // 2
    stdscr.addstr(4, 2, "üßç –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω—Ü–µ–≤:", curses.A_BOLD)

    for i, char in enumerate(players):
        draw_character_info(stdscr, char, 5 + i, 4, is_player=True)
    
    # === –í—Ä–∞–≥–∏ ===
    stdscr.addstr(4, mid_x + 2, "üëπ –í—Ä–∞–≥–∏:", curses.A_BOLD)
    for i, char in enumerate(enemies):
        draw_character_info(stdscr, char, 6 + i, mid_x + 4, is_player=False)

def draw_character_info(stdscr, character, y, x, is_player=True):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    
    Args:
        stdscr: –≠–∫—Ä–∞–Ω curses
        character: –û–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        y, x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        is_player: True –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤, False –¥–ª—è –º–æ–Ω—Å—Ç—Ä–æ–≤
    """
    # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    draw_character_name(stdscr, y, x, character)
    
    # –†–∏—Å—É–µ–º HP-–±–∞—Ä
    bar_x = x + NAME_COLUMN_WIDTH + 1
    draw_progress_bar(
        stdscr=stdscr,
        y=y,
        x=bar_x,
        current_value=character.hp,
        max_value=character.derived_stats.max_hp,
        bar_width=HP_BAR_WIDTH
    )
    
    # –†–∏—Å—É–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä
    energy_bar_x = bar_x + HP_BAR_WIDTH + 2
    draw_energy_bar(
        stdscr=stdscr,
        y=y,
        x=energy_bar_x,
        current_energy=character.energy,
        max_energy=character.derived_stats.max_energy,
        bar_width=ENERGY_BAR_WIDTH
    )

def display_log(stdscr, width, height, log_start_y) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–æ–≥ –±–æ—è"""
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥ - –∑–∞–Ω–∏–º–∞–µ–º –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
    log_height = height - log_start_y - 5
    log_lines = battle_logger.get_lines()
    if log_lines:
        visible_log_lines = log_lines[-log_height:] if len(log_lines) > log_height else log_lines
        for i, line in enumerate(visible_log_lines):
            if log_start_y + 2 + i < height - 3:
                display_line = line[:width-4]

                if isinstance(display_line, list):
                    current_x = 2
                    for text, color_pair in display_line:
                        if color_pair == 0:
                            stdscr.addstr(log_start_y + 2 + i, current_x, text)
                        else:
                            stdscr.addstr(log_start_y + 2 + i, current_x, text, curses.color_pair(color_pair))
                        current_x += len(text)
                else:
                    stdscr.addstr(log_start_y + 2 + i, 2, display_line, get_color_pair(COLOR_WHITE))

def display_inventory_screen(stdscr, players):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω"""
    inventory = get_inventory()
    
    while True:
        try:
            height, width = stdscr.getmaxyx()
            stdscr.clear()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            stdscr.addstr(0, width//2-8, "üéí –ò–ù–í–ï–ù–¢–ê–†–¨", 
                         get_color_pair(COLOR_CYAN) | curses.A_BOLD)
            stdscr.addstr(1, 0, "‚îÄ" * (width-1), get_color_pair(COLOR_GRAY) | curses.A_DIM)
            
            # === –ë–õ–û–ö 1: –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ì–ï–†–û–ï–í (2 –≤ —Ä—è–¥) ===
            stdscr.addstr(2, 2, "üë• –ì–ï–†–û–ò", 
                         get_color_pair(COLOR_YELLOW) | curses.A_BOLD)
            stdscr.addstr(3, 0, "‚îÄ" * (width-1), get_color_pair(COLOR_GRAY) | curses.A_DIM)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–µ—Ä–æ–µ–≤ –ø–æ 2 –≤ —Ä—è–¥
            heroes_per_row = 2
            hero_width = width // heroes_per_row - 2
            
            max_hero_rows = 0
            for i, player in enumerate(players):
                row = i // heroes_per_row  # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                col = i % heroes_per_row   # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏
                
                hero_x = col * hero_width + 2
                hero_y = 4 + row * 6  # 6 —Å—Ç—Ä–æ–∫ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –≥–µ—Ä–æ—è
                
                max_hero_rows = max(max_hero_rows, row + 1)
                
                if hero_y + 5 < height - 4:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏
                    display_hero_stats_in_inventory(stdscr, player, hero_y, hero_x, hero_width)
            
            # === –ë–õ–û–ö 2: –ò–ù–í–ï–ù–¢–ê–†–¨ –° –ü–†–ï–î–ú–ï–¢–ê–ú–ò (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≥–µ—Ä–æ–µ–≤) ===
            inventory_start_y = 4 + max_hero_rows * 6
            if len(players) == 0:
                inventory_start_y = 4
            
            stdscr.addstr(inventory_start_y, 2, "üß≥ –ò–ù–í–ï–ù–¢–ê–†–¨", 
                         get_color_pair(COLOR_MAGENTA) | curses.A_BOLD)
            stdscr.addstr(inventory_start_y + 1, 0, "‚îÄ" * (width-1), 
                         get_color_pair(COLOR_GRAY) | curses.A_DIM)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            item_objects = inventory.get_all_items() if hasattr(inventory, 'get_all_items') else {}
            if item_objects:
                item_y = inventory_start_y + 3
                item_index = 0
                
                # item_objects —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç {item_object: quantity}
                for item_object, quantity in item_objects.items():
                    if item_y + item_index < height - 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
                        try:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                            template, elements = item_object.get_detailed_display_template()
                            
                            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                            quantity_text = f" —Ö{quantity}" if quantity > 1 else ""
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞—Å—Ü–≤–µ—Ç–∫–æ–π
                            current_x = 4
                            stdscr.addstr(item_y + item_index, current_x, "‚ó¶ ", get_color_pair(COLOR_WHITE))
                            current_x += 2
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
                            for text, color in elements:
                                if current_x < width - 4:
                                    stdscr.addstr(item_y + item_index, current_x, text, curses.color_pair(color))
                                    current_x += len(text)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            if quantity_text:
                                if current_x < width - 4:
                                    stdscr.addstr(item_y + item_index, current_x, quantity_text, get_color_pair(COLOR_GRAY))
                                    current_x += len(quantity_text)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                            properties = item_object.get_all_properties()
                            if properties:
                                prop_text = " ["
                                prop_parts = []
                                
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                for prop_name, prop_value in properties.items():
                                    if prop_value > 0:  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                                        readable_name = prop_name.replace('_bonus', '').replace('_', ' ').title()
                                        prop_parts.append(f"{readable_name}: {prop_value}")
                                
                                if prop_parts:
                                    prop_text += ", ".join(prop_parts)
                                    prop_text += "]"
                                    
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å–µ—Ä—ã–º —Ü–≤–µ—Ç–æ–º
                                    if current_x < width - 4 and len(prop_text) < (width - current_x - 4):
                                        stdscr.addstr(item_y + item_index, current_x, prop_text, get_color_pair(COLOR_GRAY))
                            
                            item_index += 1
                        except Exception as e:
                            # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —É –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ get_detailed_display_template
                            item_name = getattr(item_object, 'name', str(item_object))
                            stdscr.addstr(item_y + item_index, 4, f"‚ó¶ {item_name}: {quantity}", 
                                         get_color_pair(COLOR_WHITE))
                            item_index += 1
            else:
                stdscr.addstr(inventory_start_y + 3, 4, "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç", 
                             get_color_pair(COLOR_GRAY))
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –≤—ã—Ö–æ–¥—É
            stdscr.addstr(height - 2, 0, "‚îÄ" * (width-1), 
                         get_color_pair(COLOR_GRAY) | curses.A_DIM)
            stdscr.addstr(height - 1, 2, "–í–≤–µ–¥–∏—Ç–µ 'exit', 'quit' –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞", 
                         get_color_pair(COLOR_GRAY) | curses.A_DIM)
            
            stdscr.refresh()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
            key = stdscr.getch()
            if key == 27:  # ESC
                break
            elif key == curses.KEY_RESIZE:
                continue
            elif key != -1:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤—ã—Ö–æ–¥–∞
                try:
                    char = chr(key).lower()
                    if char in ['q', 'e']:  # q, exit
                        break
                except:
                    pass
                if key in [10, 13]:  # Enter
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –∑–¥–µ—Å—å
                    pass
                    
        except curses.error:
            pass

def display_hero_stats_in_inventory(stdscr, player, y, x, max_width):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏"""
    try:
        # –ò–º—è –≥–µ—Ä–æ—è —Å HP –∏ —ç–Ω–µ—Ä–≥–∏–µ–π –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–∏–º—è –∑–µ–ª–µ–Ω—ã–º)
        name = player.name[:20] if len(player.name) > 20 else player.name
        hp_text = f"HP: {player.hp}/{player.derived_stats.max_hp}"
        energy_text = f"–≠–Ω–µ—Ä–≥–∏—è: {player.energy}/{player.derived_stats.max_energy}"
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ò–º—è (–∑–µ–ª–µ–Ω—ã–π) HP –∏ –≠–Ω–µ—Ä–≥–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞)
        stdscr.addstr(y, x, name, get_color_pair(COLOR_GREEN) | curses.A_BOLD)
        stdscr.addstr(y, x + len(name), f" {hp_text}  {energy_text}", 
                     get_color_pair(COLOR_CYAN) | curses.A_BOLD)
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —É—Ä–æ–≤–µ–Ω—å, –æ–ø—ã—Ç, –∞—Ç–∞–∫–∞, –∑–∞—â–∏—Ç–∞
        left_x = x
        level_text = f"–£—Ä–æ–≤–µ–Ω—å: {getattr(player, 'level', 'N/A')}" if hasattr(player, 'level') else "–£—Ä–æ–≤–µ–Ω—å: N/A"
        stdscr.addstr(y+1, left_x, level_text)
        
        # –û–ø—ã—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        if hasattr(player, 'exp') and hasattr(player, 'exp_to_next_level'):
            exp_text = f"–û–ø—ã—Ç: {player.exp}/{player.exp_to_next_level}"
        elif hasattr(player, 'exp'):
            exp_text = f"–û–ø—ã—Ç: {player.exp}"
        else:
            exp_text = "–û–ø—ã—Ç: N/A"
        stdscr.addstr(y+2, left_x, exp_text)
        
        attack_text = f"–ê—Ç–∞–∫–∞: {getattr(player.derived_stats, 'attack', 'N/A')}" if hasattr(player, 'derived_stats') else "‚öîÔ∏è –ê—Ç–∞–∫–∞: N/A"
        stdscr.addstr(y+3, left_x, attack_text)
        
        defense_text = f"–ó–∞—â–∏—Ç–∞: {getattr(player.derived_stats, 'defense', 'N/A')}" if hasattr(player, 'derived_stats') else "üõ°Ô∏è –ó–∞—â–∏—Ç–∞: N/A"
        stdscr.addstr(y+4, left_x, defense_text)
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        right_x = x + max_width // 2
        if hasattr(player, 'stats'):
            if hasattr(player.stats, 'strength'):
                stdscr.addstr(y+1, right_x, f"–°–∏–ª–∞: {player.stats.strength}")
            if hasattr(player.stats, 'dexterity'):
                stdscr.addstr(y+2, right_x, f"–õ–æ–≤–∫–æ—Å—Ç—å: {player.stats.dexterity}")
            if hasattr(player.stats, 'intelligence'):
                stdscr.addstr(y+3, right_x, f"–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {player.stats.intelligence}")
            if hasattr(player.stats, 'constitution'):
                stdscr.addstr(y+4, right_x, f"–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {player.stats.constitution}")
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
        if y + 5 < stdscr.getmaxyx()[0]:
            stdscr.addstr(y+5, x, "‚îÄ" * min(max_width-4, stdscr.getmaxyx()[1]-x-1), 
                         get_color_pair(COLOR_GRAY) | curses.A_DIM)
        
    except curses.error:
        pass