# Utils/types.py
"""Определение общих протоколов и типов для проекта."""

from typing import Protocol, List, Any, Dict, Optional, Union

# Предполагая, что сообщения логгера могут быть строками или специальными кортежами/объектами
# Как видно из battle_logger.create_log_message и использования в round_logic.log_result
LoggerMessageType = Union[str, Any] 

class IResult(Protocol):
    """
    Протокол для результата действия (способности, эффекта статуса и т.д.).
    Определяет минимальный интерфейс, необходимый для обработки результатов в боевой системе.
    """
    success: bool
    messages: List[LoggerMessageType]
    details: Dict[str, Any]

    # Хотя details определен как атрибут, наличие методов доступа к нему
    # может быть полезным для реализации. Однако для протокола достаточно атрибута.
    # Если бы требовался метод, он был бы определен здесь.
    # Например: def get_detail(self, key: str) -> Any: ...

# Альтернативно, если details не обязателен на старте, можно сделать его опциональным
# или опустить, добавив позже. Но судя по структуре AbilityResult, он там есть.

# Протоколы для других потенциальных типов можно добавить сюда позже