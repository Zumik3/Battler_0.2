- export_files.py
# collect_py_files.py

import os
from pathlib import Path

# –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å
EXCLUDED_FILES = {"collect_py_files.py", "lines_counter.py"}

def should_include(path: Path) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª –±—ã—Ç—å –≤–∫–ª—é—á—ë–Ω –≤ —Å–±–æ—Ä–∫—É.
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç:
    - —Ñ–∞–π–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ EXCLUDED_FILES
    - —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–∞—Ö, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è –Ω–∞ '.'
    - –ª—é–±—ã–µ __pycache__ –ø–∞–ø–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—É—Ç–∏: –µ—Å–ª–∏ –ª—é–±–∞—è –ø–∞–ø–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '.', –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    for part in path.parts:
        if part.startswith(".") and len(part) > 1:  # –∏—Å–∫–ª—é—á–∞–µ–º '.' –∫–∞–∫ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
            return False

    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
    if path.name in EXCLUDED_FILES:
        return False

    return True

def main():
    root_dir = Path.cwd()
    output_file = root_dir / "output.txt"

    with open(output_file, "w", encoding="utf-8") as outfile:
        # –ò—â–µ–º –≤—Å–µ .py —Ñ–∞–π–ª—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        for py_file in root_dir.rglob("*.py"):
            if py_file.is_file() and should_include(py_file):
                try:
                    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                    rel_path = py_file.relative_to(root_dir)

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Ç—å
                    outfile.write(f"- {rel_path}\n")

                    # –ß–∏—Ç–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    with open(py_file, "r", encoding="utf-8") as infile:
                        content = infile.read()
                        outfile.write(content)

                    # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
                    outfile.write("\n\n")
                except Exception as e:
                    outfile.write(f"[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}]\n\n")

    print(f"‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {output_file}")

if __name__ == "__main__":
    main()

- main.py
# main.py
import curses
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
from Utils.UI.main_window import MainWindow
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
from Config.curses_config import setup_screen
from Characters.char_utils import create_player_team
from Inventory.inventory import get_inventory

def main(stdscr):
    # –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Ä–∞–Ω–∞
    setup_screen(stdscr)

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    players = create_player_team()
    # enemies –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ EventWindow/CommandHandler

    inventory = get_inventory()

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    # –û–Ω–æ —Å–∞–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç EventWindow
    main_window = MainWindow(stdscr, players)
    main_window.run()

    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ EventWindow.run()

if __name__ == "__main__":
    curses.wrapper(main)


'''
def main(stdscr):
    # –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Ä–∞–Ω–∞
    setup_screen(stdscr)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    players = create_player_team()
    enemies = []

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
    inventory = get_inventory()
    inventory.add_gold(100)

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    command_handler = CommandHandler(players, enemies, stdscr)
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    screen_observer = create_screen_observer(stdscr, command_handler)
    battle_logger.add_observer(screen_observer)
    
    # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
    stdscr.nodelay(False)  # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
    stdscr.keypad(True)    # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    battle_logger.log_system_message("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ–±–∞—Ç—Ç–ª–µ—Ä!")
    battle_logger.log_system_message("–ù–∞–∂–º–∏—Ç–µ 'H' –¥–ª—è –ø–æ–º–æ—â–∏ –∏–ª–∏ 'Enter' –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è")
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            update_display(stdscr, command_handler)
            stdscr.refresh()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
            try:
                key = stdscr.getch()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º getch() –≤–º–µ—Å—Ç–æ get_wch() –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                result = command_handler.process_input(key)
                if result is True:  # –ù—É–∂–Ω–æ –≤—ã–π—Ç–∏
                    break
            except:
                continue
                
    finally:
        # –£–¥–∞–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        battle_logger.remove_observer(screen_observer)

if __name__ == "__main__":
    curses.wrapper(main)
'''

- Config/curses_config.py
# Config/curses_config.py - –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ curses

import curses

# –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
COLOR_RED = 1
COLOR_GREEN = 2
COLOR_YELLOW = 3
COLOR_BLUE = 4
COLOR_MAGENTA = 5
COLOR_CYAN = 6
COLOR_WHITE = 7
COLOR_GRAY = 8

# –°—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ None
BOLD_RED = None
BOLD_GREEN = None
BOLD_YELLOW = None
BOLD_BLUE = None
BOLD_MAGENTA = None
BOLD_CYAN = None
BOLD_WHITE = None
BOLD_GRAY = None

BOLD = None
UNDERLINE = None
NORMAL = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
BATTLE_DELAY = 0.4  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ –±–æ—é (—Å–µ–∫—É–Ω–¥—ã)
SCREEN_REFRESH_DELAY = 0.01  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞ (—Å–µ–∫—É–Ω–¥—ã)

def setup_colors():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã"""
    global BOLD_RED, BOLD_GREEN, BOLD_YELLOW, BOLD_BLUE, BOLD_MAGENTA, BOLD_CYAN, BOLD_WHITE, BOLD_GRAY
    global BOLD, UNDERLINE, NORMAL
    
    if curses.has_colors():
        curses.start_color()
        curses.use_default_colors()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–∞—Ä
        curses.init_pair(1, curses.COLOR_RED, -1)     # –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
        curses.init_pair(2, curses.COLOR_GREEN, -1)   # –ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç
        curses.init_pair(3, curses.COLOR_YELLOW, -1)  # –ñ–µ–ª—Ç—ã–π —Ç–µ–∫—Å—Ç
        curses.init_pair(4, curses.COLOR_BLUE, -1)    # –°–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
        curses.init_pair(5, curses.COLOR_MAGENTA, -1) # –ü—É—Ä–ø—É—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        curses.init_pair(6, curses.COLOR_CYAN, -1)    # –ì–æ–ª—É–±–æ–π —Ç–µ–∫—Å—Ç
        curses.init_pair(7, curses.COLOR_WHITE, -1)   # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
        curses.init_pair(8, 8, -1)                    # –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π
        BOLD_RED = curses.color_pair(1) | curses.A_BOLD
        BOLD_GREEN = curses.color_pair(2) | curses.A_BOLD
        BOLD_YELLOW = curses.color_pair(3) | curses.A_BOLD
        BOLD_BLUE = curses.color_pair(4) | curses.A_BOLD
        BOLD_MAGENTA = curses.color_pair(5) | curses.A_BOLD
        BOLD_CYAN = curses.color_pair(6) | curses.A_BOLD
        BOLD_WHITE = curses.color_pair(7) | curses.A_BOLD
        BOLD_GRAY = curses.color_pair(8) | curses.A_BOLD
        
        BOLD = curses.A_BOLD
        UNDERLINE = curses.A_UNDERLINE
        NORMAL = curses.A_NORMAL
       
        return True
    return False

def setup_screen(stdscr):
    """–ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
    curses.curs_set(0)  # –°–∫—Ä—ã—Ç—å –∫—É—Ä—Å–æ—Ä
    setup_colors()
    stdscr.clear()
    stdscr.bkgd(' ', curses.color_pair(COLOR_WHITE))
    stdscr.refresh()

def get_color_pair(color_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞—Ä—ã –ø–æ ID"""
    return curses.color_pair(color_id)

- Config/game_config.py
#–ò–≥—Ä–æ–≤—ã–µ
MAX_ROUNDS = 30
MAX_ROOMS = 10
BASE_ENERGY_COST: int = 10
BASE_ENERGY_RECOVERY = 30 #–ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ–≥—Ä–∏–∏ –ø–æ—Å–ª–µ –±–∏—Ç–≤—ã
RESTORE_ENERGY_AMOUNT = 25

# –ë–∞–∑–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞–≥—Ä–∞–¥
EXP_BASE = 10
GOLD_BASE = 5
EXP_VARIANCE = 2
GOLD_VARIANCE = 3

# –¢–∏–ø—ã —Å–ª–æ—Ç–æ–≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
SLOT_TYPE_WEAPON = 'weapon'
SLOT_TYPE_ARMOR = 'armor'
SLOT_TYPE_ACCESSORY = 'accessory'
SLOT_TYPE_CONSUMABLE = 'consumable'
EQUIPMENT_SLOT_TYPES = [SLOT_TYPE_WEAPON, SLOT_TYPE_ARMOR, SLOT_TYPE_ACCESSORY, SLOT_TYPE_CONSUMABLE]

# –ù–∞–∑–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
SLOT_NAME_WEAPON = '–û—Ä—É–∂–∏–µ'
SLOT_NAME_ARMOR = '–ë—Ä–æ–Ω—è'
SLOT_NAME_ACCESSORY = '–ê–∫—Å–µ—Å—Å—É–∞—Ä'
SLOT_NAME_CONSUMABLE = '–†–∞—Å—Ö–æ–¥–Ω–∏–∫'

#–í–∏–∑—É–∞–ª—å–Ω—ã–µ
INPUT_PROMPT = "‚ù± "
PROGRESS_BAR_CHARS = "‚ñ†‚ñ°"
PROGRESS_BORDER_CHARS = "[]"
DAMAGE_LIST_ICON = "üî∏"
EFFECT_LIST_ICON = "‚ñ™"
EFFECT_LIST_ICON2 = "üîπ"

SPACES_FIRST_LEVEL = "  "
SPACES_SECOND_LEVEL = "    "

PLAYER_NAME_COLUMN_WIDTH = 13  # –î–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –±–∞—Ä–æ–≤ (6 –∏–º—è + 7 –æ—Å—Ç–∞–ª—å–Ω–æ–µ)
MONSTER_NAME_COLUMN_WIDTH = 27  # –î–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –±–∞—Ä–æ–≤

#–°–ª—É–∂–µ–±–Ω—ã–µ
BASE_DELAY_MS = 400  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
ROUND_DELAY_MS = 1200  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏
LOG_MAX_LINES = 200
MIN_TOP_HEIGHT = 10

HP_BAR_COLORS = {2, 6, 1}
HP_BAR_WIDTH = 10
ENERGY_BAR_WIDTH = 4
ENERGY_BAR_COLORS = {1, 1, 1}

ABILITIES_PATH = "Characters/Abilities"

- Battle/battle_logger.py
# battle_logger.py - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –±–æ—è —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º Observer

import time
from Config.curses_config import BATTLE_DELAY

class BattleLogger:
    def __init__(self):
        self.log_lines = []
        self.max_lines = 100
        self.observers = []  # –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        self.message_delay = BATTLE_DELAY  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    def set_message_delay(self, delay=BATTLE_DELAY):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        self.message_delay = max(0, delay)
    
    def get_message_delay(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–¥–µ—Ä–∂–∫—É"""
        return self.message_delay
    
    def add_observer(self, observer):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
        if observer not in self.observers:
            self.observers.append(observer)
    
    def remove_observer(self, observer):
        """–£–¥–∞–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
        if observer in self.observers:
            self.observers.remove(observer)
    
    def _notify_observers(self, message):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        for observer in self.observers:
            try:
                observer(message)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π"""
        self.log_lines.append(message)
        if len(self.log_lines) > self.max_lines:
            self.log_lines = self.log_lines[-self.max_lines:]
        self._notify_observers(message)  # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        if self.message_delay > 0:
            time.sleep(self.message_delay)

    def log_player_action(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –∏–≥—Ä–æ–∫–∞"""
        self.log(f"üë§ {message}")
    
    def log_enemy_action(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –≤—Ä–∞–≥–∞"""
        self.log(message)
    
    def log_system_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.log(f"‚ÑπÔ∏è  {message}")
    
    def log_combat_result(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±–æ—è"""
        self.log(f"‚öîÔ∏è  {message}")
    
    def log_heal(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–µ—á–µ–Ω–∏–∏"""
        self.log(f"üíñ {message}")
    
    def log_death(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏"""
        self.log(f"üíÄ {message}")
    
    def get_lines(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞"""
        return self.log_lines.copy()
    
    def clear(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        self.log_lines.clear()

    @staticmethod
    def create_log_message(template: str, elements: list[tuple[str, int]]) -> list[tuple[str, int]]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
        
        :param template: –°—Ç—Ä–æ–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Ç–∏–ø–∞ %1, %2, %3
        :param elements: –°–ø–∏—Å–æ–∫ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä [(–∫–ª—é—á, —Ü–≤–µ—Ç), ...] 
                        –≥–¥–µ –∫–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º
        :return: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–µ–∫—Å—Ç, —Ü–≤–µ—Ç) –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        """
        result = []
        current_pos = 0
        
        while current_pos < len(template):
            # –ò—â–µ–º —à–∞–±–ª–æ–Ω %—á–∏—Å–ª–æ
            template_start = template.find('%', current_pos)
            
            if template_start == -1:
                # –ë–æ–ª—å—à–µ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ç—Ä–æ–∫–∏
                if current_pos < len(template):
                    result.append((template[current_pos:], 0))
                break
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —à–∞–±–ª–æ–Ω–∞ (–≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ \n)
            if template_start > current_pos:
                result.append((template[current_pos:template_start], 0))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª —Ü–∏—Ñ—Ä–æ–π
            if (template_start + 1 < len(template) and 
                template[template_start + 1].isdigit()):
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –Ω–æ–º–µ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
                num_end = template_start + 1
                while num_end < len(template) and template[num_end].isdigit():
                    num_end += 1
                
                template_num = int(template[template_start + 1:num_end])
                
                # –ó–∞–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 1)
                if 1 <= template_num <= len(elements):
                    key, color = elements[template_num - 1]  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
                    key_str = str(key) if not isinstance(key, str) else key
                    result.append((key_str, color))
                else:
                    # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    result.append((template[template_start:num_end], 0))
                
                current_pos = num_end
            else:
                # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∏–º–≤–æ–ª %, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                result.append(('%', 0))
                current_pos = template_start + 1
        
        return result

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
battle_logger = BattleLogger()

- Battle/base_mechanics.py
import random
from typing import Tuple, Dict, List, Any, Optional, Union
from Battle.battle_logger import battle_logger

# –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤ –∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from Characters.character import Character
    from Characters.Abilities.ability import Ability


class GameMechanics:
    """–ë–∞–∑–æ–≤—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏."""

    # ==================== –†–∞—Å—á–µ—Ç—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π ====================
    @staticmethod
    def calculate_dodge_chance(target: 'Character') -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –∞—Ç–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≤–∫–æ—Å—Ç–∏ —Ü–µ–ª–∏.
        :param target: –ü–µ—Ä—Å–æ–Ω–∞–∂, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—ã—Ç–∞–µ—Ç—Å—è —É–∫–ª–æ–Ω–∏—Ç—å—Å—è –∞—Ç–∞–∫–∞.
        :return: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–∫–ª–æ–Ω–µ–Ω–∏—è (float –æ—Ç 0.0 –¥–æ 1.0).
        """
        # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è 5%
        base_dodge = 0.05
        # –ë–æ–Ω—É—Å –∫ —É–∫–ª–æ–Ω–µ–Ω–∏—é: +1% –∑–∞ –∫–∞–∂–¥—ã–µ 2 –µ–¥–∏–Ω–∏—Ü—ã –ª–æ–≤–∫–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö 10
        dex_bonus = max(0, (target.stats.dexterity - 10) * 0.005)  # +0.5% –∑–∞ –∫–∞–∂–¥—É—é –µ–¥–∏–Ω–∏—Ü—É dex > 10
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è 30%
        return min(0.30, base_dodge + dex_bonus)

    @staticmethod
    def calculate_crit_chance(character: 'Character') -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ (—É–¥–∞—Ä–∞ –∏–ª–∏ –ª–µ—á–µ–Ω–∏—è) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≤–∫–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –ø—Ä–∏–º–µ–Ω—è—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç.
        :return: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ (float –æ—Ç 0.0 –¥–æ 1.0).
        """
        # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ 5%
        base_crit = 0.05
        # –ë–æ–Ω—É—Å –∫ –∫—Ä–∏—Ç—É: +1% –∑–∞ –∫–∞–∂–¥—É—é –µ–¥–∏–Ω–∏—Ü—É –ª–æ–≤–∫–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö 10
        crit_bonus = max(0, (character.stats.dexterity - 10) * 0.01)
        
        # TODO: –ø–æ–∫–∞ –¥–µ–ª–∞–µ–º –∫—Ä–∏—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ –≤ –ª–æ–± - –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
        a = 0
        crit_ability = character.ability_manager.get_passive_ability('criticalstrike')
        if crit_ability:
            ability_effect = crit_ability.apply_effect(character)
            crit_bonus += ability_effect['critical_bonus']
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ 50%
        return min(0.50, base_crit + crit_bonus)

    @staticmethod
    def check_critical(character: 'Character') -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º.
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –ø—Ä–∏–º–µ–Ω—è—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç
        :return: True –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        crit_chance = GameMechanics.calculate_crit_chance(character)
        return random.random() < crit_chance

    @staticmethod
    def check_dodge_with_message(attacker: 'Character', target: 'Character') -> Tuple[bool, Optional[List]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—É —É–∫–ª–æ–Ω–∏—Ç—å—Å—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
        :param attacker: –ê—Ç–∞–∫—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        :param target: –¶–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ø—ã—Ç–∞–µ—Ç—Å—è —É–∫–ª–æ–Ω–∏—Ç—å—Å—è
        :return: –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—à–Ω–æ_—É–∫–ª–æ–Ω–∏–ª—Å—è: bool, —Å–æ–æ–±—â–µ–Ω–∏–µ: list –∏–ª–∏ None)
        """
        dodge_chance = GameMechanics.calculate_dodge_chance(target)
        dodge_success = random.random() < dodge_chance
        
        if dodge_success:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–∫–ª–æ–Ω–µ–Ω–∏–∏
            icon = "üèÉ"

            template = "%1 %2 –∞—Ç–∞–∫—É–µ—Ç %3, –Ω–æ —Ç–æ—Ç —É–∫–ª–æ–Ω—è–µ—Ç—Å—è!"
            if attacker.is_player:
                elements = [(icon, 0), (attacker.name, 2), (target.name, 4)]
            else:
                elements = [(icon, 0), (attacker.name, 4), (target.name, 2)]
            message = battle_logger.create_log_message(template, elements)
        else:
            message = None
            
        return dodge_success, message

    # ==================== –†–∞—Å—á–µ—Ç—ã —É—Ä–æ–Ω–∞ ====================
    @staticmethod
    def calculate_damage_variance(base_damage: float, variance_percent: float = 0.1) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É—Ä–æ–Ω–∞.
        :param base_damage: –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        :param variance_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%)
        :return: –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
        """
        min_damage = base_damage * (1 - variance_percent)
        max_damage = base_damage * (1 + variance_percent)
        return random.uniform(min_damage, max_damage)

    @staticmethod
    def calculate_armor_reduction(damage: float, armor: int) -> Tuple[int, int]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –±—Ä–æ–Ω–µ–π —Å –ø–ª–∞–≤–Ω–æ–π S-–æ–±—Ä–∞–∑–Ω–æ–π –∫—Ä–∏–≤–æ–π.
        :param damage: –ò—Å—Ö–æ–¥–Ω—ã–π —É—Ä–æ–Ω
        :param armor: –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –±—Ä–æ–Ω–∏
        :return: –ö–æ—Ä—Ç–µ–∂ (—É—Ä–æ–Ω –ø–æ—Å–ª–µ —Å–Ω–∏–∂–µ–Ω–∏—è, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–Ω)
        """
        if armor <= 0:
            return int(damage), 0
        
        # S-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è (—Å–∏–≥–º–æ–∏–¥) –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        # k - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫—Ä—É—Ç–∏–∑–Ω—ã –∫—Ä–∏–≤–æ–π (–º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è)
        k = 0.03
        armor_effectiveness = 1 / (1 + 2.718 ** (-k * (armor - 50)))  # –°–∏–≥–º–æ–∏–¥ —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ 50
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–º–∞–∫—Å–∏–º—É–º 85% –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        armor_effectiveness = min(armor_effectiveness, 0.85)
        reduced_damage = damage * (1 - armor_effectiveness)
        # –£—Ä–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1
        final_damage = max(1, int(reduced_damage))
        blocked_damage = int(damage - reduced_damage)
        return final_damage, blocked_damage

    # ==================== –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ ====================
    @staticmethod
    def apply_all_mechanics(ability: 'Ability', attacker: 'Character', target: 'Character', base_damage: float) -> Dict[str, Any]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –±–∞–∑–æ–≤—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
        :param ability: –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
        :param attacker: –ê—Ç–∞–∫—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        :param target: –¶–µ–ª—å –∞—Ç–∞–∫–∏
        :param base_damage: –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —É—Ä–æ–Ω–æ–º
        """
        results = {
            'dodge_success': False,
            'dodge_message': None,
            'critical_hit': False,
            'base_damage': base_damage,
            'varied_damage': 0,
            'blocked_damage': 0,
            'reduced_damage': 0,
            'final_damage': 0
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
        results['critical_hit'] = GameMechanics.check_critical(attacker)
        crit_multiplier = 2.0 if results['critical_hit'] else 1.0
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —É—Ä–æ–Ω–∞/—Ö–∏–ª–∞
        results['varied_damage'] = GameMechanics.calculate_damage_variance(base_damage)
        damage_after_variance = results['varied_damage'] * crit_multiplier
        results['final_damage'] = int(damage_after_variance)
        
        if ability.type == 0:  # (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞—Ç–∞–∫–∏)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
            dodge_success, dodge_message = GameMechanics.check_dodge_with_message(attacker, target)
            results['dodge_success'] = dodge_success
            results['dodge_message'] = dodge_message
            
            if dodge_success:
                results['final_damage'] = 0
                return results
        
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
            defence = target.derived_stats.defense
            if defence > 0:
                results['reduced_damage'], results['blocked_damage'] = GameMechanics.calculate_armor_reduction(
                    damage_after_variance, defence)
            else:
                results['reduced_damage'] = damage_after_variance
            
            results['final_damage'] = max(0, round(results['reduced_damage']))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –Ω–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            #if results['final_damage'] > 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞—Ç–∞–∫–∞ –ø–æ–ø–∞–ª–∞ –∏ –Ω–∞–Ω–µ—Å–ª–∞ —É—Ä–æ–Ω
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å "–û—Ç—Ä–∞–≤–ª—è—é—â–∏–π —É–¥–∞—Ä"
            #    poison_ability = attacker.ability_manager.get_passive_ability('poisonstrike')
            #    if poison_ability and poison_ability.is_available():
            #        poison_ability.apply_effect(attacker, target=target)
        
        return results

    # ==================== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã ====================
    @staticmethod
    def get_mechanics_summary() -> Dict[str, str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫.
        :return: –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Ö–∞–Ω–∏–∫
        """
        return {
            'dodge': '–†–∞—Å—á–µ—Ç —à–∞–Ω—Å–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –∞—Ç–∞–∫–∏',
            'crit': '–†–∞—Å—á–µ—Ç —à–∞–Ω—Å–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞',
            'variance': '–°–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É—Ä–æ–Ω–∞',
            'armor': '–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –±—Ä–æ–Ω–µ–π',
            'all': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ö–∞–Ω–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ'
        }

- Battle/battle_logic.py
import uuid
from typing import List, Dict, Any, Optional

from Battle.battle_logger import battle_logger
from Battle.battle_statistics import get_battle_statistics
from Battle.round_logic import battle_round, display_round_separator
from Battle.rewards import BattleRewards
from Config.game_config import MAX_ROUNDS
from Inventory.inventory import get_inventory

# –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤ –∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from Characters.character import Character


class BattleSimulator:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–µ–π –±–æ—è."""

    # ==================== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—è ====================
    @staticmethod
    def simulate_battle(players: List['Character'], enemies: List['Character']) -> str:
        """
        –°–∏–º—É–ª–∏—Ä—É–µ—Ç –±–æ–π –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –≤—Ä–∞–≥–∞–º–∏.
        
        :param players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        :param enemies: –°–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã ("win", "loss", –∏–ª–∏ "draw")
        """
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –±–æ–µ–º
        BattleSimulator.pre_battle_setup(players, enemies)
        
        # –ù–∞—á–∞–ª–æ –±–æ—è
        battle_logger.log("")
        battle_logger.log("üèÅ –ë–û–ô –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!")
        battle_result = "draw"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–∏—á—å—è
        
        # –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        battle_id = str(uuid.uuid4())
        stats = get_battle_statistics()
        stats.start_battle_tracking(battle_id, players, enemies)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—è
        for round_num in range(1, MAX_ROUNDS + 1):
            display_round_separator(round_num)
            round_result = battle_round(players, enemies, battle_logger)
            
            if round_result in ["win", "loss"]:
                battle_result = round_result
                break  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –±–æ–π
            
            if round_num == MAX_ROUNDS:
                battle_logger.log(f"‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –†–∞—É–Ω–¥ {round_num} —Å—Ç–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º.")

        # –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –±–æ—è
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –±–æ—è
        stats.end_battle(battle_id, True, 1)

        BattleSimulator.post_battle_processing(players, enemies, battle_result)
        
        return battle_result

    # ==================== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—è ====================
    @staticmethod
    def pre_battle_setup(players: List['Character'], enemies: List['Character']) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –±–æ—è.
        
        :param players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        :param enemies: –°–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤
        """
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –±–æ–µ–º
        # –ù–∞–ø—Ä–∏–º–µ—Ä:
        # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        # - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        # - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±–æ—è
        # - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞—Ö
        pass

    @staticmethod
    def post_battle_processing(players: List['Character'], enemies: List['Character'], battle_result: str) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—è.
        
        :param players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        :param enemies: –°–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤
        :param battle_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è ("win", "loss", "draw")
        """
        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–∏ –ø–æ–±–µ–¥–µ
        if battle_result == "win":
            battle_logger.set_message_delay(0)
            battle_logger.log(f"üéñÔ∏è –ü–û–ë–ï–î–ê! –í—Å–µ –≤—Ä–∞–≥–∏ –ø–æ–≤–µ—Ä–∂–µ–Ω—ã!")
            BattleSimulator.award_rewards(players, enemies)
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤—Å–µ–º –≤—ã–∂–∏–≤—à–∏–º –∏–≥—Ä–æ–∫–∞–º
            BattleSimulator.restore_energy_after_battle([p for p in players if p.is_alive()])
            battle_logger.set_message_delay()
        
        # –°–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–æ–≤ –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç–∞—Ç—É—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —É –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        BattleSimulator.reset_all_cooldowns(players + enemies)
        BattleSimulator.reset_all_effects(players + enemies)

    # ==================== –ù–∞–≥—Ä–∞–¥—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ====================
    @staticmethod
    def award_rewards(players: List['Character'], defeated_enemies: List['Character']) -> None:
        """
        –ù–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∏–≥—Ä–æ–∫–∞–º –∑–∞ –ø–æ–±–µ–¥—É –≤ –±–æ—é.
        
        :param players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        :param defeated_enemies: –°–ø–∏—Å–æ–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤
        """
        if not defeated_enemies:
            return
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –º–µ–∂–¥—É –≤—ã–∂–∏–≤—à–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
        alive_players = [p for p in players if p.is_alive()]
        
        if not alive_players:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        reward_results = BattleRewards.distribute_rewards(defeated_enemies, alive_players)
        
        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö
        for message in reward_results['messages']:
            battle_logger.log(message)

        for message in reward_results['level_up_messages']:
            battle_logger.log(message)

    @staticmethod
    def restore_energy_after_battle(players: List['Character']) -> None:
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 30% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –≤—Å–µ–º –≤—ã–∂–∏–≤—à–∏–º –∏–≥—Ä–æ–∫–∞–º –ø–æ—Å–ª–µ –±–æ—è.
        
        :param players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        """
        for player in players:
            if player.is_alive():
                player.restore_energy(percentage=30)
        
        # battle_logger.log(f"üßò –ö–æ–º–∞–Ω–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ—Å–ª–µ –±–æ—è")

    # ==================== –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π ====================
    @staticmethod
    def reset_all_cooldowns(characters: List['Character']) -> None:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∫—É–ª–¥–∞—É–Ω—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —É –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
        
        :param characters: –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        """
        for character in characters:
            if hasattr(character, 'ability_manager') and character.ability_manager is not None:
                character.ability_manager.reset_all_cooldowns()

    @staticmethod
    def reset_all_effects(characters: List['Character']) -> None:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç—ã —É –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
        
        :param characters: –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        """
        for character in characters:
            if hasattr(character, 'status_manager') and character.status_manager is not None:
                character.status_manager.clear_all_effects()


# ==================== –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º API ====================
def simulate_battle(players: List['Character'], enemies: List['Character']) -> str:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º API."""
    return BattleSimulator.simulate_battle(players, enemies)

def pre_battle_setup(players: List['Character'], enemies: List['Character']) -> None:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º API."""
    BattleSimulator.pre_battle_setup(players, enemies)

def post_battle_processing(players: List['Character'], enemies: List['Character'], battle_result: str) -> None:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º API."""
    BattleSimulator.post_battle_processing(players, enemies, battle_result)

def award_rewards(players: List['Character'], defeated_enemies: List['Character']) -> None:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º API."""
    BattleSimulator.award_rewards(players, defeated_enemies)

def restore_energy_after_battle(players: List['Character']) -> None:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º API."""
    BattleSimulator.restore_energy_after_battle(players)

def reset_all_cooldowns(characters: List['Character']) -> None:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º API."""
    BattleSimulator.reset_all_cooldowns(characters)

def reset_all_effects(characters: List['Character']) -> None:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º API."""
    BattleSimulator.reset_all_effects(characters)

- Battle/battle_statistics.py
# battle/battle_statistics.py

from typing import Any, List, Dict, Optional, DefaultDict
from dataclasses import dataclass, field
from collections import defaultdict

from Characters.Abilities.ability import AbilityResult

@dataclass
class CharacterBattleStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∏—Ç–≤–µ"""
    name: str
    total_damage_dealt: int = 0
    total_damage_taken: int = 0
    total_healing_done: int = 0
    total_healing_received: int = 0
    abilities_damage: Dict[str, int] = field(default_factory=lambda: defaultdict(int))  # —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å -> —É—Ä–æ–Ω
    abilities_healing: Dict[str, int] = field(default_factory=lambda: defaultdict(int))  # —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å -> –ª–µ—á–µ–Ω–∏–µ
    critical_hits: int = 0
    dodges: int = 0
    abilities_used: Dict[str, int] = field(default_factory=lambda: defaultdict(int))  # —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    survived: bool = True

@dataclass
class CombatActionRecord:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –æ –±–æ–µ–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏"""
    round_number: int
    attacker_name: str
    target_name: str
    ability_name: str
    damage_dealt: int
    damage_blocked: int
    is_critical: bool
    is_dodge: bool
    heal_amount: int
    attacker_hp_before: int
    attacker_hp_after: int
    target_hp_before: int
    target_hp_after: int
    energy_cost: int
    additional_effects: List[str]
    battle_id: str
    
    @classmethod
    def from_ability_result(cls, ability_result: AbilityResult, **kwargs) -> 'CombatActionRecord':
        """
        –°–æ–∑–¥–∞–µ—Ç CombatActionRecord –∏–∑ AbilityResult
        –í—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ kwargs
        
        :param ability_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (round_number, attacker_name, target_name, –∏ —Ç.–¥.)
        :return: CombatActionRecord
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ details –µ—Å–ª–∏ –µ—Å—Ç—å
        damage_blocked = 0
        is_dodge = False
        additional_effects = []
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ details
        if hasattr(ability_result, 'details'):
            # –î–ª—è –∞—Ç–∞–∫—É—é—â–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
            if 'target_info' in ability_result.details:
                target_info = ability_result.details['target_info']
                damage_blocked = target_info.get('damage_blocked', 0)
                is_dodge = target_info.get('dodge', False)
            
            # –î–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –∞—Ç–∞–∫
            if 'targets_info' in ability_result.details:
                # –ë–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏ –∏–ª–∏ —Å—É–º–º–∏—Ä—É–µ–º
                targets_info = ability_result.details['targets_info']
                if targets_info:
                    first_target_info = next(iter(targets_info.values()))
                    damage_blocked = first_target_info.get('damage_blocked', 0)
                    is_dodge = first_target_info.get('dodge', False)
            
            # –≠—Ñ—Ñ–µ–∫—Ç—ã –∏–∑ details
            if 'effects' in ability_result.details:
                additional_effects = ability_result.details['effects']
        
        return cls(
            round_number=kwargs.get('round_number', 0),
            attacker_name=kwargs.get('attacker_name', getattr(ability_result, 'character', '')),
            target_name=kwargs.get('target_name', ''),
            ability_name=kwargs.get('ability_name', getattr(ability_result, 'ability_type', '')),
            damage_dealt=getattr(ability_result, 'damage_dealt', 0),
            damage_blocked=damage_blocked,
            is_critical=getattr(ability_result, 'is_critical', False),
            is_dodge=is_dodge,
            heal_amount=getattr(ability_result, 'heal_amount', 0),
            attacker_hp_before=kwargs.get('attacker_hp_before', 0),
            attacker_hp_after=kwargs.get('attacker_hp_after', 0),
            target_hp_before=kwargs.get('target_hp_before', 0),
            target_hp_after=kwargs.get('target_hp_after', 0),
            energy_cost=kwargs.get('energy_cost', 0),
            additional_effects=additional_effects,
            battle_id=kwargs.get('battle_id', '')
        )

@dataclass
class BattleInProgress:
    """–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏—Ç–≤—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    battle_id: str
    total_rounds: int = 0
    player_names: List[str] = field(default_factory=list)
    enemy_names: List[str] = field(default_factory=list)
    total_damage_dealt_by_players: int = 0
    total_damage_dealt_to_players: int = 0
    total_healing_done: int = 0
    abilities_used: Dict[str, int] = field(default_factory=lambda: defaultdict(int))
    critical_hits_count: int = 0
    dodges_count: int = 0
    special_effects_triggered: Dict[str, int] = field(default_factory=lambda: defaultdict(int))
    participants: set = field(default_factory=set)  # –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–∏—Ç–≤—ã
    character_stats: Dict[str, CharacterBattleStats] = field(default_factory=dict)  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º

@dataclass
class BattleSummaryRecord:
    """–°—É–º–º–∏—Ä—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–∏—Ç–≤–µ"""
    battle_id: str
    total_rounds: int
    player_names: List[str]
    enemy_names: List[str]
    player_victory: bool
    total_damage_dealt_by_players: int
    total_damage_dealt_to_players: int
    total_healing_done: int
    abilities_used: Dict[str, int]
    critical_hits_count: int
    dodges_count: int
    player_survival_rate: float
    special_effects_triggered: Dict[str, int]
    character_stats: Dict[str, CharacterBattleStats]  # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É

@dataclass
class GameTotalsRecord:
    """–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞ –≤—Å—é –∏–≥—Ä—É"""
    total_battles: int = 0
    total_victories: int = 0
    total_defeats: int = 0
    total_enemies_defeated: int = 0
    total_player_deaths: int = 0
    total_damage_dealt: int = 0
    total_damage_taken: int = 0
    total_healing_done: int = 0
    most_used_ability: str = ""
    most_damage_in_single_battle: int = 0
    longest_battle_rounds: int = 0
    favorite_class: str = ""
    achievements_unlocked: List[str] = field(default_factory=list)
    battles_by_difficulty: Dict[str, int] = field(default_factory=lambda: defaultdict(int))

class BattleStatistics:
    """–°–∏–Ω–≥–ª—Ç–æ–Ω –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ–µ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    _instance: Optional['BattleStatistics'] = None
    
    def __new__(cls) -> 'BattleStatistics':
        if cls._instance is None:
            cls._instance = super(BattleStatistics, cls).__new__(cls)
        return cls._instance
    
    def __init__(self) -> None:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if not hasattr(self, '_initialized'):
            self.detailed_records: List[CombatActionRecord] = []
            self.battle_summaries: List[BattleSummaryRecord] = []
            self.game_totals: GameTotalsRecord = GameTotalsRecord()
            self.current_battles: Dict[str, BattleInProgress] = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∏—Ç–≤—ã
            self._initialized = True
    
    def start_battle_tracking(self, battle_id: str, players: List[Any], 
                            enemies: List[Any]) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∏—Ç–≤—ã"""

        player_names = [player.name for player in players]
        enemy_names = [enemy.name for enemy in enemies]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_stats = {}
        for name in player_names + enemy_names:
            character_stats[name] = CharacterBattleStats(name=name)
            
        self.current_battles[battle_id] = BattleInProgress(
            battle_id=battle_id,
            player_names=player_names,
            enemy_names=enemy_names,
            participants=set(player_names + enemy_names),
            character_stats=character_stats
        )
    
    def add_combat_action(self, record: CombatActionRecord) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –æ –±–æ–µ–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
        self.detailed_records.append(record)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π –±–∏—Ç–≤—ã
        self._update_battle_statistics(record)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
        self._update_game_totals_from_action(record)
    
    def _update_battle_statistics(self, record: CombatActionRecord) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π –±–∏—Ç–≤—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        battle = self.current_battles.get(record.battle_id)
        if not battle:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
        battle.total_rounds = max(battle.total_rounds, record.round_number)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        battle.participants.add(record.attacker_name)
        battle.participants.add(record.target_name)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        attacker_stats = battle.character_stats.get(record.attacker_name)
        target_stats = battle.character_stats.get(record.target_name)
        
        if not attacker_stats:
            attacker_stats = CharacterBattleStats(name=record.attacker_name)
            battle.character_stats[record.attacker_name] = attacker_stats
            
        if not target_stats:
            target_stats = CharacterBattleStats(name=record.target_name)
            battle.character_stats[record.target_name] = target_stats
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ç–∞–∫—É—é—â–µ–≥–æ
        if record.damage_dealt > 0:
            attacker_stats.total_damage_dealt += record.damage_dealt
            attacker_stats.abilities_damage[record.ability_name] += record.damage_dealt
            attacker_stats.abilities_used[record.ability_name] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∏—Ç–≤—ã
            is_player_attacker = record.attacker_name in battle.player_names
            if is_player_attacker:
                battle.total_damage_dealt_by_players += record.damage_dealt
            else:
                battle.total_damage_dealt_to_players += record.damage_dealt
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ—á–µ–Ω–∏–µ
        if record.heal_amount > 0:
            attacker_stats.total_healing_done += record.heal_amount
            attacker_stats.abilities_healing[record.ability_name] += record.heal_amount
            attacker_stats.abilities_used[record.ability_name] += 1
            battle.total_healing_done += record.heal_amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–ª–∏
        if record.damage_dealt > 0:
            target_stats.total_damage_taken += record.damage_dealt
        
        if record.heal_amount > 0:
            target_stats.total_healing_received += record.heal_amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–¥–∞—Ä—ã
        if record.is_critical:
            attacker_stats.critical_hits += 1
            battle.critical_hits_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É–∫–ª–æ–Ω–µ–Ω–∏—è
        if record.is_dodge:
            target_stats.dodges += 1
            battle.dodges_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        for effect in record.additional_effects:
            battle.special_effects_triggered[effect] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∏—Ç–≤—ã
        battle.abilities_used[record.ability_name] += 1
    
    def _update_game_totals_from_action(self, record: CombatActionRecord) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —É—Ä–æ–Ω
        self.game_totals.total_damage_dealt += record.damage_dealt
        self.game_totals.total_healing_done += record.heal_amount
        pass
    
    def end_battle(self, battle_id: str, player_victory: bool, 
                   player_survival_rate: float) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∏—Ç–≤—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ç–æ–≥–∏"""
        battle = self.current_battles.pop(battle_id, None)
        if not battle:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–∂–∏–≤–∞–Ω–∏—è
        self._update_survival_stats(battle, player_victory)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∑–∞–ø–∏—Å—å –±–∏—Ç–≤—ã
        battle_summary = BattleSummaryRecord(
            battle_id=battle.battle_id,
            total_rounds=battle.total_rounds,
            player_names=battle.player_names,
            enemy_names=battle.enemy_names,
            player_victory=player_victory,
            total_damage_dealt_by_players=battle.total_damage_dealt_by_players,
            total_damage_dealt_to_players=battle.total_damage_dealt_to_players,
            total_healing_done=battle.total_healing_done,
            abilities_used=dict(battle.abilities_used),
            critical_hits_count=battle.critical_hits_count,
            dodges_count=battle.dodges_count,
            player_survival_rate=player_survival_rate,
            special_effects_triggered=dict(battle.special_effects_triggered),
            character_stats=battle.character_stats  # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥ –±–∏—Ç–≤—ã
        self.battle_summaries.append(battle_summary)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
        self._update_game_totals_from_battle(battle_summary)
    
    def _update_survival_stats(self, battle: BattleInProgress, player_victory: bool) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–∂–∏–≤—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ—Ö –∫–∞–∫ –≤—ã–∂–∏–≤—à–∏—Ö
        pass
    
    def _update_game_totals_from_battle(self, battle_record: BattleSummaryRecord) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–∏—Ç–≤—ã"""
        self.game_totals.total_battles += 1
        if battle_record.player_victory:
            self.game_totals.total_victories += 1
        else:
            self.game_totals.total_defeats += 1
        
        self.game_totals.total_damage_dealt += battle_record.total_damage_dealt_by_players
        self.game_totals.total_damage_taken += battle_record.total_damage_dealt_to_players
        self.game_totals.total_healing_done += battle_record.total_healing_done
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –≤ –æ–¥–Ω–æ–π –±–∏—Ç–≤–µ
        if battle_record.total_damage_dealt_by_players > self.game_totals.most_damage_in_single_battle:
            self.game_totals.most_damage_in_single_battle = battle_record.total_damage_dealt_by_players
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –≤ –±–∏—Ç–≤–µ
        if battle_record.total_rounds > self.game_totals.longest_battle_rounds:
            self.game_totals.longest_battle_rounds = battle_record.total_rounds
    
    def get_detailed_records(self, battle_id: Optional[str] = None) -> List[CombatActionRecord]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ ID –±–∏—Ç–≤—ã"""
        if battle_id:
            return [record for record in self.detailed_records if record.battle_id == battle_id]
        return self.detailed_records.copy()
    
    def get_battle_summaries(self, player_victory: Optional[bool] = None) -> List[BattleSummaryRecord]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º–∏—Ä—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"""
        if player_victory is not None:
            return [record for record in self.battle_summaries if record.player_victory == player_victory]
        return self.battle_summaries.copy()
    
    def get_current_game_totals(self) -> GameTotalsRecord:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return GameTotalsRecord(**self.game_totals.__dict__)
    
    def get_character_battle_stats(self, battle_id: str, character_name: str) -> Optional[CharacterBattleStats]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ç–≤–µ"""
        battle = next((b for b in self.battle_summaries if b.battle_id == battle_id), None)
        if battle and character_name in battle.character_stats:
            return battle.character_stats[character_name]
        return None
    
    def get_character_overall_stats(self) -> Dict[str, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –∑–∞ –≤—Å–µ –±–∏—Ç–≤—ã"""
        character_stats = defaultdict(lambda: {
            'total_battles': 0,
            'total_damage_dealt': 0,
            'total_damage_taken': 0,
            'total_healing_done': 0,
            'total_healing_received': 0,
            'abilities_damage': defaultdict(int),
            'abilities_healing': defaultdict(int),
            'critical_hits': 0,
            'dodges': 0,
            'battles_won': 0
        })
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ –≤—Å–µ—Ö –±–∏—Ç–≤
        for battle in self.battle_summaries:
            for char_name, char_stats in battle.character_stats.items():
                stats = character_stats[char_name]
                stats['total_battles'] += 1
                stats['total_damage_dealt'] += char_stats.total_damage_dealt
                stats['total_damage_taken'] += char_stats.total_damage_taken
                stats['total_healing_done'] += char_stats.total_healing_done
                stats['total_healing_received'] += char_stats.total_healing_received
                stats['critical_hits'] += char_stats.critical_hits
                stats['dodges'] += char_stats.dodges
                
                if battle.player_victory and char_name in battle.player_names:
                    stats['battles_won'] += 1
                
                # –°—É–º–º–∏—Ä—É–µ–º —É—Ä–æ–Ω –∏ –ª–µ—á–µ–Ω–∏–µ –ø–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º
                for ability, damage in char_stats.abilities_damage.items():
                    stats['abilities_damage'][ability] += damage
                for ability, healing in char_stats.abilities_healing.items():
                    stats['abilities_healing'][ability] += healing
        
        return dict(character_stats)
    
    @classmethod
    def get_instance(cls) -> 'BattleStatistics':
        """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä singleton"""
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance

# –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_battle_statistics() -> BattleStatistics:
    """–ü–æ–ª—É—á–∏—Ç—å singleton —ç–∫–∑–µ–º–ø–ª—è—Ä BattleStatistics"""
    return BattleStatistics.get_instance()

- Battle/rewards.py
# rewards.py - –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –≤ –∏–≥—Ä–µ

from typing import List, Dict, Any
import random
from Config.game_config import EXP_BASE, GOLD_BASE, EXP_VARIANCE, GOLD_VARIANCE
from Inventory.inventory import get_inventory
from Battle.battle_logger import battle_logger
from Items.item_generator import ItemGenerator


class Reward:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–∞–≥—Ä–∞–¥."""
    
    def __init__(self, amount: int):
        self.amount = amount
        self.type = "base"
        self.icon = "üéÅ"
    
    def apply_reward(self, character=None):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É."""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ apply_reward –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")


class GoldReward(Reward):
    """–ù–∞–≥—Ä–∞–¥–∞ –≤ –≤–∏–¥–µ –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç."""
    
    def __init__(self, amount: int):
        super().__init__(amount)
        self.type = "gold"
        self.icon = "üí∞"
    
    def apply_reward(self, character=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–æ–ª–æ—Ç–æ –≤ –æ–±—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."""
        inventory = get_inventory()
        inventory.add_gold(self.amount)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        template = "%1 –ü–æ–ª—É—á–µ–Ω–æ %2 –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç!"
        elements = [(self.icon, 0), (str(self.amount), 6)]  # –≥–æ–ª—É–±–æ–π —Ü–≤–µ—Ç –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        
        self.message = battle_logger.create_log_message(template, elements)
        return self


class ExperienceReward(Reward):
    """–ù–∞–≥—Ä–∞–¥–∞ –≤ –≤–∏–¥–µ –æ–ø—ã—Ç–∞."""
    
    def __init__(self, amount: int):
        super().__init__(amount)
        self.type = "exp"
        self.icon = "‚≠ê"
        self.exp_distribution: dict = {}  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
        self.level_up_messages: list = []  # –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
    
    def _distribute_exp_evenly(self, characters: List, total_exp: int) -> Dict[str, int]:
        """
        –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—ã—Ç –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏.
        
        :param characters: –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        :param total_exp: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞
        :return: –°–ª–æ–≤–∞—Ä—å {–∏–º—è_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ–ø—ã—Ç–∞}
        """
        if not characters:
            return {}
        
        num_characters = len(characters)
        base_exp = total_exp // num_characters
        remaining_exp = total_exp % num_characters
        
        distribution = {}
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç
        for character in characters:
            distribution[character.name] = base_exp
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        characters_list = list(characters)
        for i in range(remaining_exp):
            # –î–æ–±–∞–≤–ª—è–µ–º 1 –æ—á–∫–æ –æ–ø—ã—Ç–∞ —Å–ª—É—á–∞–π–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
            random_character = random.choice(characters_list)
            distribution[random_character.name] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ (¬±5-10%)
        for character in characters:
            current_exp = distribution[character.name]
            # –í–∞—Ä–∏–∞—Ü–∏—è –æ—Ç -10% –¥–æ +10%
            variation = int(current_exp * random.uniform(-0.1, 0.1))
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–ø—ã—Ç –Ω–µ —Å—Ç–∞–Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
            variation = max(variation, -current_exp + 1) if current_exp > 1 else 0
            distribution[character.name] += variation
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ–±—â—É—é —Å—É–º–º—É, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–∑-–∑–∞ –≤–∞—Ä–∏–∞—Ü–∏–π
        actual_total = sum(distribution.values())
        diff = total_exp - actual_total
        
        if diff != 0:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
            adjustment_characters = list(characters)
            random.shuffle(adjustment_characters)
            
            for i in range(abs(diff)):
                if i < len(adjustment_characters):
                    char_name = adjustment_characters[i].name
                    if diff > 0:
                        distribution[char_name] += 1
                    else:
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–ø—ã—Ç –Ω–µ —Å—Ç–∞–Ω–µ—Ç <= 0
                        if distribution[char_name] > 1:
                            distribution[char_name] -= 1
        
        return distribution
    
    def apply_reward(self, characters: List = []):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–ø—ã—Ç –∫–æ –≤—Å–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        
        :param characters: –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞
        """
        if not characters:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            template = "%1 –ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞!"
            elements = [(self.icon, 0)]
            self.message = battle_logger.create_log_message(template, elements)
            return self
        
        # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—ã—Ç —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        self.exp_distribution = self._distribute_exp_evenly(characters, self.amount)
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.level_up_messages = []
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—ã—Ç –∫–∞–∂–¥–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
        for character in characters:
            if character.name in self.exp_distribution:
                actual_exp = self.exp_distribution[character.name]
                if actual_exp > 0 and hasattr(character, 'add_exp'):
                    level_up_msgs = character.add_exp(actual_exp)
                    self.level_up_messages.extend(level_up_msgs)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if self.exp_distribution:
            # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            elements = [(self.icon, 0), (" –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: ", 0), (str(self.amount), 3), (" (", 0)]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ (–∑–µ–ª–µ–Ω—ã–µ) –∏ –æ–ø—ã—Ç (–∂–µ–ª—Ç—ã–π) –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            items_list = list(self.exp_distribution.items())
            for i, (name, exp) in enumerate(items_list):
                elements.extend([(name, 2), (": ", 0), (str(exp), 3)])
                if i < len(items_list) - 1:
                    elements.append((", ", 0))
            
            elements.append((")", 0))
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            template = "".join([f"%{i+1}" for i in range(len(elements))])
            self.message = battle_logger.create_log_message(template, elements)
        else:
            template = "%1 –û–ø—ã—Ç –Ω–µ –±—ã–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω!"
            elements = [(self.icon, 0)]
            self.message = battle_logger.create_log_message(template, elements)
        
        return self


class LootReward(Reward):
    """–ù–∞–≥—Ä–∞–¥–∞ –≤ –≤–∏–¥–µ –ª—É—Ç–∞ (–ø—Ä–µ–¥–º–µ—Ç–æ–≤)."""
    
    def __init__(self, items: List = []):
        super().__init__(len(items) if items else 0)
        self.type = "loot"
        self.icon = "üß≥"
        self.items = items if items else []
        self.messages: list[tuple[str, int]] = []
    
    def apply_reward(self, character=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."""
        inventory = get_inventory()
        
        if not self.items:
            template = "%1 –õ—É—Ç –ø—É—Å—Ç!"
            elements = [(self.icon, 0)]
            self.message = battle_logger.create_log_message(template, elements)
            return self
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        for item in self.items:
            inventory.add_item(item, 1)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—É—Ç–∞
        if len(self.items) == 1:
            item_name = self.items[0].name
            template = "%1 –ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: %2!"
            elements = [(self.icon, 0), (item_name, 2)]  # –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–º–µ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
        else:
            template = "%1 –ü–æ–ª—É—á–µ–Ω–æ %2 –ø—Ä–µ–¥–º–µ—Ç–æ–≤!"
            elements = [(self.icon, 0), (str(len(self.items)), 3)]  # –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        
        self.message = battle_logger.create_log_message(template, elements)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        self.messages = []
        for item in self.items:
            detail_template = "  ‚ó¶ %1 (%2, –£—Ä.%3)"
            detail_elements = [
                (item.name, 2),  # –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–º–µ–Ω–∏
                (item.get_rarity_name(), item.get_rarity_color()),  # —Ü–≤–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
                (str(item.level), 3)  # –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è
            ]
            detail_message = battle_logger.create_log_message(detail_template, detail_elements)
            self.messages.append(detail_message)
        
        return self


class BattleRewards:
    """–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–±–µ–¥—É –≤ –±–∏—Ç–≤–µ."""
    
    @classmethod
    def calculate_for_enemy(cls, enemy) -> Dict[str, int]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –æ–¥–Ω–æ–≥–æ –≤—Ä–∞–≥–∞."""
        level = getattr(enemy, 'level', 1)
        
        exp = level * EXP_BASE + random.randint(0, level * EXP_VARIANCE)
        gold = level * GOLD_BASE + random.randint(0, level * GOLD_VARIANCE)
        
        return {"exp": exp, "gold": gold}
    
    @classmethod
    def calculate_loot_chance(cls, defeated_enemies: List) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –ª—É—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–∞–≥–æ–≤.
        
        :param defeated_enemies: –°–ø–∏—Å–æ–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤
        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –ª—É—Ç–µ
        """
        if not defeated_enemies:
            return 0
        
        # –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ - 1
        base_items = 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞–≥–∞ (—á–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å)
        total_level = sum(getattr(enemy, 'level', 1) for enemy in defeated_enemies)
        enemy_count = len(defeated_enemies)
        
        # –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        additional_items = 0
        for enemy in defeated_enemies:
            enemy_level = getattr(enemy, 'level', 1)
            # –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –≤—Ä–∞–≥–∞
            if random.random() < (enemy_level * 0.1):  # 10% —à–∞–Ω—Å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
                additional_items += 1
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤
        group_bonus = enemy_count // 3  # 1 –±–æ–Ω—É—Å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∑–∞ –∫–∞–∂–¥—ã—Ö 3 –≤—Ä–∞–≥–æ–≤
        
        total_items = base_items + additional_items + group_bonus
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        max_items = min(5, enemy_count + 2)  # –º–∞–∫—Å–∏–º—É–º 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤+2
        total_items = min(total_items, max_items)
        
        return max(1, total_items)  # –ú–∏–Ω–∏–º—É–º 1 –ø—Ä–µ–¥–º–µ—Ç
    
    @classmethod
    def generate_loot(cls, defeated_enemies: List) -> List:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤.
        
        :param defeated_enemies: –°–ø–∏—Å–æ–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤
        :return: –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        if not defeated_enemies:
            return []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ä–µ–¥–∏ –≤—Ä–∞–≥–æ–≤
        max_level = max(getattr(enemy, 'level', 1) for enemy in defeated_enemies)
        min_level = max(1, max_level - 2)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞ 2 –Ω–∏–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        num_items = cls.calculate_loot_chance(defeated_enemies)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª—É—Ç
        items = []
        for _ in range(num_items):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å —É—Ä–æ–≤–Ω–µ–º –æ—Ç min_level –¥–æ max_level+1
            item_level = random.randint(min_level, max_level + 1)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç (—Å –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–¥–∫–∏–π)
            rarity_weights = [0.6, 0.25, 0.1, 0.04, 0.01]  # –ë–æ–ª—å—à–µ —à–∞–Ω—Å –Ω–∞ –æ–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            item = ItemGenerator.generate_random_item(
                min_level=item_level,
                max_level=item_level + 1,
                rarity_weights=rarity_weights
            )
            items.append(item)
        
        return items
    
    @classmethod
    def generate_rewards(cls, defeated_enemies: List) -> List[Reward]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤."""
        total_exp = 0
        total_gold = 0
        
        # –°—É–º–º–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
        for enemy in defeated_enemies:
            rewards = cls.calculate_for_enemy(enemy)
            total_exp += rewards["exp"]
            total_gold += rewards["gold"]
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞–≥—Ä–∞–¥
        rewards_list: List = []
        if total_exp > 0:
            rewards_list.append(ExperienceReward(total_exp))
        if total_gold > 0:
            rewards_list.append(GoldReward(total_gold))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª—É—Ç
        loot_items = cls.generate_loot(defeated_enemies)
        if loot_items:
            rewards_list.append(LootReward(loot_items))
        
        return rewards_list
    
    @classmethod
    def distribute_rewards(cls, defeated_enemies: List, player_characters: List) -> Dict[str, Any]:
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏.
        
        :param defeated_enemies: –°–ø–∏—Å–æ–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤
        :param player_characters: –°–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–æ–≤
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞–≥—Ä–∞–¥
        """
        if not defeated_enemies or not player_characters:
            return {
                'exp_reward': None,
                'gold_reward': None,
                'loot_reward': None,
                'messages': [],
                'level_up_messages': []
            }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        rewards = cls.generate_rewards(defeated_enemies)
        
        results = {
            'exp_reward': None,
            'gold_reward': None,
            'loot_reward': None,
            'messages': [],
            'level_up_messages': []
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        for reward in rewards:
            if isinstance(reward, ExperienceReward):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—ã—Ç –∫–æ –≤—Å–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
                result = reward.apply_reward(player_characters)
                results['exp_reward'] = result
                results['messages'].append(result.message)
                results['level_up_messages'].extend(result.level_up_messages)
                
            elif isinstance(reward, GoldReward):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–æ–ª–æ—Ç–æ (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ–±—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å)
                result = reward.apply_reward()
                results['gold_reward'] = result
                results['messages'].append(result.message)
                
            elif isinstance(reward, LootReward):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª—É—Ç (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ–±—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å)
                result = reward.apply_reward()
                results['loot_reward'] = result
                results['messages'].append(result.message)
                results['messages'].extend(result.messages)
        
        return results

- Battle/round_logic.py
import random
from xxlimited import Str
from Battle.battle_logger import battle_logger
from Battle.battle_statistics import CombatActionRecord, get_battle_statistics
from Characters.Status_effects import status_effect
from Characters.behavior import decide_action

def battle_round(players, enemies, battle_logger) -> str:
    """–û–¥–∏–Ω —Ä–∞—É–Ω–¥ –±–æ—è"""
    
    battle_result: str = "draw"
    #—ç—Ñ—Ñ–µ–∫—Ç—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞
    pre_round_processing(players, enemies)

    # --- –•–æ–¥ –∏–≥—Ä–æ–∫–æ–≤ ---
    for player in players:
        if not player.is_alive():
            continue

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        action_result = decide_action(player, players, [e for e in enemies if e.is_alive()])
        log_result(action_result)

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞
        if all(not e.is_alive() for e in enemies):
            return "win" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    # --- –•–æ–¥ –≤—Ä–∞–≥–æ–≤ ---
    for enemy in enemies:
        if not enemy.is_alive():
            continue

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        action_result = decide_action(enemy, enemies, [p for p in players if p.is_alive()])
        log_result(action_result)

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–∞–≥–∞
        if all(not p.is_alive() for p in players):
            battle_logger.log("‚ò†Ô∏è –ü–û–†–ê–ñ–ï–ù–ò–ï! –í—Å—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–≥–∏–±–ª–∞...")
            battle_result = "loss"
            return battle_result # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
    post_round_processing(players, enemies)
    
    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –±–æ–π –±–µ–∑ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    return battle_result # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

def pre_round_processing(players, enemies):
    for player in players:
        results = player.status_manager.update_effects()
        for result in results:
            log_result(result)

    for enemy in enemies:
        results = enemy.status_manager.update_effects()
        for result in results:
            log_result(result)

def post_round_processing(players, enemies):

    for player in players:
        player.ability_manager.update_cooldowns()
    
    for enemy in enemies:
        enemy.ability_manager.update_cooldowns()

def log_result(action_result) -> None:

    if action_result:
        #–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = get_battle_statistics()
        action_record = CombatActionRecord.from_ability_result(action_result)
        stats.add_combat_action(action_record) 

        for message in action_result.messages:
            battle_logger.log(message)
    else:
        battle_logger.log_enemy_action("—á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")

def display_round_separator(round_num):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–æ–≤"""
    battle_logger.log("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—É–Ω–¥–æ–º
    #separator = f"‚ó¶‚Ä¢‚óè‚óâ‚úø‚óâ‚óè‚Ä¢‚ó¶‚Ä¢‚óè‚óâ‚úø‚óâ‚óè‚Ä¢‚ó¶‚Ä¢‚óè‚óâ‚úø‚óâ‚óè‚Ä¢(—Ä–∞—É–Ω–¥: {round_num})‚Ä¢‚óè‚óâ‚úø‚óâ‚óè‚Ä¢‚ó¶‚Ä¢‚óè‚óâ‚úø‚óâ‚óè‚Ä¢‚ó¶‚Ä¢‚óè‚óâ‚úø‚óâ‚óè‚Ä¢‚ó¶"
    separator = [
    ("‚ó¶", 1), ("‚Ä¢", 2), ("‚óè", 3), ("‚óâ", 4), ("‚úø", 5), ("‚óâ", 4), ("‚óè", 3), ("‚Ä¢", 2), ("‚ó¶", 1),
    ("‚Ä¢", 6), ("‚óè", 1), ("‚óâ", 2), ("‚úø", 3), ("‚óâ", 4), ("‚óè", 5), ("‚Ä¢", 6), ("‚ó¶", 1),
    ("‚Ä¢", 2), ("‚óè", 3), ("‚óâ", 4), ("‚úø", 5), ("‚óâ", 4), ("‚óè", 3), ("‚Ä¢", 2), ("‚ó¶", 1),
    (f"(—Ä–∞—É–Ω–¥: {round_num})", 8),  # –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    ("‚Ä¢", 6), ("‚óè", 1), ("‚óâ", 2), ("‚úø", 3), ("‚óâ", 4), ("‚óè", 5), ("‚Ä¢", 6), ("‚ó¶", 1),
    ("‚Ä¢", 2), ("‚óè", 3), ("‚óâ", 4), ("‚úø", 5), ("‚óâ", 4), ("‚óè", 3), ("‚Ä¢", 2), ("‚ó¶", 1),
    ("‚Ä¢", 6), ("‚óè", 1), ("‚óâ", 2), ("‚úø", 3), ("‚óâ", 4), ("‚óè", 5), ("‚Ä¢", 6), ("‚ó¶", 1)
    ]
    
    battle_logger.log(separator)

- Utils/progress_bar.py
# progress_bar.py - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤

import curses
from Config.game_config import PROGRESS_BORDER_CHARS, PROGRESS_BAR_CHARS, HP_BAR_WIDTH, BASE_ENERGY_COST
from Config.curses_config import *

def draw_progress_bar(stdscr, y, x, current_value, max_value, bar_width, 
                     bar_color=None, show_percent=False, show_values=False,
                     border_chars=PROGRESS_BORDER_CHARS, bar_chars=PROGRESS_BAR_CHARS):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞.
    
    :param stdscr: –û–∫–Ω–æ curses –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    :param y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
    :param x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
    :param current_value: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    :param max_value: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    :param bar_width: –®–∏—Ä–∏–Ω–∞ –±–∞—Ä–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
    :param bar_color: –¶–≤–µ—Ç –±–∞—Ä–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    :param show_percent: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    :param show_values: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è (current/max)
    :param border_chars: –°–∏–º–≤–æ–ª—ã –¥–ª—è –≥—Ä–∞–Ω–∏—Ü (–ª–µ–≤–∞—è/–ø—Ä–∞–≤–∞—è)
    :param bar_chars: –°–∏–º–≤–æ–ª—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ/–ø—É—Å—Ç–æ–≥–æ –±–∞—Ä–∞
    """
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π
    if max_value <= 0:
        ratio = 0
    else:
        ratio = max(0, min(1, current_value / max_value))
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
    filled_width = int(ratio * bar_width)
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–≤–∞–¥—Ä–∞—Ç–∏–∫, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ > 0
    if current_value > 0 and filled_width == 0 and bar_width > 0:
        filled_width = 1
    
    filled_width = max(0, min(filled_width, bar_width))
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –±–∞—Ä–∞
    filled_char = bar_chars[0]
    empty_char = bar_chars[1]
    
    bar = filled_char * filled_width + empty_char * (bar_width - filled_width)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –±–∞—Ä–∞
    if bar_color is None:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
        if current_value <= 0:
            bar_color = curses.color_pair(COLOR_RED)  # –ö—Ä–∞—Å–Ω—ã–π
        elif ratio > 0.75:
            bar_color = curses.color_pair(COLOR_GREEN)  # –ó–µ–ª—ë–Ω—ã–π
        elif ratio > 0.25:
            bar_color = curses.color_pair(COLOR_YELLOW)
        else:
            bar_color = curses.color_pair(1)  # –ö—Ä–∞—Å–Ω—ã–π
    elif isinstance(bar_color, int):
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–º–µ—Ä —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞—Ä—ã
        bar_color = curses.color_pair(bar_color)
    
    # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ –±–∞—Ä
    left_border = border_chars[0]
    right_border = border_chars[1]
    
    try:
        # –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        stdscr.addstr(y, x, left_border, curses.color_pair(COLOR_GRAY))
        # –ë–∞—Ä
        stdscr.addstr(y, x + 1, bar, bar_color)
        # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        stdscr.addstr(y, x + 1 + bar_width, right_border, curses.color_pair(COLOR_GRAY))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text_parts = []
        if show_percent:
            percent = int(ratio * 100)
            text_parts.append(f"{percent}%")
        if show_values:
            text_parts.append(f"{current_value}/{max_value}")
        
        if text_parts:
            text = " " + " ".join(text_parts)
            stdscr.addstr(y, x + 1 + bar_width + 1, text, COLOR_GRAY)
            
    except curses.error:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        pass

def draw_energy_bar(stdscr, y, x, current_energy, max_energy, bar_width=None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞—Ä–∞.
    –ï—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏ –º–µ–Ω—å—à–µ 10, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Å—Ç–æ–π –±–∞—Ä.
    
    :param stdscr: –û–∫–Ω–æ curses –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    :param y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
    :param x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
    :param current_energy: –¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è
    :param max_energy: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
    :param bar_width: –®–∏—Ä–∏–Ω–∞ –±–∞—Ä–∞ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ Config)
    """
    if bar_width is None:
        bar_width = HP_BAR_WIDTH
    
    # –ï—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏ –º–µ–Ω—å—à–µ 10, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –±–∞—Ä
    if current_energy < BASE_ENERGY_COST:
        current_energy = 0
    
    energy_color = curses.color_pair(4)

    draw_progress_bar(
        stdscr=stdscr,
        y=y,
        x=x,
        current_value=current_energy,
        max_value=max_energy,
        bar_width=bar_width,
        bar_color=energy_color,
        show_percent=False,
        show_values=False
    )

- Utils/commands.py
# commands.py - –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–∞–Ω–¥

import curses
from Battle.battle_logic import simulate_battle
from Battle.battle_logger import battle_logger
from Config.curses_config import BATTLE_DELAY
from Characters.char_utils import create_enemies
from Utils.UI.Statistics.statistics_window import GlobalStatsWindow
from Utils.UI.inventory_window import InventoryWindow

from Utils.UI.abilities_window import AbilitiesScreenWindow

class CommandHandler:
    def __init__(self, players, enemies, stdscr=None):
        self.players = players
        self.enemies = enemies
        self.stdscr = stdscr
        self.commands = {
            'go': self.start_battle,
            'start': self.start_battle,
            'fight': self.start_battle,
            'help': self.show_help,
            'h': self.show_help,
            'clear': self.clear_log,
            'cls': self.clear_log,
            'exit': self.exit_game,
            'quit': self.exit_game,
            'q': self.exit_game,
            'inventory': self.open_inventory,
            'inv': self.open_inventory,
            'i': self.open_inventory,
            'skills': self.open_skills,
            'abilities': self.open_skills,
            'abil': self.open_skills,
            'stat': self.open_statistics  # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        }
    
    def process_input(self, key):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏"""
        try:
            if key == ord('q') or key == ord('Q'):
                return self.exit_game()
            elif key == 10 or key == 13:  # Enter
                return self.start_battle()
            elif key == ord('i') or key == ord('I'):
                self.open_inventory()
                return False
            elif key == ord('s') or key == ord('S'):
                self.open_skills()
                return False
            elif key == curses.KEY_F12:
                self.open_statistics()
                return False
            elif key == ord('h') or key == ord('H'):
                self.show_help()
                return False
            elif key == ord('c') or key == ord('C'):
                self.clear_log()
                return False
            elif key == 27:  # ESC
                return True  # –í—ã—Ö–æ–¥
            elif key == 3:   # Ctrl+C
                return True  # –í—ã—Ö–æ–¥
        except Exception:
            pass
        return False  # –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    
    def execute_command(self, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
        cmd = command.strip().lower()
        
        if cmd in self.commands:
            return self.commands[cmd]()
        else:
            battle_logger.log_system_message(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            battle_logger.log_system_message("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
            return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def start_battle(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –±–æ–π"""
        try:
            self.enemies = create_enemies(self.players)
            result = simulate_battle(self.players, self.enemies)
            return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
            
        except Exception as e:
            battle_logger.log_system_message(f"üí• –û—à–∏–±–∫–∞ –≤ –±–æ—é: {str(e)}")
            return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å"""
        battle_logger.set_message_delay(0)
        battle_logger.log_system_message("üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É):")
        battle_logger.log_system_message("  Enter - –Ω–∞—á–∞—Ç—å –±–æ–π")
        battle_logger.log_system_message("  I - –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
        battle_logger.log_system_message("  S - –æ—Ç–∫—Ä—ã—Ç—å —É–º–µ–Ω–∏—è")
        battle_logger.log_system_message("  H - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å")
        battle_logger.log_system_message("  C - –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥")
        battle_logger.log_system_message("  T - —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ")
        battle_logger.log_system_message("  Q - –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")
        battle_logger.set_message_delay(BATTLE_DELAY)
        return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        battle_logger.clear()
        battle_logger.log_system_message("üóëÔ∏è  –õ–æ–≥ –æ—á–∏—â–µ–Ω")
        return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def exit_game(self):
        """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –∏–≥—Ä—ã"""
        battle_logger.log_system_message("üëã –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")
        return True  # –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
    
    def open_inventory(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."""
        if self.stdscr: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Ä–∞–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                window = InventoryWindow(self.stdscr, self.players)
                window.run() # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∫–Ω–∞
                # –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ main.py
            except Exception as e:
                battle_logger.log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {str(e)}")
        else:
            battle_logger.log_system_message("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ")
        return False # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ main loop)
    
    def open_skills(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —É–º–µ–Ω–∏–π."""
        if self.stdscr: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Ä–∞–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–æ —É–º–µ–Ω–∏–π
                window = AbilitiesScreenWindow(self.stdscr, self.players)
                window.run() # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∫–Ω–∞
                # –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ main.py
            except Exception as e:
                battle_logger.log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —É–º–µ–Ω–∏–π: {str(e)}")
        else:
            battle_logger.log_system_message("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —É–º–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ")
        return False # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ main loop)
    
    def open_statistics(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ"""
        if self.stdscr:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Ä–∞–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                window = GlobalStatsWindow(self.stdscr)
                window.run()
            except Exception as e:
                battle_logger.log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        else:
            battle_logger.log_system_message("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ")
        return False  # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–≥—Ä—ã
    
    def get_input(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞ (–ø—É—Å—Ç–∞—è –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)"""
        return ""
    
    def get_available_commands(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        return list(self.commands.keys())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main)
command_handler = None

- Utils/display.py
# display.py - –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞

import curses
from Battle.battle_logger import battle_logger
from Config.curses_config import (
    get_color_pair,
    COLOR_CYAN,
    COLOR_GRAY,
    COLOR_WHITE,
    COLOR_MAGENTA,
    COLOR_GREEN,
    COLOR_YELLOW
)
from Inventory.inventory import get_inventory
from Utils.UI.draw_character import DrawCharacter
from Utils.UI.key_hints import INVENTORY_HINTS, MAIN_HINTS


def create_screen_observer(stdscr, command_handler):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞"""
    def screen_observer(message):
        update_display(stdscr, command_handler)
        stdscr.refresh()
    return screen_observer


def update_display(stdscr, command_handler):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞"""
    try:
        height, width = stdscr.getmaxyx()

        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        stdscr.clear()
        stdscr.bkgd(' ', get_color_pair(COLOR_WHITE))

        # === –í–ï–†–•–ù–Ø–Ø –û–ë–õ–ê–°–¢–¨ ===
        stdscr.addstr(0, width // 2 - 10, "YET ANOTHER AUTOBATTLER", get_color_pair(COLOR_CYAN) | curses.A_BOLD)
        inventory = get_inventory()
        stdscr.addstr(1, 2, f"–ó–æ–ª–æ—Ç–æ: {inventory.get_gold()}", get_color_pair(COLOR_GRAY))
        stdscr.addstr(2, 0, "‚îÄ" * (width - 1), get_color_pair(COLOR_GRAY) | curses.A_DIM)

        # === –û–ë–õ–ê–°–¢–¨ –ü–ï–†–°–û–ù–ê–ñ–ï–ô ===
        display_characters(stdscr, command_handler.players, command_handler.enemies, width)

        # === –û–ë–õ–ê–°–¢–¨ –õ–û–ì–ê ===
        log_start_y = 9
        stdscr.addstr(log_start_y, 0, "‚îÄ" * (width - 1), get_color_pair(COLOR_GRAY) | curses.A_DIM)
        stdscr.addstr(log_start_y + 1, 2, "üìú –õ–û–ì –ë–û–Ø:", get_color_pair(COLOR_WHITE) | curses.A_BOLD)
        display_log(stdscr, width, height, log_start_y)

        # === –ü–û–î–°–ö–ê–ó–ö–ò –í –ù–ò–ñ–ù–ï–ô –ß–ê–°–¢–ò ===
        MAIN_HINTS.display_hints(stdscr)

    except curses.error:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ)


def display_characters(stdscr, players, enemies, width):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å –ø–æ–º–æ—â—å—é DrawCharacter"""
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    CHARACTER_START_X = 4
    CHARACTER_START_Y = 4
    CHARACTER_HEADER_Y = 3
    CHARACTER_HEADER_X = 2

    PLAYERS_HEADER_TEXT = "üßç –ì–µ—Ä–æ–∏:"
    ENEMIES_HEADER_TEXT = "üé≤ –°–æ–±—ã—Ç–∏–µ: (—Å—Ö–≤–∞—Ç–∫–∞)" #TODO: –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π
    
    mid_x = width // 2

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    stdscr.addstr(CHARACTER_HEADER_Y, CHARACTER_HEADER_X, PLAYERS_HEADER_TEXT, curses.A_BOLD)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    for i, char in enumerate(players):
        y = CHARACTER_START_Y + i
        x = CHARACTER_START_X
        DrawCharacter.draw_character_row(stdscr, char, y, x, is_player=True)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ä–∞–≥–æ–≤
    stdscr.addstr(CHARACTER_HEADER_Y, mid_x + CHARACTER_HEADER_X, ENEMIES_HEADER_TEXT, curses.A_BOLD)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Ä–∞–≥–æ–≤
    for i, char in enumerate(enemies):
        y = CHARACTER_START_Y + i
        x = mid_x + CHARACTER_START_X
        DrawCharacter.draw_character_row(stdscr, char, y, x, is_player=False)


def display_log(stdscr, width, height, log_start_y):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–æ–≥ –±–æ—è"""
    log_height = height - log_start_y - 10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    log_lines = battle_logger.get_lines()

    if log_lines:
        visible_log_lines = log_lines[-log_height:] if len(log_lines) > log_height else log_lines
        for i, line in enumerate(visible_log_lines):
            if log_start_y + 2 + i >= height - 7:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
                break

            display_line = line[:width - 4]

            try:
                if isinstance(display_line, list):
                    current_x = 2
                    for text, color_pair in display_line:
                        if color_pair == 0:
                            stdscr.addstr(log_start_y + 2 + i, current_x, text)
                        else:
                            stdscr.addstr(log_start_y + 2 + i, current_x, text, get_color_pair(color_pair))
                        current_x += len(text)
                else:
                    stdscr.addstr(log_start_y + 2 + i, 2, display_line, get_color_pair(COLOR_WHITE))
            except curses.error:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞


def display_inventory_screen(stdscr, players):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    inventory = get_inventory()
    
    if not players:
        return

    current_tab = 0

    while True:
        try:
            height, width = stdscr.getmaxyx()
            stdscr.clear()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            stdscr.addstr(0, width // 2 - 8, "üéí –ò–ù–í–ï–ù–¢–ê–†–¨",
                         get_color_pair(COLOR_CYAN) | curses.A_BOLD)
            stdscr.addstr(1, 0, "‚îÄ" * (width - 1), get_color_pair(COLOR_GRAY) | curses.A_DIM)

            # –í–∫–ª–∞–¥–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            tab_x = 2
            for i, player in enumerate(players):
                if i == current_tab:
                    # –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
                    stdscr.attron(get_color_pair(COLOR_CYAN) | curses.A_BOLD)
                    stdscr.addstr(2, tab_x, f" [{player.name}] ")
                    stdscr.attroff(get_color_pair(COLOR_CYAN) | curses.A_BOLD)
                else:
                    # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
                    stdscr.attron(get_color_pair(COLOR_WHITE))
                    stdscr.addstr(2, tab_x, f" {player.name} ")
                    stdscr.attroff(get_color_pair(COLOR_WHITE))
                tab_x += len(player.name) + 4

            stdscr.addstr(3, 0, "‚îÄ" * (width - 1), get_color_pair(COLOR_GRAY) | curses.A_DIM)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            current_player = players[current_tab]
            
            # === –ë–õ–û–ö 1: –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –¢–ï–ö–£–©–ï–ì–û –ì–ï–†–û–Ø ===
            display_hero_stats_in_inventory(stdscr, current_player, 4, 2, width - 4)

            # === –ë–õ–û–ö 2: –ò–ù–í–ï–ù–¢–ê–†–¨ ===
            inventory_start_y = 11

            stdscr.addstr(inventory_start_y, 2, "üß≥ –ò–ù–í–ï–ù–¢–ê–†–¨",
                         get_color_pair(COLOR_MAGENTA) | curses.A_BOLD)
            stdscr.addstr(inventory_start_y + 1, 0, "‚îÄ" * (width - 1),
                         get_color_pair(COLOR_GRAY) | curses.A_DIM)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            item_objects = inventory.get_all_items() if hasattr(inventory, 'get_all_items') else {}
            item_y = inventory_start_y + 3
            item_index = 0

            for item_object, quantity in item_objects.items():
                if item_y + item_index >= height - 3:
                    break

                try:
                    template, elements = item_object.get_detailed_display_template()
                    quantity_text = f" —Ö{quantity}" if quantity > 1 else ""

                    current_x = 4
                    stdscr.addstr(item_y + item_index, current_x, "‚ó¶ ", get_color_pair(COLOR_WHITE))
                    current_x += 2

                    for text, color in elements:
                        if current_x < width - 4:
                            stdscr.addstr(item_y + item_index, current_x, text, get_color_pair(color))
                            current_x += len(text)

                    if quantity_text and current_x < width - 4:
                        stdscr.addstr(item_y + item_index, current_x, quantity_text, get_color_pair(COLOR_GRAY))
                        current_x += len(quantity_text)

                    properties = item_object.get_all_properties()
                    if properties:
                        prop_parts = []
                        for prop_name, prop_value in properties.items():
                            if prop_value > 0:
                                readable_name = prop_name.replace('_bonus', '').replace('_', ' ').title()
                                prop_parts.append(f"{readable_name}: {prop_value}")

                        if prop_parts:
                            prop_text = " [" + ", ".join(prop_parts) + "]"
                            if current_x < width - 4 and len(prop_text) <= width - current_x - 4:
                                stdscr.addstr(item_y + item_index, current_x, prop_text, get_color_pair(COLOR_GRAY))

                    item_index += 1
                except Exception:
                    item_name = getattr(item_object, 'name', str(item_object))
                    stdscr.addstr(item_y + item_index, 4, f"‚ó¶ {item_name}: {quantity}",
                                 get_color_pair(COLOR_WHITE))
                    item_index += 1

            if item_index == 0:
                stdscr.addstr(inventory_start_y + 3, 4, "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç", get_color_pair(COLOR_GRAY))

            # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫–ª–∞–≤–∏—à–∞–º –≤–Ω–∏–∑—É
            INVENTORY_HINTS.display_hints(stdscr)

            stdscr.refresh()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
            key = stdscr.getch()
            if key == ord('q') or key == ord('Q'):
                break
            elif key == curses.KEY_LEFT:
                current_tab = (current_tab - 1) % len(players)
            elif key == curses.KEY_RIGHT:
                current_tab = (current_tab + 1) % len(players)
            elif key == curses.KEY_RESIZE:
                continue
            elif key != -1:
                try:
                    char = chr(key).lower()
                    if char in ['q', 'e']:  # q, exit
                        break
                except:
                    pass
                if key in [10, 13]:  # Enter
                    pass

        except curses.error:
            pass  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ curses –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏


def display_hero_stats_in_inventory(stdscr, player, y, x, max_width):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (–±–µ–∑ –±–∞—Ä–æ–≤, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)"""
    try:
        height, width = stdscr.getmaxyx()

        hp_text = f"HP: {player.hp}/{player.derived_stats.max_hp}"
        energy_text = f"–≠–Ω–µ—Ä–≥–∏—è: {player.energy}/{player.derived_stats.max_energy}"

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å HP –∏ –≠–Ω–µ—Ä–≥–∏–µ–π
        stdscr.addstr(y, x, "üë• –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ì–ï–†–û–Ø", get_color_pair(COLOR_YELLOW) | curses.A_BOLD)
        stdscr.addstr(y, x + 30, f"{hp_text}  {energy_text}", get_color_pair(COLOR_CYAN) | curses.A_BOLD)

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã)
        label_col_x = x          # –ö–æ–ª–æ–Ω–∫–∞ –º–µ—Ç–æ–∫
        value_col_x = x + 18     # –ö–æ–ª–æ–Ω–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 15 –¥–æ 18)
        stat_label_col_x = x + 28 # –ö–æ–ª–æ–Ω–∫–∞ –º–µ—Ç–æ–∫ –¥–æ–ø. —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 25 –¥–æ 28)
        stat_value_col_x = x + 42 # –ö–æ–ª–æ–Ω–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ–ø. —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 35 –¥–æ 42)
        equip_col_x = x + 55     # –ö–æ–ª–æ–Ω–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 50 –¥–æ 55)

        # === –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ===
        # –£—Ä–æ–≤–µ–Ω—å
        stdscr.addstr(y + 1, label_col_x, "–£—Ä–æ–≤–µ–Ω—å:", get_color_pair(COLOR_WHITE))
        level_value = str(getattr(player, 'level', 'N/A'))
        stdscr.addstr(y + 1, value_col_x, level_value, get_color_pair(COLOR_YELLOW))

        # –û–ø—ã—Ç
        stdscr.addstr(y + 2, label_col_x, "–û–ø—ã—Ç:", get_color_pair(COLOR_WHITE))
        if hasattr(player, 'exp'):
            exp_value = str(player.exp)
            if hasattr(player, 'exp_to_next_level'):
                exp_value += f"/{player.exp_to_next_level}"
        else:
            exp_value = 'N/A'
        stdscr.addstr(y + 2, value_col_x, exp_value, get_color_pair(COLOR_YELLOW))

        # –ê—Ç–∞–∫–∞
        stdscr.addstr(y + 3, label_col_x, "–ê—Ç–∞–∫–∞:", get_color_pair(COLOR_WHITE))
        attack_value = str(getattr(player.derived_stats, 'attack', 'N/A'))
        stdscr.addstr(y + 3, value_col_x, attack_value, get_color_pair(COLOR_YELLOW))

        # –ó–∞—â–∏—Ç–∞
        stdscr.addstr(y + 4, label_col_x, "–ó–∞—â–∏—Ç–∞:", get_color_pair(COLOR_WHITE))
        defense_value = str(getattr(player.derived_stats, 'defense', 'N/A'))
        stdscr.addstr(y + 4, value_col_x, defense_value, get_color_pair(COLOR_YELLOW))

        # === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ===
        stats = getattr(player, 'stats', None)
        
        # –°–∏–ª–∞
        stdscr.addstr(y + 1, stat_label_col_x, "–°–∏–ª–∞:", get_color_pair(COLOR_WHITE))
        strength_value = str(getattr(stats, 'strength', 'N/A')) if stats else 'N/A'
        stdscr.addstr(y + 1, stat_value_col_x, strength_value, get_color_pair(COLOR_YELLOW))

        # –õ–æ–≤–∫–æ—Å—Ç—å
        stdscr.addstr(y + 2, stat_label_col_x, "–õ–æ–≤–∫–æ—Å—Ç—å:", get_color_pair(COLOR_WHITE))
        dexterity_value = str(getattr(stats, 'dexterity', 'N/A')) if stats else 'N/A'
        stdscr.addstr(y + 2, stat_value_col_x, dexterity_value, get_color_pair(COLOR_YELLOW))

        # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
        stdscr.addstr(y + 3, stat_label_col_x, "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç:", get_color_pair(COLOR_WHITE))
        intelligence_value = str(getattr(stats, 'intelligence', 'N/A')) if stats else 'N/A'
        stdscr.addstr(y + 3, stat_value_col_x, intelligence_value, get_color_pair(COLOR_YELLOW))

        # –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
        stdscr.addstr(y + 4, stat_label_col_x, "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å:", get_color_pair(COLOR_WHITE))
        constitution_value = str(getattr(stats, 'constitution', 'N/A')) if stats else 'N/A'
        stdscr.addstr(y + 4, stat_value_col_x, constitution_value, get_color_pair(COLOR_YELLOW))

        # === –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ ===
        stdscr.addstr(y + 1, equip_col_x, "–û—Ä—É–∂–∏–µ: ---", get_color_pair(COLOR_GRAY))
        stdscr.addstr(y + 2, equip_col_x, "–ë—Ä–æ–Ω—è: ---", get_color_pair(COLOR_GRAY))
        stdscr.addstr(y + 3, equip_col_x, "–ê–∫—Å–µ—Å—Å—É–∞—Ä: ---", get_color_pair(COLOR_GRAY))
        stdscr.addstr(y + 4, equip_col_x, "–†–∞—Å—Ö–æ–¥–Ω–∏–∫: ---", get_color_pair(COLOR_GRAY))

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if y + 5 < height:
            separator_length = min(max_width - 4, width - x - 1)
            stdscr.addstr(y + 5, x, "‚îÄ" * separator_length, get_color_pair(COLOR_GRAY) | curses.A_DIM)

    except curses.error:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏

- Utils/test_window.py
# Utils/test_window.py - –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏

import curses
from Battle.battle_logger import battle_logger

def show_test_button_window(stdscr):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏.
    –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Å—Ç—Ä–µ–ª–∫–∞–º–∏ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ.
    –û–∫–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ "–ó–∞–∫—Ä—ã—Ç—å" –∏–ª–∏ –∫–ª–∞–≤–∏—à–µ Q.
    """
    if not stdscr:
        battle_logger.log_system_message("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        height, width = 20, 60
        start_y, start_x = 3, 10
        win = curses.newwin(height, width, start_y, start_x)
        
        # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à (–≤–∫–ª—é—á–∞—è —Å—Ç—Ä–µ–ª–∫–∏)
        win.keypad(True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
        curses.start_color()
        curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLUE)   # –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
        curses.init_pair(2, curses.COLOR_BLACK, curses.COLOR_WHITE)  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
        curses.init_pair(3, curses.COLOR_WHITE, curses.COLOR_BLACK)  # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
        
        # –î–∞–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–æ–∫
        tabs = ["–ì–ª–∞–≤–Ω–∞—è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
        current_tab = 0
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
        tab_content = {
            0: [
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ!",
                "",
                "–≠—Ç–æ –≥–ª–∞–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞.",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üê ‚Üí –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫",
                "–ù–∞–∂–º–∏—Ç–µ Q –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–∫—Ä—ã—Ç—å' –¥–ª—è –≤—ã—Ö–æ–¥–∞",
                "",
                "–í–∫–ª–∞–¥–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                "–ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
            ],
            1: [
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "",
                "‚Ä¢ –¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –°–≤–µ—Ç–ª–∞—è",
                "‚Ä¢ –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: –°—Ä–µ–¥–Ω–∏–π", 
                "‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –í–∫–ª—é—á–µ–Ω–æ",
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã",
                "",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.",
                "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å—Ä–∞–∑—É."
            ],
            2: [
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                "",
                "–í–µ—Ä—Å–∏—è: 1.0.0",
                "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
                "–õ–∏—Ü–µ–Ω–∑–∏—è: MIT",
                "",
                "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ curses.",
                "",
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
                "‚Ä¢ –í–∫–ª–∞–¥–∫–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π",
                "‚Ä¢ –¶–≤–µ—Ç–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ",
                "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
            ]
        }
        
        # –§–ª–∞–≥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        should_close = False
        
        while not should_close:
            # –û—á–∏—â–∞–µ–º –æ–∫–Ω–æ
            win.clear()
            
            # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
            win.border()
            win.addstr(1, 2, "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏", curses.A_BOLD)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
            x_pos = 2
            for i, tab_name in enumerate(tabs):
                if i == current_tab:
                    # –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
                    win.attron(curses.color_pair(1))
                    win.addstr(2, x_pos, f" [{tab_name}] ")
                    win.attroff(curses.color_pair(1))
                else:
                    # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
                    win.attron(curses.color_pair(2))
                    win.addstr(2, x_pos, f" [{tab_name}] ")
                    win.attroff(curses.color_pair(2))
                x_pos += len(tab_name) + 4
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
            win.attron(curses.color_pair(3))
            content = tab_content[current_tab]
            for i, line in enumerate(content):
                if 4 + i < height - 3:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
                    win.addstr(4 + i, 2, line)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            win.addstr(height - 2, width - 12, "[ –ó–∞–∫—Ä—ã—Ç—å ]", curses.A_REVERSE)
            win.attroff(curses.color_pair(3))
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            win.addstr(height - 2, 2, "‚Üê ‚Üí : –≤–∫–ª–∞–¥–∫–∏")
            win.addstr(height - 1, 2, "Q : –≤—ã—Ö–æ–¥")
            
            win.refresh()
            
            # –ñ–¥–µ–º –≤–≤–æ–¥
            key = win.getch()
            
            if key == ord('q') or key == ord('Q'):
                should_close = True
            elif key == curses.KEY_LEFT:
                current_tab = (current_tab - 1) % len(tabs)
            elif key == curses.KEY_RIGHT:
                current_tab = (current_tab + 1) % len(tabs)
            elif key == ord(' '):  # –ü—Ä–æ–±–µ–ª –Ω–∞ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                should_close = True
                
    except Exception as e:
        battle_logger.log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫–Ω–µ: {str(e)}")
        return False
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º keypad
        win.keypad(False)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
        stdscr.refresh()
        
    return True

- Utils/types.py
"""–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ —Ç–∏–ø–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞."""

from typing import Protocol, List, Any, Dict, Optional, Union
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from Characters.character import Character

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–æ—Ä—Ç–µ–∂–∞–º–∏/–æ–±—ä–µ–∫—Ç–∞–º–∏
# –ö–∞–∫ –≤–∏–¥–Ω–æ –∏–∑ battle_logger.create_log_message –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ round_logic.log_result
LoggerMessageType = Union[str, Any] 

class IResult(Protocol):
    """
    –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è (—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ç.–¥.).
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
    """
    success: bool
    messages: List[LoggerMessageType]
    details: Dict[str, Any]

    # –•–æ—Ç—è details –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç, –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É
    # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. –û–¥–Ω–∞–∫–æ –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ç—Ä–∏–±—É—Ç–∞.
    # –ï—Å–ª–∏ –±—ã —Ç—Ä–µ–±–æ–≤–∞–ª—Å—è –º–µ—Ç–æ–¥, –æ–Ω –±—ã–ª –±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∑–¥–µ—Å—å.
    # –ù–∞–ø—Ä–∏–º–µ—Ä: def get_detail(self, key: str) -> Any: ...

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –µ—Å–ª–∏ details –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –Ω–∞ —Å—Ç–∞—Ä—Ç–µ, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
# –∏–ª–∏ –æ–ø—É—Å—Ç–∏—Ç—å, –¥–æ–±–∞–≤–∏–≤ –ø–æ–∑–∂–µ. –ù–æ —Å—É–¥—è –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ AbilityResult, –æ–Ω —Ç–∞–º –µ—Å—Ç—å.

class IAbilityResult(IResult, Protocol):
    """
    –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
    –†–∞—Å—à–∏—Ä—è–µ—Ç IResult —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π.
    """
    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    ability_type: str
    character: Optional['Character']
    targets: List['Character']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    damage_dealt: int
    heal_amount: int
    energy_restored: int
    is_critical: bool
    total_damage: int
    total_heal: int
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    reason: str  # –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏
    
    # –ú–µ—Ç–æ–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # def add_target(self, target: 'Character') -> None: ...

class IEffectResult(IResult, Protocol):
    """
    –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞.
    –†–∞—Å—à–∏—Ä—è–µ—Ç IResult —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
    """
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    effect: str
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
    total_damage: int
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —à–∞–Ω—Å –Ω–∞–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–π —ç—Ñ—Ñ–µ–∫—Ç)
    additional_effects: List[Dict[str, Any]]
    
    # –ú–µ—Ç–æ–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # def add_additional_effect(self, effect_data: Dict[str, Any]) -> None: ...

class IApplyEffectResult(IResult, Protocol):
    """
    –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞.
    –†–∞—Å—à–∏—Ä—è–µ—Ç IResult —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
    """
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    effect: str
    message: list[tuple[str, int]]

class IPassiveAbilityResult(IResult, Protocol):
    """
    –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–∞—Å—Å–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
    –†–∞—Å—à–∏—Ä—è–µ—Ç IResult —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π.
    """
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    ability_name: str
    
    # –£—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    trigger_condition: str
    
    # –ú–µ—Ç–æ–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –ø–æ–∑–∂–µ

- Characters/namer.py
# namer.py
import random

class EnemyNamer:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–º–µ–Ω –¥–ª—è –≤—Ä–∞–≥–æ–≤."""
    
    # –ë–∞–∑–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω
    ADJECTIVES = [
        "–ì—Ä—è–∑–Ω—ã–π", "–ì–Ω–∏–ª–æ–π", "–ö—Ä–æ–≤–∞–≤—ã–π", "–Ø—Ä–æ—Å—Ç–Ω—ã–π", "–ú–µ—Ä–∑–∫–∏–π",
        "–ó–ª–æ–≤–æ–Ω–Ω—ã–π", "–°–≤–∏—Ä–µ–ø—ã–π", "–•–∏—â–Ω—ã–π", "–ú—Ä–∞—á–Ω—ã–π", "–ó–ª–æ–±–Ω—ã–π",
        "–ö–æ—Å—Ç—è–Ω–æ–π", "–ü—ã–ª–∞—é—â–∏–π", "–õ–µ–¥—è–Ω–æ–π", "–¢–µ–Ω–µ–≤–æ–π", "–Ø–¥–æ–≤–∏—Ç—ã–π",
        "–ì–æ–ª–æ–¥–Ω—ã–π", "–ë–µ—à–µ–Ω—ã–π", "–ú–æ–≥–∏–ª—å–Ω—ã–π", "–ü—Ä–æ–∫–ª—è—Ç—ã–π", "–î—Ä–µ–≤–Ω–∏–π",
        "–°–∫–æ–ª—å–∑–∫–∏–π", "–ü–∞—Ä–∞–∑–∏—Ç–Ω—ã–π", "–ì–Ω–æ–π–Ω—ã–π", "–ö–æ–ª—é—á–∏–π", "–°—Ç—Ä–∞–Ω–Ω—ã–π",
        "–ò—Å–∫–∞–∂–µ–Ω–Ω—ã–π", "–ü–æ—Ä–æ—á–Ω—ã–π", "–ß—É–º–Ω–æ–π", "–ú–µ—Ä—Ç–≤–µ–Ω–Ω—ã–π", "–°–º–µ—Ä–¥—è—â–∏–π"
    ]
    
    BASE_NAMES = [
        "–ì–æ–±–ª–∏–Ω", "–û—Ä–∫", "–°–∫–µ–ª–µ—Ç", "–í–æ–ª—à–µ–±–Ω–∏–∫", "–¢—Ä–æ–ª–ª—å",
        "–ö–æ–±–æ–ª—å–¥", "–ì—Ä–µ–º–ª–∏–Ω", "–ë–∞–Ω–¥–∏—Ç", "–ì–æ–ª–æ–≤–æ—Ä–µ–∑", "–ú—É—Ç–∞–Ω—Ç",
        "–°–ª–∏–∑–µ–Ω—å", "–ñ—É–∫", "–ü–∞—É–∫", "–ö—Ä—ã—Å–∞", "–í–æ—Ä–æ–Ω",
        "–í–∞—Ä–≤–∞—Ä", "–ù–µ–∫—Ä–æ–º–∞–Ω—Ç", "–®–∞–º–∞–Ω", "–ë–µ—Ä—Å–µ—Ä–∫", "–ê—Å—Å–∞—Å–∏–Ω",
        "–ö—Ä—ã—Å–æ–ª—é–¥", "–ü–æ–ª—É–∫—Ä–æ–≤–∫–∞", "–ò–∑–≥–Ω–∞–Ω–Ω–∏–∫", "–û—Ç—Å—Ç—É–ø–Ω–∏–∫", "–ú–µ—Ä–∑–∞–≤–µ—Ü",
        "–î–µ–º–æ–Ω", "–ë–µ—Å", "–ò–º–ø", "–í–∞–º–ø–∏—Ä", "–ü—Ä–∏–∑—Ä–∞–∫",
        "–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å", "–ì—É–ª—å", "–õ–∏—á", "–ë–∞–Ω—à–∏", "–û–±–æ—Ä–æ—Ç–µ–Ω—å"
    ]
    
    @staticmethod
    def generate_name():
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –≤—Ä–∞–≥–∞ (2-3 —Å–ª–æ–≤–∞).
        """
        # 90% —à–∞–Ω—Å –Ω–∞ 2 —Å–ª–æ–≤–∞, 10% —à–∞–Ω—Å –Ω–∞ 3 —Å–ª–æ–≤–∞
        if random.random() < 0.9:
            # 2 —Å–ª–æ–≤–∞: –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ + –ë–∞–∑–æ–≤–æ–µ –∏–º—è
            adjective = random.choice(EnemyNamer.ADJECTIVES)
            base_name = random.choice(EnemyNamer.BASE_NAMES)
            return f"{adjective} {base_name}"
        else:
            # 3 —Å–ª–æ–≤–∞: –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ + –ë–∞–∑–æ–≤–æ–µ –∏–º—è + –£—Ç–æ—á–Ω–µ–Ω–∏–µ
            adjective = random.choice(EnemyNamer.ADJECTIVES)
            base_name = random.choice(EnemyNamer.BASE_NAMES)
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç—Ä–µ—Ç—å–µ–≥–æ —Å–ª–æ–≤–∞
            third_word_options = [
                "–°—Ç–∞—Ä—à–∏–π", "–ú–ª–∞–¥—à–∏–π", "–í–µ–ª–∏–∫–∏–π", "–ú–æ–≥—É—á–∏–π", "–£–∂–∞—Å–Ω—ã–π",
                "–ë–µ—Å", "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å", "–°—Ç—Ä–∞–∂", "–û—Ö–æ—Ç–Ω–∏–∫", "–ú—Å—Ç–∏—Ç–µ–ª—å",
                "–∏–∑ –¢—å–º—ã", "–∏–∑ –ê–¥–∞", "–ö—Ä–æ–≤–∏", "–°–º–µ—Ä—Ç–∏", "–•–∞–æ—Å–∞"
            ]
            
            third_word = random.choice(third_word_options)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –º–µ—Å—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º "–∏–∑"
            if third_word in ["–¢—å–º—ã", "–ê–¥–∞", "–ö—Ä–æ–≤–∏", "–°–º–µ—Ä—Ç–∏", "–•–∞–æ—Å–∞"]:
                return f"{adjective} {base_name} –∏–∑ {third_word}"
            else:
                return f"{adjective} {base_name} {third_word}"
    
    @staticmethod
    def generate_simple_name():
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–µ –∏–º—è (–æ–±—ã—á–Ω–æ 1-2 —Å–ª–æ–≤–∞)"""
        if random.random() < 0.3:
            # 30% —à–∞–Ω—Å –Ω–∞ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
            return random.choice(EnemyNamer.BASE_NAMES)
        else:
            # 70% —à–∞–Ω—Å –Ω–∞ –¥–≤–∞ —Å–ª–æ–≤–∞
            adjective = random.choice(EnemyNamer.ADJECTIVES)
            base_name = random.choice(EnemyNamer.BASE_NAMES)
            return f"{adjective} {base_name}"

- Characters/base_stats.py
# base_stats.py

class Stats:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    
    # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –∑–∞—â–∏—Ç—ã –ø–æ —Ä–æ–ª—è–º
    DEFENSE_MULTIPLIERS = {
        "tank": 1.0,
        "warrior": 0.66,
        "healer": 0.6,
        "archer": 0.44,
        "rogue": 0.375,
        "mage": 0.285
    }
    
    # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –∞—Ç–∞–∫–∏ –ø–æ —Ä–æ–ª—è–º
    PRIMARY_STAT_MULTIPLIERS = {
        "tank": 0.8,      # –¢–∞–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–∏–ª—É
        "warrior": 1.0,   # –í–æ–∏–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–∏–ª—É
        "rogue": 1.2,     # –†–∞–∑–±–æ–π–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ª–æ–≤–∫–æ—Å—Ç—å
        "archer": 1.1,    # –õ—É—á–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ª–æ–≤–∫–æ—Å—Ç—å
        "mage": 1.3,      # –ú–∞–≥–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
        "healer": 0.6     # –õ–µ–∫–∞—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–Ω–∏–∑–∫–∞—è –∞—Ç–∞–∫–∞)
    }

    def __init__(self, character):
        
        self.strength = 0
        self.dexterity = 0
        self.intelligence = 0
        self.constitution = 0

        rates = character.BASE_STATS

        for stat_name, default_value in rates.items():
            setattr(self, stat_name, default_value)
    
    def get_primary_stat_for_role(self, role):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏."""
        if role in ["tank", "warrior"]:
            return self.strength
        elif role in ["rogue", "archer"]:
            return self.dexterity
        elif role in ["mage", "healer"]:
            return self.intelligence
        else:
            return self.strength
    
    def scale_stats(self, base_stats, level, growth_rates):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è."""
        scaled_stats = {}
        for stat, base_value in base_stats.items():
            growth_rate = growth_rates.get(stat, 0.05)
            scaled_stats[stat] = int(base_value * (1 + (level - 1) * growth_rate))
        return scaled_stats
    
    def update_from_scaled_stats(self, scaled_stats):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
        stat_names = ['dexterity', 'constitution', 'strength', 'intelligence']
        for stat_name in stat_names:
            if stat_name in scaled_stats:
                setattr(self, stat_name, scaled_stats[stat_name])


class DerivedStats:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    
    def __init__(self, stats, role, level):
        self.max_hp = 0
        self.max_energy = 0
        self.attack = 0
        self.defense = 0
        self.calculate_all(stats, level, role)
    
    def calculate_all(self, stats, level, role):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏."""

        dm = stats.DEFENSE_MULTIPLIERS
        psm = stats.PRIMARY_STAT_MULTIPLIERS

        self.max_hp = self.calculate_max_hp(level, stats)
        self.max_energy = self.calculate_max_energy(stats)
        self.attack = self.calculate_attack(role, stats, psm)
        self.defense = self.calculate_defense(role, stats, dm)
    
    def update_level(self, character):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏."""
        self.calculate_all(character.stats, character.level, character.role)

    def calculate_defense(self, role, stats, dm):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–æ–ª–∏."""
        base_defense = int(stats.constitution * 1.0)
        multiplier = dm.get(role, 0.5)
        return int(base_defense * multiplier)
    
    def calculate_attack(self, role, stats, psm):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞—Ç–∞–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–æ–ª–∏."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –∞—Ç–∞–∫–∏ –ø–æ —Ä–æ–ª–∏
        if role in ["rogue", "archer"]:
            primary_stat = stats.dexterity
        else:
            primary_stat = stats.strength  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        multiplier = 1 #psm.get(role, 0.8)
        return int(primary_stat * multiplier)
    
    def calculate_max_hp(self, level, stats):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HP –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è."""
        return int(stats.constitution * 10 + level * 5)
    
    def calculate_max_energy(self, stats):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏."""
        #TODO: –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å. —É –º–∞–≥–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –º–∞–ª–æ —ç–Ω–µ—Ä–≥–∏–∏
        return 50 + int(stats.dexterity * 7 + stats.constitution * 2)

- Characters/behavior.py
import random

# === –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—è –±–æ—è ===

def analyze_battlefield(character, allies, enemies):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –±–æ—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –¥–µ–π—Å—Ç–≤–∏—é.
    
    :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ä–µ—à–µ–Ω–∏–µ
    :param allies: –°–ø–∏—Å–æ–∫ —Å–æ—é–∑–Ω–∏–∫–æ–≤
    :param enemies: –°–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤
    :return: dict —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–∏—Ç—É–∞—Ü–∏–∏
    """
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∏–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    alive_allies = [a for a in allies if a.is_alive()]
    alive_enemies = [e for e in enemies if e.is_alive()]
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ—é–∑–Ω–∏–∫–æ–≤ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–∏–ª–µ—Ä–∞ –ø–æ–∫–∞
    if character.can_heal:
        allies_hp_ratio = []
        allies_need_healing = []
        allies_critical = []
        
        for ally in alive_allies:
            hp_ratio = ally.hp / ally.derived_stats.max_hp
            allies_hp_ratio.append(hp_ratio)
            
            if hp_ratio < 0.9:  # –ù–∏–∂–µ 90% HP
                allies_need_healing.append(ally)
            if hp_ratio < 0.5:  # –ù–∏–∂–µ 50% HP - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                allies_critical.append(ally)
        
        avg_allies_hp = sum(allies_hp_ratio) / len(allies_hp_ratio) if allies_hp_ratio else 1.0
    else:
        avg_allies_hp = 1.0 # –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–∞–≥–æ–≤
    enemies_hp_ratio = []
    weak_enemies = []
    strong_enemies = []
    
    for enemy in alive_enemies:
        hp_ratio = enemy.hp / enemy.derived_stats.max_hp
        enemies_hp_ratio.append(hp_ratio)
        
        if hp_ratio < 0.3:  # –°–ª–∞–±—ã–µ –≤—Ä–∞–≥–∏
            weak_enemies.append(enemy)
        elif hp_ratio > 0.7:  # –°–∏–ª—å–Ω—ã–µ –≤—Ä–∞–≥–∏
            strong_enemies.append(enemy)
    
    avg_enemies_hp = sum(enemies_hp_ratio) / len(enemies_hp_ratio) if enemies_hp_ratio else 1.0
    
    # –ê–Ω–∞–ª–∏–∑ —ç–Ω–µ—Ä–≥–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    energy_ratio = character.energy / character.derived_stats.max_energy if hasattr(character, 'energy') else 1.0
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    action_priority = determine_action_priority(
        character, 
        avg_allies_hp, 
        len(allies_critical) if 'allies_critical' in locals() else 0, 
        len(allies_need_healing) if 'allies_need_healing' in locals() else 0, 
        avg_enemies_hp, 
        len(weak_enemies), 
        energy_ratio
    )
    
    return {
        'alive_allies_count': len(alive_allies),
        'alive_enemies_count': len(alive_enemies),
        'avg_allies_hp': avg_allies_hp,
        'avg_enemies_hp': avg_enemies_hp,
        'allies_need_healing': allies_need_healing if 'allies_need_healing' in locals() else [],
        'allies_critical': allies_critical if 'allies_critical' in locals() else [],
        'weak_enemies': weak_enemies,
        'strong_enemies': strong_enemies,
        'energy_ratio': energy_ratio,
        'action_priority': action_priority
    }

def determine_action_priority(character, avg_allies_hp, critical_allies_count, healing_needed_count, 
                            avg_enemies_hp, weak_enemies_count, energy_ratio):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞.
    """
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: heal, attack, rest
    priorities = []
    
    # –õ–µ—á–µ–Ω–∏–µ - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–Ω–µ–Ω—ã–µ —Å–æ—é–∑–Ω–∏–∫–∏
    heal_priority = 0
    if character.can_heal:
        # –î–ª—è –ª–µ–∫–∞—Ä–µ–π –ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ

        if critical_allies_count > 0:
            heal_priority = 90  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif healing_needed_count > 1:
            heal_priority = 70  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    
    # –ê—Ç–∞–∫–∞ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ä–∞–≥–æ–≤ –∏ —Å–æ—é–∑–Ω–∏–∫–æ–≤
    attack_priority = 0
    if avg_enemies_hp < 0.3 and weak_enemies_count > 0:
        attack_priority = 80  # –î–æ–±–∏–≤–∞–Ω–∏–µ —Å–ª–∞–±—ã—Ö –≤—Ä–∞–≥–æ–≤
    elif avg_allies_hp > 0.7:  # –°–æ—é–∑–Ω–∏–∫–∏ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        attack_priority = 60
    elif not character.can_heal:  # –ù–µ-–ª–µ–∫–∞—Ä–∏ —Å–∫–ª–æ–Ω–Ω—ã –∞—Ç–∞–∫–æ–≤–∞—Ç—å
        attack_priority = 50 + (1 - avg_enemies_hp) * 30
    else:  # –õ–µ–∫–∞—Ä–∏ –∞—Ç–∞–∫—É—é—Ç —Ä–µ–∂–µ
        attack_priority = 30 + (1 - avg_enemies_hp) * 20
    
    # –û—Ç–¥—ã—Ö - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ–≥–¥–∞ –º–∞–ª–æ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    rest_priority = 0
    if energy_ratio < 0.2:
        if avg_allies_hp > 0.5 and critical_allies_count == 0:
            rest_priority = 70  # –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞
        else:
            rest_priority = 40  # –û—Ç–¥—ã—Ö, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    elif energy_ratio < 0.5:
        rest_priority = 20
    
    return {
        'heal': heal_priority,
        'attack': attack_priority,
        'rest': rest_priority
    }

def select_ability_based_on_analysis(character, analysis):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—è –±–æ—è.
    
    :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂
    :param analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—è –±–æ—è
    :return: –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∏–ª–∏ None)
    """

    available_abilities = character.ability_manager.get_available_abilities(character)
    
    if not available_abilities:
        return None
    
    # –ï—Å–ª–∏ –æ—Ç–¥—ã—Ö - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if len(available_abilities) == 1 and _is_rest_ability(available_abilities[0]):
        return available_abilities[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
    priorities = analysis['action_priority']
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º
    heal_abilities = [ability for ability in available_abilities if _is_heal_ability(ability)]
    attack_abilities = [ability for ability in available_abilities if _is_attack_ability(ability)]
    rest_abilities = [ability for ability in available_abilities if _is_rest_ability(ability)]
    
    # –í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    max_priority = max(priorities.values())
    chosen_action = None
    
    for action, priority in priorities.items():
        if priority == max_priority and priority > 0:
            chosen_action = action
            break
    
    # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–≤–Ω—ã –Ω—É–ª—é, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ (–Ω–æ –Ω–µ –æ—Ç–¥—ã—Ö)
    if chosen_action is None:
        non_rest_abilities = [ability for ability in available_abilities if not _is_rest_ability(ability)]
        if non_rest_abilities:
            return random.choice(non_rest_abilities)
        elif rest_abilities:
            return random.choice(rest_abilities)
        else:
            return random.choice(available_abilities)
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if chosen_action == 'heal' and heal_abilities:
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ª–µ—á–µ–±–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        single_heals = [a for a in heal_abilities if a.name.lower() in ['heal', '–ª–µ—á–∏—Ç—å', '–ª–µ—á–µ–Ω–∏–µ']]
        mass_heals = [a for a in heal_abilities if a.name.lower() in ['mass_heal', '–º–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ']]
        
        if analysis['allies_critical'] and single_heals:
            return random.choice(single_heals)
        elif (len(analysis['allies_need_healing']) > 1 and  mass_heals):
            return random.choice(mass_heals)
        else: #TODO: –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç—É—Ç
            return random.choice(single_heals)
    
    elif chosen_action == 'attack' and attack_abilities:

        if analysis['alive_enemies_count'] > 1:
            mass_abilities = [a for a in attack_abilities if a.is_mass]
            if mass_abilities:
                return random.choice(mass_abilities)

        return random.choice(attack_abilities)
    
    elif chosen_action == 'rest' and rest_abilities:
        return random.choice(rest_abilities)
    
    # –§–æ–ª–±—ç–∫ - –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    non_rest_abilities = [ability for ability in available_abilities if not _is_rest_ability(ability)]
    if non_rest_abilities:
        return random.choice(non_rest_abilities)
    elif rest_abilities:
        return random.choice(rest_abilities)
    else:
        return random.choice(available_abilities) if available_abilities else None

def _is_rest_ability(ability):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Ç–¥—ã—Ö–æ–º."""
    return ability.type == 2

def _is_heal_ability(ability):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏–µ–º."""
    return ability.type == 1

def _is_attack_ability(ability):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–æ–π."""
    return ability.type == 0

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è ===

def decide_action(character, allies, enemies):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂.
    :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ä–µ—à–µ–Ω–∏–µ.
    :param allies: –°–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤.
    :param enemies: –°–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤.
    :return: dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ None
    """
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤ –∏ —Å–æ—é–∑–Ω–∏–∫–æ–≤
    alive_enemies = [e for e in enemies if e.is_alive()]
    alive_allies = [a for a in allies if a.is_alive()]
    
    if not alive_enemies and not alive_allies:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ –±–æ—è
    analysis = analyze_battlefield(character, allies, enemies)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    chosen_ability = select_ability_based_on_analysis(character, analysis)
    
    if not chosen_ability:
        return None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å
    target = None
    if _is_heal_ability(chosen_ability):
        # –î–ª—è –ª–µ—á–µ–Ω–∏—è –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–≥–æ —Ä–∞–Ω–µ–Ω–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞
        if chosen_ability.name.lower() in ['mass_heal', '–º–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ', 'mass_heal']:
            # –í—ã–±–∏—Ä–∞–µ–º –∂–∏–≤—ã—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤ —Å –Ω–µ–ø–æ–ª–Ω—ã–º HP
            target = [ally for ally in alive_allies if ally.hp < ally.derived_stats.max_hp] if alive_allies else [character]
        elif analysis['allies_critical']:
            target = min(analysis['allies_critical'], key=lambda x: x.hp/x.derived_stats.max_hp)
        elif analysis['allies_need_healing']:
            target = min(analysis['allies_need_healing'], key=lambda x: x.hp/x.derived_stats.max_hp)
        else:
            target = character  # –ï—Å–ª–∏ –Ω–µ–∫–æ–≥–æ –ª–µ—á–∏—Ç—å, –ª–µ—á–∏–º —Å–µ–±—è
    elif _is_rest_ability(chosen_ability):
        # –î–ª—è –æ—Ç–¥—ã—Ö–∞ —Ü–µ–ª—å - —Å–∞–º –ø–µ—Ä—Å–æ–Ω–∞–∂
        target = character
    else:
        # –î–ª—è –∞—Ç–∞–∫—É—é—â–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤—ã–±–∏—Ä–∞–µ–º –≤—Ä–∞–≥–∞
        if chosen_ability.is_mass:
             target = alive_enemies
        elif analysis['weak_enemies']:
            # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∞—Ç–∞–∫—É–µ–º —Å–ª–∞–±—ã—Ö –≤—Ä–∞–≥–æ–≤
            target = random.choice(analysis['weak_enemies'])
        elif alive_enemies:
            target = random.choice(alive_enemies)
        else:
            target = None
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if isinstance(target, list):
        result = character.ability_manager.use_ability(chosen_ability, character, target)
    else:
        result = character.ability_manager.use_ability(chosen_ability, character, [target] if target else [])
    
    return result

- Characters/char_utils.py
import curses
import random
from Characters.player_classes import Healer, Mage, Rogue, Warrior
import Config.game_config as Config
from Characters.namer import EnemyNamer
from Characters.monster_classes import Goblin, Orc, Skeleton, Wizard, Troll  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –º–æ–Ω—Å—Ç—Ä–æ–≤


# === –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ ===

def create_player_team():
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Character.
    """
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –∫–ª–∞—Å—Å—ã
    return [
        Warrior("–†–æ–ª–∞–Ω–¥", level=2),
        Rogue("–°—Ç–∞–π–ª—Å", level=2),
        Mage("–ú–æ—Ä–≥–∞–Ω", level=2),
        Healer("–î–∞–º–∏–∞–Ω", level=2),
    ]

def get_enemy_count_for_level_group(level_group):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –≥—Ä—É–ø–ø—ã.
    :param level_group: –£—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø—ã (1-5)
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤
    """
    # –§–æ—Ä–º—É–ª–∞: –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
    # –£—Ä–æ–≤–µ–Ω—å 1: 2 –≤—Ä–∞–≥–∞
    # –£—Ä–æ–≤–µ–Ω—å 2: 2-3 –≤—Ä–∞–≥–∞  
    # –£—Ä–æ–≤–µ–Ω—å 3: 3-4 –≤—Ä–∞–≥–∞
    # –£—Ä–æ–≤–µ–Ω—å 4: 3-5 –≤—Ä–∞–≥–æ–≤
    # –£—Ä–æ–≤–µ–Ω—å 5: 4-5 –≤—Ä–∞–≥–æ–≤
    
    if level_group == 1:
        return 2  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    elif level_group == 2:
        return random.randint(2, 3)
    elif level_group == 3:
        return random.randint(3, 4)
    elif level_group == 4:
        return random.randint(3, 5)
    elif level_group == 5:
        return random.randint(4, 5)
    else:
        # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        return random.randint(2, 3)

def create_enemies(players):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –≥—Ä—É–ø–ø—É –≤—Ä–∞–≥–æ–≤ —Å –æ–±—â–∏–º —É—Ä–æ–≤–Ω–µ–º, –±–ª–∏–∑–∫–∏–º –∫ target_level.
    :param target_level: –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø—ã –≤—Ä–∞–≥–æ–≤ (1-5)
    :return: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Character.
    """

    total_player_level = sum(p.level for p in players)
    avg_level = total_player_level // len(players)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º target_level –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1-5
    target_level = max(1, min(5, avg_level))
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ä–∞–≥–æ–≤
    enemy_types = [Goblin, Orc, Skeleton, Wizard, Troll]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –≥—Ä—É–ø–ø—ã
    num_enemies = get_enemy_count_for_level_group(target_level)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø—ã
    total_target_level = target_level * num_enemies
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (-1 –¥–æ +2 –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –¥–ª—è –±–æ–ª–µ–µ –ª–µ–≥–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π, -1 –¥–æ +3 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö)
    variance = random.randint(-1, 2) if target_level <= 3 else random.randint(-1, 3)
    total_target_level += variance
    total_target_level = max(num_enemies, total_target_level)  # –ú–∏–Ω–∏–º—É–º –ø–æ 1 —É—Ä–æ–≤–Ω—é –Ω–∞ –≤—Ä–∞–≥–∞
    
    enemies = []
    used_names = set() # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∏–º–µ–Ω
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –º–µ–∂–¥—É –≤—Ä–∞–≥–∞–º–∏
    remaining_level = total_target_level
    for i in range(num_enemies):
        # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–∞–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —É—Ä–æ–≤–µ–Ω—å
        if i == num_enemies - 1:
            enemy_level = remaining_level
        else:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –º–µ–∂–¥—É –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –≤—Ä–∞–≥–∞–º–∏
            max_level_for_this_enemy = remaining_level - (num_enemies - i - 1)  # –ú–∏–Ω–∏–º—É–º 1 —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
            min_level_for_this_enemy = 1
            if max_level_for_this_enemy >= min_level_for_this_enemy:
                enemy_level = random.randint(min_level_for_this_enemy, max_level_for_this_enemy)
            else:
                enemy_level = min_level_for_this_enemy
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (1-10)
        enemy_level = max(1, min(10, enemy_level))
        remaining_level -= enemy_level
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –≤—Ä–∞–≥–∞
        enemy_class = random.choice(enemy_types)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
        name = EnemyNamer.generate_name()
        attempts = 0
        while name in used_names and attempts < 10: # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏
            name = EnemyNamer.generate_name()
            attempts += 1
        used_names.add(name)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞ —Å —É—Ä–æ–≤–Ω–µ–º
        enemy = enemy_class(name, level=enemy_level)
        enemies.append(enemy)
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Å—Ç–∞–≤—à–∏–π—Å—è —É—Ä–æ–≤–µ–Ω—å –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
        remaining_level = max(0, remaining_level)
    
    return enemies

- Characters/character.py
# character.py

from typing import TYPE_CHECKING, List, Dict, Any, Optional

from Characters.base_stats import DerivedStats, Stats
from Config.game_config import BASE_ENERGY_COST

if TYPE_CHECKING:
    from Characters.Abilities.ability import AbilityManager
    from Characters.Status_effects.status_manager import StatusEffectManager


class Character:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∏–≥—Ä–µ."""

    def __init__(self, name: str, role: str, level: int = 1, is_player: bool = False, can_heal: bool = False):
        self.name = name
        self.role = role
        self.is_player = is_player
        self.level = level
        self.alive = True
        self.can_heal = can_heal
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        self.stats = Stats(self)
        self.derived_stats = DerivedStats(self.stats, self.role, self.level)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º hp –∏ —ç–Ω–µ—Ä–≥–∏—é
        self.hp = self.derived_stats.max_hp
        self.energy = self.derived_stats.max_energy
        
        # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (–ª–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç)
        self._ability_manager = None
        
        # –°—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç—ã (–ª–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç)
        self._status_manager = None

    # ==================== –°–≤–æ–π—Å—Ç–≤–∞ ====================
    @property
    def ability_manager(self) -> 'AbilityManager':
        """–õ–µ–Ω–∏–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"""
        if self._ability_manager is None:
            from Characters.Abilities.ability_manager import AbilityManager
            self._ability_manager = AbilityManager()
        return self._ability_manager

    @property
    def status_manager(self) -> 'StatusEffectManager':
        """–õ–µ–Ω–∏–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        if self._status_manager is None:
            from Characters.Status_effects.status_manager import StatusEffectManager
            self._status_manager = StatusEffectManager(self)
        return self._status_manager

    # ==================== –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ====================
    def is_alive(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂."""
        return self.alive

    def get_level(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return self.level

    def on_death(self) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç—ã
        if self._status_manager is not None:
            self.status_manager.clear_all_effects()
        
        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        print(f"{self.name} –ø–æ–≥–∏–±–∞–µ—Ç!")

    # ==================== –ë–æ–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã ====================
    def take_damage(self, damage: int) -> bool:
        """–ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂—É, —É—á–∏—Ç—ã–≤–∞—è –∑–∞—â–∏—Ç—É."""
        self.hp -= damage
        if self.hp <= 0:
            self.hp = 0
            if self.alive:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å on_death –¥–≤–∞–∂–¥—ã
                self.alive = False
                self.on_death()
        return True

    def take_heal(self, heal_amount: int) -> int:
        """–ò—Å—Ü–µ–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ HP."""
        old_hp = self.hp
        self.hp = min(self.derived_stats.max_hp, self.hp + int(heal_amount))
        return self.hp - old_hp

    # ==================== –≠–Ω–µ—Ä–≥–∏—è ====================
    def restore_energy(self, amount: Optional[int] = None, percentage: Optional[int] = None) -> None:
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        :param amount: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        :param percentage: –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if percentage is not None:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
            restore_amount = int(self.derived_stats.max_energy * (percentage / 100))
            self.energy = min(self.derived_stats.max_energy, self.energy + restore_amount)
        elif amount is not None:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏
            self.energy = min(self.derived_stats.max_energy, self.energy + amount)
        else:
            # –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.energy = self.derived_stats.max_energy

    def spend_energy(self, amount: int = BASE_ENERGY_COST) -> None:
        """–¢—Ä–∞—Ç–∏—Ç —ç–Ω–µ—Ä–≥–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        self.energy -= amount

    # ==================== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ====================
    @staticmethod
    def scale_stats(base_stats: Dict[str, int], level: int, growth_rates: Dict[str, float]) -> Dict[str, int]:
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è."""
        scaled_stats = {}
        for stat, base_value in base_stats.items():
            growth_rate = growth_rates.get(stat, 0.05)
            scaled_stats[stat] = int(base_value * (1 + (level - 1) * growth_rate))
        return scaled_stats

    # ==================== –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ====================
    def add_ability(self, name: str, ability: Any) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂—É."""
        self.ability_manager.add_ability(name, ability)

    def get_available_abilities(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π."""
        return self.ability_manager.get_available_abilities(self)

    def use_ability(self, name: str, targets: List['Character'], **kwargs) -> Any:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∏."""
        return self.ability_manager.use_ability(name, self, targets, **kwargs)

    def update_ability_cooldowns(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É–ª–¥–∞—É–Ω—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ –∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞."""
        self.ability_manager.update_cooldowns()

    # ==================== –°—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç—ã ====================
    def add_status_effect(self, effect: Any) -> Dict[str, str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É."""
        return self.status_manager.add_effect(effect)

    def remove_status_effect(self, effect_name: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç –ø–æ –∏–º–µ–Ω–∏."""
        return self.status_manager.remove_effect(effect_name)

    def update_status_effects(self) -> List[Dict[str, str]]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç—ã."""
        return self.status_manager.update_effects()

    def has_status_effect(self, effect_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç."""
        return self.status_manager.has_effect(effect_name)

    def get_active_status_effects(self) -> List[Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤."""
        return self.status_manager.get_all_effects()

- Characters/monster_classes.py
# monster_classes.py - –ö–ª–∞—Å—Å—ã –º–æ–Ω—Å—Ç—Ä–æ–≤

from typing import Dict, Any
from Characters.character import Character  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å


class Monster(Character):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω—Å—Ç—Ä–æ–≤."""
    
    BASE_STATS: Dict[str, int] = {}
    GROWTH_RATES: Dict[str, float] = {}
    
    def __init__(self, name: str, role: str, level: int = 1) -> None:
        super().__init__(name=name, role=role, level=level, is_player=False, can_heal=False)
        # –ú–æ–Ω—Å—Ç—Ä—ã –Ω–µ –∏–º–µ—é—Ç —Å–∏—Å—Ç–µ–º—ã –æ–ø—ã—Ç–∞, –Ω–æ –∏–º–µ—é—Ç —É—Ä–æ–≤–µ–Ω—å
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç Character


class Goblin(Monster):
    """–ö–ª–∞—Å—Å –ì–æ–±–ª–∏–Ω–∞ - —Å–ª–∞–±—ã–π –≤—Ä–∞–≥."""
    
    BASE_STATS: Dict[str, int] = {
        'constitution': 8,   # –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        'strength': 6,      # –°–∏–ª–∞
        'dexterity': 8,     # –õ–æ–≤–∫–æ—Å—Ç—å
        'intelligence': 4   # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
    }
    
    GROWTH_RATES: Dict[str, float] = {
        'constitution': 0.05,
        'strength': 0.04,
        'dexterity': 0.04,
        'intelligence': 0.03,
        'attack': 0.08,     # +8% –∞—Ç–∞–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'defense': 0.05,    # +5% –∑–∞—â–∏—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'hp': 0.10          # +10% HP –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }
    
    def __init__(self, name: str = "–ì–æ–±–ª–∏–Ω", level: int = 1) -> None:
        super().__init__(
            name=name,
            role="goblin",
            level=level
        )


class Orc(Monster):
    """–ö–ª–∞—Å—Å –û—Ä–∫–∞ - —Å–∏–ª—å–Ω—ã–π –≤—Ä–∞–≥ —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–Ω–æ–º."""
    
    BASE_STATS: Dict[str, int] = {
        'constitution': 14,  # –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        'strength': 16,     # –°–∏–ª–∞
        'dexterity': 6,     # –õ–æ–≤–∫–æ—Å—Ç—å
        'intelligence': 5   # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
    }
    
    GROWTH_RATES: Dict[str, float] = {
        'constitution': 0.09,
        'strength': 0.10,
        'dexterity': 0.03,
        'intelligence': 0.02,
        'attack': 0.10,     # +10% –∞—Ç–∞–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'defense': 0.09,    # +9% –∑–∞—â–∏—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'hp': 0.13          # +13% HP –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }
    
    def __init__(self, name: str = "–û—Ä–∫", level: int = 1) -> None:
        super().__init__(
            name=name,
            role="orc",
            level=level
        )


class Skeleton(Monster):
    """–ö–ª–∞—Å—Å –°–∫–µ–ª–µ—Ç–∞ - —Å—Ä–µ–¥–Ω–∏–π –≤—Ä–∞–≥."""
    
    BASE_STATS: Dict[str, int] = {
        'constitution': 10,  # –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        'strength': 12,     # –°–∏–ª–∞
        'dexterity': 10,    # –õ–æ–≤–∫–æ—Å—Ç—å
        'intelligence': 6   # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
    }
    
    GROWTH_RATES: Dict[str, float] = {
        'constitution': 0.07,
        'strength': 0.08,
        'dexterity': 0.05,
        'intelligence': 0.04,
        'attack': 0.09,     # +9% –∞—Ç–∞–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'defense': 0.07,    # +7% –∑–∞—â–∏—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'hp': 0.11          # +11% HP –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }
    
    def __init__(self, name: str = "–°–∫–µ–ª–µ—Ç", level: int = 1) -> None:
        super().__init__(
            name=name,
            role="skeleton",
            level=level
        )


class Wizard(Monster):
    """–ö–ª–∞—Å—Å –í–æ–ª—à–µ–±–Ω–∏–∫–∞ - –º–∞–≥–∏—á–µ—Å–∫–∏–π –≤—Ä–∞–≥ —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–Ω–æ–º."""
    
    BASE_STATS: Dict[str, int] = {
        'constitution': 9,   # –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        'strength': 8,      # –°–∏–ª–∞
        'dexterity': 12,    # –õ–æ–≤–∫–æ—Å—Ç—å
        'intelligence': 18  # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
    }
    
    GROWTH_RATES: Dict[str, float] = {
        'constitution': 0.06,
        'strength': 0.05,
        'dexterity': 0.07,
        'intelligence': 0.10,
        'attack': 0.12,     # +12% –∞—Ç–∞–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'defense': 0.05,    # +5% –∑–∞—â–∏—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'hp': 0.09          # +9% HP –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }
    
    def __init__(self, name: str = "–í–æ–ª—à–µ–±–Ω–∏–∫", level: int = 1) -> None:
        super().__init__(
            name=name,
            role="wizard",
            level=level
        )


class Troll(Monster):
    """–ö–ª–∞—Å—Å –¢—Ä–æ–ª–ª—è - –æ—á–µ–Ω—å –∫—Ä–µ–ø–∫–∏–π –≤—Ä–∞–≥."""
    
    BASE_STATS: Dict[str, int] = {
        'constitution': 18,  # –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        'strength': 17,     # –°–∏–ª–∞
        'dexterity': 4,     # –õ–æ–≤–∫–æ—Å—Ç—å
        'intelligence': 3   # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
    }
    
    GROWTH_RATES: Dict[str, float] = {
        'constitution': 0.11,
        'strength': 0.09,
        'dexterity': 0.02,
        'intelligence': 0.01,
        'attack': 0.09,     # +9% –∞—Ç–∞–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'defense': 0.11,    # +11% –∑–∞—â–∏—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'hp': 0.15          # +15% HP –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }
    
    def __init__(self, name: str = "–¢—Ä–æ–ª–ª—å", level: int = 1) -> None:
        super().__init__(
            name=name,
            role="troll",
            level=level
        )

- Characters/player_classes.py
# player.py
from typing import Dict, Any, List, Tuple, Optional, Union
from Characters.character import Character
from Characters.Equipment.equipment import EquipmentMixin, EquipmentSlot
from Battle.battle_logger import battle_logger
from Config.game_config import (
    SLOT_TYPE_WEAPON, SLOT_TYPE_ARMOR, SLOT_TYPE_ACCESSORY,
    SLOT_NAME_WEAPON, SLOT_NAME_ARMOR, SLOT_NAME_ACCESSORY
)


class Player(Character, EquipmentMixin):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∏–≥—Ä–æ–∫–æ–º)."""

    BASE_STATS: Dict[str, int] = {}
    GROWTH_RATES: Dict[str, float] = {}
    
    def __init__(self, name: str, role: str, class_icon: str, class_icon_color: Optional[int] = None, 
                 level: int = 1, can_heal: bool = False) -> None:
        super().__init__(name=name, role=role, level=level, is_player=True, can_heal=can_heal)
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        self.class_icon: str = class_icon
        self.class_icon_color: Optional[int] = class_icon_color

        self.equipment_slots: Dict[str, EquipmentSlot] = {
            SLOT_TYPE_WEAPON: EquipmentSlot(SLOT_NAME_WEAPON, SLOT_TYPE_WEAPON),
            SLOT_TYPE_ARMOR: EquipmentSlot(SLOT_NAME_ARMOR, SLOT_TYPE_ARMOR),
            SLOT_TYPE_ACCESSORY: EquipmentSlot(SLOT_NAME_ACCESSORY, SLOT_TYPE_ACCESSORY)
        }
        
        # –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞ –∏ —É—Ä–æ–≤–Ω–µ–π
        self.exp: int = 0
        self.exp_to_next_level: int = 0
        self.calculate_exp_for_next_level()
    
    def calculate_exp_for_next_level(self) -> None:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è."""
        self.exp_to_next_level = int(20 * (self.level ** 1.5))
        
    def add_exp(self, exp_amount: int) -> List[str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è."""
            
        self.exp += exp_amount
        level_up_messages: List = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        while self.exp >= self.exp_to_next_level:
            level_up_message: list[tuple[str, int]] = self.level_up()
            level_up_messages.append(level_up_message)
            
        return level_up_messages
        
    def level_up(self) -> list[tuple[str, int]]:
        """–ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —É–ª—É—á—à–∞–µ—Ç –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏."""
        old_level: int = self.level
        old_dexterity: int = self.stats.dexterity
        old_constitution: int = self.stats.constitution
        old_strength: int = self.stats.strength
        old_intelligence: int = self.stats.intelligence
        
        self.level += 1
        # –û—Ç–±–∏—Ä–∞–µ–º –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        self.exp -= self.exp_to_next_level
        
        if hasattr(self, 'BASE_STATS') and hasattr(self, 'GROWTH_RATES'):
            scaled_stats: Dict[str, int] = Character.scale_stats(self.BASE_STATS, self.level, self.GROWTH_RATES)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç stats
            self.stats.update_from_scaled_stats(scaled_stats)
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã —á–µ—Ä–µ–∑ derived_stats
        self.derived_stats.update_level(self)
        
        # –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP –∏ —ç–Ω–µ—Ä–≥–∏–∏ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        self.hp = self.derived_stats.max_hp
        self.energy = self.derived_stats.max_energy
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        self.calculate_exp_for_next_level()
        
        # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        elements: List[Tuple[str, int]] = [
            (self.name, 2),           # –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–º–µ–Ω–∏
            (" –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å ", 0),
            (str(old_level), 3),      # –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            (" ‚û§ ", 0),
            (str(self.level), 3),     # –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            (". (", 0)
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        stats_changed: List[Tuple[str, int]] = []
        if self.stats.dexterity != old_dexterity:
            stats_changed.append((f"dex:{old_dexterity} ‚û§ {self.stats.dexterity}", 6))
        if self.stats.constitution != old_constitution:
            stats_changed.append((f"con:{old_constitution} ‚û§ {self.stats.constitution}", 6))
        if self.stats.strength != old_strength:
            stats_changed.append((f"str:{old_strength} ‚û§ {self.stats.strength}", 6))
        if self.stats.intelligence != old_intelligence:
            stats_changed.append((f"int:{old_intelligence} ‚û§ {self.stats.intelligence}", 6))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for i, (stat_text, color) in enumerate(stats_changed):
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if ' ‚û§ ' in stat_text:
                parts = stat_text.split(' ‚û§ ')
                if ':' in parts[0]:
                    stat_name, old_val = parts[0].split(':')
                    new_val = parts[1]
                    # stat_name - –±–∏—Ä—é–∑–æ–≤—ã–π, old_val –∏ new_val - –∂–µ–ª—Ç—ã–µ
                    elements.extend([
                        (stat_name + ":", 6),  # –±–∏—Ä—é–∑–æ–≤—ã–π
                        (old_val, 3),          # –∂–µ–ª—Ç—ã–π
                        (" ‚û§ ", 0),
                        (new_val, 3)           # –∂–µ–ª—Ç—ã–π
                    ])
                else:
                    elements.append((stat_text, 6))  # –±–∏—Ä—é–∑–æ–≤—ã–π
            else:
                elements.append((stat_text, 6))  # –±–∏—Ä—é–∑–æ–≤—ã–π
                
            if i < len(stats_changed) - 1:
                elements.append((", ", 0))
        
        elements.append((")", 0))
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        template: str = "".join([f"%{i+1}" for i in range(len(elements))])
        message: list[tuple[str, int]] = battle_logger.create_log_message(template, elements)
        
        return message
        
    def get_exp_progress(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö."""
        if self.exp_to_next_level <= 0:
            return 100
        return int((self.exp / self.exp_to_next_level) * 100)

    def get_level_info(self) -> Dict[str, Union[int, float]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –∏ –æ–ø—ã—Ç–µ."""
        return {
            'level': self.level,
            'current_exp': self.exp,
            'exp_to_next': self.exp_to_next_level,
            'exp_progress': self.get_exp_progress()
        }


class Tank(Player):
    """–ö–ª–∞—Å—Å –¢–∞–Ω–∫–∞ - –≤—ã—Å–æ–∫–∞—è –∑–∞—â–∏—Ç–∞, —É–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–Ω, –Ω–∏–∑–∫–∞—è –ª–æ–≤–∫–æ—Å—Ç—å."""
    
    BASE_STATS: Dict[str, int] = {
        'constitution': 15,  # –í—ã—Å–æ–∫–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        'strength': 14,      # –í—ã—Å–æ–∫–∞—è —Å–∏–ª–∞
        'dexterity': 5,
        'intelligence': 6    # –ù–∏–∑–∫–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
    }
    
    GROWTH_RATES: Dict[str, float] = {
        'constitution': 0.10,  # +10% —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'strength': 0.09,      # +9% —Å–∏–ª—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'attack': 0.08,        # +8% –∞—Ç–∞–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'defense': 0.12,       # +12% –∑–∞—â–∏—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'dexterity': 0.03,     # +3% –ª–æ–≤–∫–æ—Å—Ç–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'intelligence': 0.02   # +2% –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }
    
    class_icon: str = "T"
    class_icon_color: int = 1  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ç–∞–Ω–∫–∞
    
    def __init__(self, name: str, level: int = 1) -> None:
        super().__init__(name=name, role="tank", level=level, 
                        class_icon=self.class_icon, class_icon_color=self.class_icon_color)


class Warrior(Player):
    """–ö–ª–∞—Å—Å –í–æ–∏–Ω–∞ - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏."""
    
    BASE_STATS: Dict[str, int] = {
        'constitution': 12,  # –°—Ä–µ–¥–Ω–µ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        'strength': 16,      # –í—ã—Å–æ–∫–∞—è —Å–∏–ª–∞
        'dexterity': 10,
        'intelligence': 8    # –ù–∏–∑–∫–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
    }
    
    GROWTH_RATES: Dict[str, float] = {
        'constitution': 0.09,  # +9% —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'strength': 0.10,      # +10% —Å–∏–ª—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'attack': 0.10,        # +10% –∞—Ç–∞–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'defense': 0.08,       # +8% –∑–∞—â–∏—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'dexterity': 0.05,     # +5% –ª–æ–≤–∫–æ—Å—Ç–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'intelligence': 0.03   # +3% –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }

    class_icon: str = "W"
    class_icon_color: int = 1  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤–æ–∏–Ω–∞
    
    def __init__(self, name: str, level: int = 1) -> None:
        super().__init__(name=name, role="warrior", level=level, 
                        class_icon=self.class_icon, class_icon_color=self.class_icon_color)


class Rogue(Player):
    """–ö–ª–∞—Å—Å –†–∞–∑–±–æ–π–Ω–∏–∫–∞ - –≤—ã—Å–æ–∫–∞—è –ª–æ–≤–∫–æ—Å—Ç—å, —É–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–Ω, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞."""
    
    BASE_STATS: Dict[str, int] = {
        'constitution': 7,   # –ù–∏–∑–∫–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        'strength': 6,       # –ù–∏–∑–∫–∞—è —Å–∏–ª–∞
        'dexterity': 18,     # –í—ã—Å–æ–∫–∞—è –ª–æ–≤–∫–æ—Å—Ç—å
        'intelligence': 10   # –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
    }
    
    GROWTH_RATES: Dict[str, float] = {
        'constitution': 0.07,  # +7% —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'strength': 0.05,      # +5% —Å–∏–ª—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'attack': 0.12,        # +12% –∞—Ç–∞–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'defense': 0.05,       # +5% –∑–∞—â–∏—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'dexterity': 0.08,     # +8% –ª–æ–≤–∫–æ—Å—Ç–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'intelligence': 0.06   # +6% –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }
    
    class_icon: str = "R"
    class_icon_color: int = 8  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–∑–±–æ–π–Ω–∏–∫–∞
    
    def __init__(self, name: str, level: int = 1) -> None:
        super().__init__(name=name, role="rogue", level=level, 
                        class_icon=self.class_icon, class_icon_color=self.class_icon_color)

        self.ability_manager.add_ability_by_name('Backstab')
        self.ability_manager.add_ability_by_name('SlidingStrike')
        self.ability_manager.add_ability_by_name('CriticalStrike')
        self.ability_manager.add_ability_by_name('PoisonStrike')

        for name in self.ability_manager.active_abilities:
            self.ability_manager.level_up_ability(name)

        for name in self.ability_manager.passive_abilities:
            self.ability_manager.set_ability_level(name, 5)


class Archer(Player):
    """–ö–ª–∞—Å—Å –õ—É—á–Ω–∏–∫–∞ - –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω, —Å—Ä–µ–¥–Ω—è—è –ª–æ–≤–∫–æ—Å—Ç—å, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞."""
    
    BASE_STATS: Dict[str, int] = {
        'constitution': 9,   # –ù–∏–∑–∫–æ–µ-—Å—Ä–µ–¥–Ω–µ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        'strength': 8,       # –ù–∏–∑–∫–∞—è —Å–∏–ª–∞
        'dexterity': 14,     # –í—ã—Å–æ–∫–∞—è –ª–æ–≤–∫–æ—Å—Ç—å
        'intelligence': 10   # –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
    }
    
    GROWTH_RATES: Dict[str, float] = {
        'constitution': 0.08,  # +8% —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'strength': 0.06,      # +6% —Å–∏–ª—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'attack': 0.11,        # +11% –∞—Ç–∞–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'defense': 0.06,       # +6% –∑–∞—â–∏—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'dexterity': 0.07,     # +7% –ª–æ–≤–∫–æ—Å—Ç–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'intelligence': 0.05   # +5% –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }
    
    class_icon: str = "A"
    class_icon_color: int = 6  # –¶–∏–∞–Ω–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –ª—É—á–Ω–∏–∫–∞
    
    def __init__(self, name: str, level: int = 1) -> None:
        super().__init__(name=name, role="archer", level=level, 
                        class_icon=self.class_icon, class_icon_color=self.class_icon_color)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        self.ability_manager.add_ability_by_name('Volley')


class Mage(Player):
    """–ö–ª–∞—Å—Å –ú–∞–≥–∞ - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ."""
    
    BASE_STATS: Dict[str, int] = {
        'constitution': 6,   # –û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        'strength': 4,       # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Å–∏–ª–∞
        'dexterity': 12,
        'intelligence': 20   # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
    }
    
    GROWTH_RATES: Dict[str, float] = {
        'constitution': 0.06,  # +6% —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'strength': 0.03,      # +3% —Å–∏–ª—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'attack': 0.13,        # +13% –∞—Ç–∞–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'defense': 0.04,       # +4% –∑–∞—â–∏—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'dexterity': 0.06,     # +6% –ª–æ–≤–∫–æ—Å—Ç–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'intelligence': 0.12   # +12% –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }
    
    class_icon: str = "M"
    class_icon_color: int = 5  # –ú–∞–≥–µ–Ω—Ç–∞ —Ü–≤–µ—Ç –¥–ª—è –º–∞–≥–∞
    
    def __init__(self, name: str, level: int = 1) -> None:
        super().__init__(name=name, role="mage", level=level, 
                        class_icon=self.class_icon, class_icon_color=self.class_icon_color)

        self.ability_manager.add_ability_by_name('Fireball')
        self.ability_manager.add_ability_by_name('FireStorm')

        for name in self.ability_manager.active_abilities:
            self.ability_manager.level_up_ability(name)

        # –¥–ª—è —Ç–µ—Å—Ç–∞
        self.ability_manager.remove_ability('attack')


class Healer(Player):
    """–ö–ª–∞—Å—Å –õ–µ–∫–∞—Ä—è - –Ω–∏–∑–∫–∏–π —É—Ä–æ–Ω, —Å—Ä–µ–¥–Ω–∏–µ –∑–∞—â–∏—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ª–µ—á–∏—Ç—å."""
    
    BASE_STATS: Dict[str, int] = {
        'constitution': 10,  # –°—Ä–µ–¥–Ω–µ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
        'strength': 5,       # –ù–∏–∑–∫–∞—è —Å–∏–ª–∞
        'dexterity': 12,
        'intelligence': 16   # –í—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
    }
    
    GROWTH_RATES: Dict[str, float] = {
        'constitution': 0.08,  # +8% —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'strength': 0.04,      # +4% —Å–∏–ª—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'attack': 0.07,        # +7% –∞—Ç–∞–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'defense': 0.07,       # +7% –∑–∞—â–∏—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'dexterity': 0.08,     # +8% –ª–æ–≤–∫–æ—Å—Ç–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        'intelligence': 0.09   # +9% –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }
    
    class_icon: str = "H"
    class_icon_color: int = 6  # –¶–∏–∞–Ω —Ü–≤–µ—Ç –¥–ª—è —Ö–∏–ª–µ—Ä–∞
    
    def __init__(self, name: str, level: int = 1) -> None:
        super().__init__(name=name, role="healer", level=level, can_heal=True, 
                        class_icon=self.class_icon, class_icon_color=self.class_icon_color)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ª–µ—á–µ–Ω–∏—è
        self.ability_manager.add_ability_by_name('Heal')
        self.ability_manager.add_ability_by_name('MassHeal')

        for name in self.ability_manager.active_abilities:
            self.ability_manager.level_up_ability(name)

- Inventory/inventory.py
# inventory.py - –°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (Singleton)

from typing import Dict, Any, Optional, Protocol


# –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É –Ω–∏—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ name
class Item(Protocol):
    name: str


class Inventory:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (Singleton)."""
    
    _instance: Optional['Inventory'] = None
    _initialized: bool = False
    
    def __new__(cls) -> 'Inventory':
        if cls._instance is None:
            cls._instance = super(Inventory, cls).__new__(cls)
        return cls._instance
    
    def __init__(self) -> None:
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if not Inventory._initialized:
            self.gold: int = 0
            self.items: Dict[Item, int] = {}  # –æ–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            Inventory._initialized = True
    
    @classmethod
    def get_instance(cls) -> 'Inventory':
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—Å–æ–∑–¥–∞–µ—Ç, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."""
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance
    
    @classmethod
    def reset_instance(cls) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        cls._instance = None
        cls._initialized = False
    
    def add_gold(self, amount: int) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∑–æ–ª–æ—Ç–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.
        
        :param amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        if amount > 0:
            self.gold += amount
    
    def remove_gold(self, amount: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–æ–ª–æ—Ç–æ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.
        
        :param amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞
        """
        if amount <= 0:
            return True
        if self.gold >= amount:
            self.gold -= amount
            return True
        return False
    
    def get_gold(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ."""
        return self.gold
    
    def add_item(self, item_object: Item, quantity: int = 1) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.
        
        :param item_object: –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        :param quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        if quantity > 0:
            if item_object in self.items:
                self.items[item_object] += quantity
            else:
                self.items[item_object] = quantity
    
    def remove_item(self, item_object: Item, quantity: int = 1) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.
        
        :param item_object: –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        :param quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        if item_object not in self.items:
            return False
        
        if quantity <= 0:
            return True
            
        if self.items[item_object] >= quantity:
            self.items[item_object] -= quantity
            if self.items[item_object] == 0:
                del self.items[item_object]
            return True
        return False
    
    def get_item_count(self, item_object: Item) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.
        
        :param item_object: –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        return self.items.get(item_object, 0)
    
    def has_item(self, item_object: Item, quantity: int = 1) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.
        
        :param item_object: –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        :param quantity: –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        :return: True –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        return self.get_item_count(item_object) >= quantity
    
    def get_all_items(self) -> Dict[Item, int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.
        
        :return: –°–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        return self.items.copy()
    
    def is_empty(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç –ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.
        
        :return: True –µ—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç, False –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
        """
        return len(self.items) == 0 and self.gold == 0
    
    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."""
        self.gold = 0
        self.items.clear()
    
    def get_total_items_count(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.
        
        :return: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        return sum(self.items.values())
    
    def __str__(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""
        if self.is_empty():
            return "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç"
        
        result = []
        if self.gold > 0:
            result.append(f"üí∞ –ó–æ–ª–æ—Ç–æ: {self.gold}")
        
        if self.items:
            result.append("–ü—Ä–µ–¥–º–µ—Ç—ã:")
            for item_object, quantity in self.items.items():
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                item_name = getattr(item_object, 'name', str(item_object))
                result.append(f"  {item_name}: {quantity}")
        
        return "\n".join(result)
    
    def __repr__(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""
        return f"Inventory(gold={self.gold}, items={len(self.items)})"


# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
def get_inventory() -> Inventory:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (Singleton).
    –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π.
    """
    return Inventory.get_instance()

- Items/item_generator.py
# item_generator.py - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤

import random
from typing import List, Dict, Any, Optional
from Items.base_item import BaseItem

class ConsumableItem(BaseItem):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–∑–µ–ª—å—è, —Å–≤–∏—Ç–∫–∏ –∏ —Ç.–¥.)"""
    
    def __init__(self, name: str, level: int = 1, rarity: int = 0, properties: Dict[str, Any] = None):
        super().__init__(name, BaseItem.CONSUMABLE, level, rarity, properties)
    
    def use(self, user: Any) -> bool:
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç.
        
        :param user: –û–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç
        :return: True –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP
        heal_amount = self.get_property('heal_amount', 0)
        if heal_amount > 0 and hasattr(user, 'hp') and hasattr(user, 'derived_stats'):
            old_hp = user.hp
            user.hp = min(user.derived_stats.max_hp, user.hp + heal_amount)
            actual_heal = user.hp - old_hp
            print(f"{user.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {actual_heal} HP –∏—Å–ø–æ–ª—å–∑—É—è {self.name}")
            return True
        return False

class WeaponItem(BaseItem):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ä—É–∂–∏—è"""
    
    def __init__(self, name: str, level: int = 1, rarity: int = 0, properties: Dict[str, Any] = None):
        super().__init__(name, BaseItem.WEAPON, level, rarity, properties)
    
    def use(self, user: Any) -> bool:
        """
        –û—Ä—É–∂–∏–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç.
        """
        print(f"{self.name} - —ç—Ç–æ –æ—Ä—É–∂–∏–µ, –µ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–¥–µ—Ç—å, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.")
        return False
    
    def equip(self, character: Any) -> bool:
        """
        –ù–∞–¥–µ–≤–∞–µ—Ç –æ—Ä—É–∂–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        """
        if not self.can_equip(character):
            return False
        
        if hasattr(character, 'equipped_weapon'):
            character.equipped_weapon = self
            print(f"{character.name} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª {self.name}")
            return True
        return False
    
    def unequip(self, character: Any) -> bool:
        """
        –°–Ω–∏–º–∞–µ—Ç –æ—Ä—É–∂–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        """
        if hasattr(character, 'equipped_weapon') and character.equipped_weapon == self:
            character.equipped_weapon = None
            print(f"{character.name} —Å–Ω—è–ª {self.name}")
            return True
        return False

class ArmorItem(BaseItem):
    """–ö–ª–∞—Å—Å –¥–ª—è –±—Ä–æ–Ω–∏"""
    
    def __init__(self, name: str, level: int = 1, rarity: int = 0, properties: Dict[str, Any] = None):
        super().__init__(name, BaseItem.ARMOR, level, rarity, properties)
    
    def use(self, user: Any) -> bool:
        """
        –ë—Ä–æ–Ω—é –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç.
        """
        print(f"{self.name} - —ç—Ç–æ –±—Ä–æ–Ω—è, –µ–µ –Ω—É–∂–Ω–æ –Ω–∞–¥–µ—Ç—å, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.")
        return False
    
    def equip(self, character: Any) -> bool:
        """
        –ù–∞–¥–µ–≤–∞–µ—Ç –±—Ä–æ–Ω—é –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        """
        if not self.can_equip(character):
            return False
        
        if hasattr(character, 'equipped_armor'):
            character.equipped_armor = self
            print(f"{character.name} –Ω–∞–¥–µ–ª {self.name}")
            return True
        return False
    
    def unequip(self, character: Any) -> bool:
        """
        –°–Ω–∏–º–∞–µ—Ç –±—Ä–æ–Ω—é —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        """
        if hasattr(character, 'equipped_armor') and character.equipped_armor == self:
            character.equipped_armor = None
            print(f"{character.name} —Å–Ω—è–ª {self.name}")
            return True
        return False

class AccessoryItem(BaseItem):
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤"""
    
    def __init__(self, name: str, level: int = 1, rarity: int = 0, properties: Dict[str, Any] = None):
        super().__init__(name, BaseItem.ACCESSORY, level, rarity, properties)
    
    def use(self, user: Any) -> bool:
        """
        –ê–∫—Å–µ—Å—Å—É–∞—Ä –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç.
        """
        print(f"{self.name} - —ç—Ç–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä, –µ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–¥–µ—Ç—å, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.")
        return False
    
    def equip(self, character: Any) -> bool:
        """
        –ù–∞–¥–µ–≤–∞–µ—Ç –∞–∫—Å–µ—Å—Å—É–∞—Ä –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        """
        if not self.can_equip(character):
            return False
        
        if hasattr(character, 'equipped_accessory'):
            character.equipped_accessory = self
            print(f"{character.name} –Ω–∞–¥–µ–ª {self.name}")
            return True
        return False
    
    def unequip(self, character: Any) -> bool:
        """
        –°–Ω–∏–º–∞–µ—Ç –∞–∫—Å–µ—Å—Å—É–∞—Ä —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        """
        if hasattr(character, 'equipped_accessory') and character.equipped_accessory == self:
            character.equipped_accessory = None
            print(f"{character.name} —Å–Ω—è–ª {self.name}")
            return True
        return False

class ItemGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    WEAPON_NAMES = [
        "–ú–µ—á", "–¢–æ–ø–æ—Ä", "–ö–∏–Ω–∂–∞–ª", "–ü–æ—Å–æ—Ö", "–õ—É–∫", "–ê—Ä–±–∞–ª–µ—Ç", 
        "–ë—É–ª–∞–≤–∞", "–ö–æ–ø—å–µ", "–ö–æ—Å–∞", "–¶–µ–ø", "–ö–æ–≥—Ç–∏", "–ö–∏–Ω–∂–∞–ª—ã"
    ]
    
    ARMOR_NAMES = [
        "–î–æ—Å–ø–µ—Ö", "–ö–æ–ª—å—á—É–≥–∞", "–†–æ–±–∞", "–ü–ª–∞—â", "–©–∏—Ç", "–®–ª–µ–º",
        "–ü–µ—Ä—á–∞—Ç–∫–∏", "–°–∞–ø–æ–≥–∏", "–ù–∞–≥—Ä—É–¥–Ω–∏–∫", "–ü–æ–Ω–æ–∂–∏", "–ù–∞—Ä—É—á–∏"
    ]
    
    CONSUMABLE_NAMES = [
        "–ó–µ–ª—å–µ", "–°–≤–∏—Ç–æ–∫", "–≠–ª–∏–∫—Å–∏—Ä", "–ù–∞—Å—Ç–æ–π–∫–∞", "–û—Ç–≤–∞—Ä",
        "–ú–∏–∫—Å—Ç—É—Ä–∞", "–¢–æ–Ω–∏–∫", "–ë–∞–ª—å–∑–∞–º"
    ]
    
    ACCESSORY_NAMES = [
        "–ö–æ–ª—å—Ü–æ", "–ê–º—É–ª–µ—Ç", "–û–∂–µ—Ä–µ–ª—å–µ", "–ë—Ä–∞—Å–ª–µ—Ç", "–ü–µ—á–∞—Ç–∫–∞",
        "–ú–µ–¥–∞–ª—å–æ–Ω", "–ö—É–ª–æ–Ω", "–ü–æ–¥–≤–µ—Å–∫–∞"
    ]
    
    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    RARE_MODIFIERS = [
        "–°–≤–µ—Ä–∫–∞—é—â–∏–π", "–ú–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "–î—Ä–µ–≤–Ω–∏–π",
        "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–í–µ–ª–∏–∫–∏–π", "–í–µ—á–Ω—ã–π", "–°–≤—è—â–µ–Ω–Ω—ã–π"
    ]
    
    # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    CHARACTER_STATS = [
        'strength_bonus',      # –ë–æ–Ω—É—Å —Å–∏–ª—ã
        'dexterity_bonus',     # –ë–æ–Ω—É—Å –ª–æ–≤–∫–æ—Å—Ç–∏
        'intelligence_bonus',  # –ë–æ–Ω—É—Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
        'constitution_bonus',   # –ë–æ–Ω—É—Å —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è
        'crit_chance_bonus',   # –ë–æ–Ω—É—Å —à–∞–Ω—Å–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
        'dodge_chance_bonus'   # –ë–æ–Ω—É—Å —à–∞–Ω—Å–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è
    ]
    
    # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ (–±—É–¥—É—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —É—Ä–æ–≤–Ω—é)
    BASE_STAT_VALUES = {
        'strength_bonus': 1,
        'dexterity_bonus': 1,
        'intelligence_bonus': 1,
        'constitution_bonus': 1,
        'crit_chance_bonus': 1,
        'dodge_chance_bonus': 1
    }
    
    # –°–≤–æ–π—Å—Ç–≤–∞ —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    BASE_CONSUMABLE_VALUES = {
        'heal_amount': 20,
        'temp_strength': 1,
        'temp_dexterity': 1,
        'temp_intelligence': 1,
        'temp_constitution': 1
    }
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–π—Å—Ç–≤ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    PROPERTIES_COUNT_BY_RARITY = {
        0: 1,  # –û–±—ã—á–Ω—ã–π - 1 —Å–≤–æ–π—Å—Ç–≤–æ
        1: 1,  # –ù–µ–æ–±—ã—á–Ω—ã–π - 1 —Å–≤–æ–π—Å—Ç–≤–æ
        2: 2,  # –†–µ–¥–∫–∏–π - 2 —Å–≤–æ–π—Å—Ç–≤–∞
        3: 3,  # –≠–ø–∏—á–µ—Å–∫–∏–π - 3 —Å–≤–æ–π—Å—Ç–≤–∞
        4: 4   # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π - 4 —Å–≤–æ–π—Å—Ç–≤–∞
    }
    
    @staticmethod
    def generate_random_item(item_type: Optional[int] = None, 
                           min_level: int = 1, 
                           max_level: int = 10,
                           rarity_weights: Optional[List[float]] = None) -> BaseItem:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.
        
        :param item_type: –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ (0-3), –µ—Å–ª–∏ None - —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø
        :param min_level: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞
        :param max_level: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞
        :param rarity_weights: –í–µ—Å–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ [–æ–±—ã—á–Ω—ã–π, –Ω–µ–æ–±—ã—á–Ω—ã–π, —Ä–µ–¥–∫–∏–π, —ç–ø–∏—á–µ—Å–∫–∏–π, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π]
        :return: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        """
        # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
        if item_type is None:
            item_type = random.choice([BaseItem.CONSUMABLE, BaseItem.WEAPON, BaseItem.ARMOR, BaseItem.ACCESSORY])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å
        level = random.randint(min_level, max_level)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
        if rarity_weights is None:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ–±—ã—á–Ω—ã–µ —á–∞—â–µ, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Ä–µ–∂–µ
            rarity_weights = [0.5, 0.3, 0.15, 0.04, 0.01]
        
        rarity = random.choices([0, 1, 2, 3, 4], weights=rarity_weights)[0]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è
        name = ItemGenerator._generate_item_name(item_type, rarity)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        properties = ItemGenerator._generate_item_properties(item_type, rarity, level)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if item_type == BaseItem.CONSUMABLE:
            return ConsumableItem(name, level, rarity, properties)
        elif item_type == BaseItem.WEAPON:
            return WeaponItem(name, level, rarity, properties)
        elif item_type == BaseItem.ARMOR:
            return ArmorItem(name, level, rarity, properties)
        elif item_type == BaseItem.ACCESSORY:
            return AccessoryItem(name, level, rarity, properties)
        
        # –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
        return BaseItem(name, item_type, level, rarity, properties)
    
    @staticmethod
    def _generate_item_name(item_type: int, rarity: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞."""
        # –í—ã–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è –ø–æ —Ç–∏–ø—É
        if item_type == BaseItem.WEAPON:
            base_name = random.choice(ItemGenerator.WEAPON_NAMES)
        elif item_type == BaseItem.ARMOR:
            base_name = random.choice(ItemGenerator.ARMOR_NAMES)
        elif item_type == BaseItem.CONSUMABLE:
            base_name = random.choice(ItemGenerator.CONSUMABLE_NAMES)
        elif item_type == BaseItem.ACCESSORY:
            base_name = random.choice(ItemGenerator.ACCESSORY_NAMES)
        else:
            base_name = "–ü—Ä–µ–¥–º–µ—Ç"
        
        # –î–ª—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        if rarity >= 2:  # –†–µ–¥–∫–∏–π –∏ –≤—ã—à–µ
            modifier = random.choice(ItemGenerator.RARE_MODIFIERS)
            return f"{modifier} {base_name}"
        elif rarity == 1:  # –ù–µ–æ–±—ã—á–Ω—ã–π
            prefixes = ["–£–ª—É—á—à–µ–Ω–Ω—ã–π", "–ö—Ä–µ–ø–∫–∏–π", "–ü—Ä–æ—á–Ω—ã–π"]
            prefix = random.choice(prefixes)
            return f"{prefix} {base_name}"
        
        return base_name
    
    @staticmethod
    def _calculate_stat_value(base_value: int, level: int, rarity: int) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∏ —Ä–µ–¥–∫–æ—Å—Ç–∏.
        
        :param base_value: –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        :param level: –£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞
        :param rarity: –†–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞
        :return: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        """
        # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å —É—Ä–æ–≤–Ω–µ–º
        level_multiplier = 1 + (level - 1) * 0.2  # –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–±–∞–≤–ª—è–µ—Ç 20%
        
        # –†–µ–¥–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
        rarity_multiplier = 1 + rarity * 0.25  # –ö–∞–∂–¥–∞—è —Å—Ç—É–ø–µ–Ω—å —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç 25%
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        final_value = base_value * level_multiplier * rarity_multiplier
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞, –º–∏–Ω–∏–º—É–º 1
        return max(1, int(final_value))
    
    @staticmethod
    def _generate_item_properties(item_type: int, rarity: int, level: int) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞."""
        properties = {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        num_properties = ItemGenerator.PROPERTIES_COUNT_BY_RARITY.get(rarity, 1)
        
        if item_type == BaseItem.CONSUMABLE:
            # –î–ª—è —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç
            # –í—ã–±–∏—Ä–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥—É–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            consumable_props = list(ItemGenerator.BASE_CONSUMABLE_VALUES.keys())
            
            # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–π—Å—Ç–≤
            if len(consumable_props) >= num_properties:
                selected_props = random.sample(consumable_props, num_properties)
            else:
                selected_props = consumable_props
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
            for prop in selected_props:
                base_value = ItemGenerator.BASE_CONSUMABLE_VALUES[prop]
                # –î–ª—è —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —É—Ä–æ–≤–µ–Ω—å, –∏ —Ä–µ–¥–∫–æ—Å—Ç—å –≤–ª–∏—è—é—Ç –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç
                final_value = ItemGenerator._calculate_stat_value(base_value, level, rarity)
                properties[prop] = final_value
        else:
            # –î–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if len(ItemGenerator.CHARACTER_STATS) >= num_properties:
                selected_stats = random.sample(ItemGenerator.CHARACTER_STATS, num_properties)
            else:
                selected_stats = ItemGenerator.CHARACTER_STATS
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            for stat in selected_stats:
                base_value = ItemGenerator.BASE_STAT_VALUES[stat]
                # –î–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ä–µ–¥–∫–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–π—Å—Ç–≤
                final_value = ItemGenerator._calculate_stat_value(base_value, level, 1)  # –ë–∞–∑–æ–≤–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è
                properties[stat] = final_value
        
        return properties
    
    @staticmethod
    def generate_loot_pack(num_items: int = 3, 
                          min_level: int = 1, 
                          max_level: int = 10,
                          rarity_weights: Optional[List[float]] = None) -> List[BaseItem]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–ª—É—Ç).
        
        :param num_items: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ
        :param min_level: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        :param max_level: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        :param rarity_weights: –í–µ—Å–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
        :return: –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        items = []
        for _ in range(num_items):
            item = ItemGenerator.generate_random_item(
                min_level=min_level,
                max_level=max_level,
                rarity_weights=rarity_weights
            )
            items.append(item)
        return items

- Items/base_item.py
# base_item.py - –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø—Ä–µ–¥–º–µ—Ç–∞

from typing import Dict, Any, List, Never, Optional
from abc import ABC, abstractmethod

class BaseItem(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ."""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    CONSUMABLE = 0
    WEAPON = 1
    ARMOR = 2
    ACCESSORY = 3
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
    COMMON = 0      # –û–±—ã—á–Ω—ã–π
    UNCOMMON = 1    # –ù–µ–æ–±—ã—á–Ω—ã–π
    RARE = 2        # –†–µ–¥–∫–∏–π
    EPIC = 3        # –≠–ø–∏—á–µ—Å–∫–∏–π
    LEGENDARY = 4   # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π
    
    def __init__(self, name: str, item_type: int, level: int = 1, rarity: int = 0, properties: Dict[str, Any] = {}):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.
        
        :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        :param item_type: –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ (0-consumable, 1-–æ—Ä—É–∂–∏–µ, 2-–±—Ä–æ–Ω—è, 3-–∞–∫—Å–µ—Å—Å—É–∞—Ä)
        :param level: –£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞
        :param rarity: –†–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ (0-4)
        :param properties: –°–ª–æ–≤–∞—Ä—å —Å–≤–æ–π—Å—Ç–≤ –ø—Ä–µ–¥–º–µ—Ç–∞
        """
        self.name = name
        self.item_type = item_type  # 0-consumable, 1-–æ—Ä—É–∂–∏–µ, 2-–±—Ä–æ–Ω—è, 3-–∞–∫—Å–µ—Å—Å—É–∞—Ä
        self.level = level
        self.rarity = rarity
        self.color = self.get_rarity_color()
        self.properties = properties if properties is not None else {}
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        if self.item_type not in [0, 1, 2, 3]:
            raise ValueError("–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, 1, 2 –∏–ª–∏ 3")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
        if self.rarity not in [0, 1, 2, 3, 4]:
            raise ValueError("–†–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 4")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è
        if self.level < 1:
            raise ValueError("–£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    
    def get_property(self, property_name: str, default_value: Any = None) -> Any:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.
        
        :param property_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
        :param default_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        :return: –ó–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        return self.properties.get(property_name, default_value)
    
    def set_property(self, property_name: str, value: Any) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.
        
        :param property_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
        :param value: –ó–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
        """
        self.properties[property_name] = value
    
    def get_all_properties(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.
        
        :return: –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤
        """
        return self.properties.copy()
    
    def is_consumable(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã–º."""
        return self.item_type == 0
    
    def is_weapon(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –æ—Ä—É–∂–∏–µ–º."""
        return self.item_type == 1
    
    def is_armor(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –±—Ä–æ–Ω–µ–π."""
        return self.item_type == 2
    
    def is_accessory(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–º."""
        return self.item_type == 3
    
    def get_item_type_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞."""
        type_names = {
            0: "–†–∞—Å—Ö–æ–¥—É–µ–º—ã–π",
            1: "–û—Ä—É–∂–∏–µ",
            2: "–ë—Ä–æ–Ω—è",
            3: "–ê–∫—Å–µ—Å—Å—É–∞—Ä"
        }
        return type_names.get(self.item_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
    
    def get_rarity_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞."""
        rarity_names = {
            0: "–û–±—ã—á–Ω—ã–π",
            1: "–ù–µ–æ–±—ã—á–Ω—ã–π",
            2: "–†–µ–¥–∫–∏–π",
            3: "–≠–ø–∏—á–µ—Å–∫–∏–π",
            4: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"
        }
        return rarity_names.get(self.rarity, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å")
    
    def get_rarity_color(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        rarity_colors = {
            0: 7,  # –ë–µ–ª—ã–π
            1: 2,  # –ó–µ–ª–µ–Ω—ã–π
            2: 4,  # –°–∏–Ω–∏–π
            3: 5,  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            4: 40  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        }
        return rarity_colors.get(self.rarity, 7)
    
    def get_brief_display_template(self) -> tuple:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ (–≤ –±–æ—é/–ª—É—Ç–µ).
        
        :return: –ö–æ—Ä—Ç–µ–∂ (—à–∞–±–ª–æ–Ω, —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        """
        template = "%1 %2 (–£—Ä.%3)"
        elements = [
            (self.name, self.get_rarity_color()),
            (" (", 0),
            (str(self.level), 3),
            (")", 0)
        ]
        return template, elements
    
    def get_detailed_display_template(self) -> tuple:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ (–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ).
        
        :return: –ö–æ—Ä—Ç–µ–∂ (—à–∞–±–ª–æ–Ω, —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        """
        template = "%1 %2 (–£—Ä.%3, %4)"
        elements = [
            (self.name, self.get_rarity_color()),
            (" (", 0),
            (str(self.level), 3),
            (", ", 0),
            (self.get_rarity_name(), self.get_rarity_color()),
            (", ", 0),
            (self.get_item_type_name(), 6),
            (")", 0)
        ]
        return template, elements
    
    @abstractmethod
    def use(self, user: Any) -> bool:
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞.
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö.
        
        :param user: –û–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç
        :return: True –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        pass
    
    def can_equip(self, character: Any) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞–¥–µ—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.
        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–∞, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö.
        
        :param character: –û–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        :return: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if hasattr(character, 'level') and character.level < self.level:
            return False
        return True
    
    def equip(self, character: Any) -> bool:
        """
        –ù–∞–¥–µ–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å.
        
        :param character: –û–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞–¥–µ—Ç, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        return False
    
    def unequip(self, character: Any) -> bool:
        """
        –°–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å.
        
        :param character: –û–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        return False
    
    def __str__(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞."""
        return f"{self.name} (–£—Ä.{self.level}, {self.get_rarity_name()}, {self.get_item_type_name()})"
    
    def __repr__(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞."""
        return f"BaseItem(name='{self.name}', type={self.item_type}, level={self.level}, rarity={self.rarity}, properties={self.properties})"
    
    def __eq__(self, other) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–≤—É—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤."""
        if not isinstance(other, BaseItem):
            return False
        return (self.name == other.name and 
                self.item_type == other.item_type and 
                self.level == other.level and
                self.rarity == other.rarity and
                self.properties == other.properties)
    
    def __hash__(self) -> int:
        """–•—ç—à –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–∞–∫ –∫–ª—é—á–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ."""
        return hash((self.name, self.item_type, self.level, self.rarity, tuple(sorted(self.properties.items()))))

- tests/fireball_test.py
# tests/fireball_test.py

import sys
import os
import unittest
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from Characters.Abilities.Attack_abilities.fireball import Fireball
from Characters.Abilities.ability import AbilityResult
from Characters.character import Character

class TestFireball(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.fireball = Fireball()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è stats
        mock_stats = Mock()
        mock_stats.intelligence = 100
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.character = Mock(spec=Character)
        self.character.name = "–¢–µ—Å—Ç–æ–≤—ã–π –ú–∞–≥"
        self.character.stats = mock_stats
        self.character.is_alive.return_value = True
        self.character.energy = 10  # –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Ü–µ–ª—å
        self.target = Mock(spec=Character)
        self.target.name = "–¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞–≥"
        self.target.is_alive.return_value = True
        self.target.take_damage = Mock()
        self.target.status_manager = Mock()  # –î–æ–±–∞–≤–ª—è–µ–º status_manager
        self.target.status_manager.add_effect = Mock(return_value=Mock())  # –ú–æ–∫ –¥–ª—è add_effect
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        self.targets = [self.target]
    
    def test_fireball_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —à–∞—Ä–∞"""
        self.assertEqual(self.fireball.name, "–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä")
        self.assertEqual(self.fireball.damage_scale, 0.8)
        self.assertEqual(self.fireball.cooldown, 1)
        self.assertEqual(self.fireball.energy_cost, 5)
        self.assertEqual(self.fireball.icon, "üî•")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç BurnEffect –¥–æ–±–∞–≤–ª–µ–Ω
        self.fireball.level = 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        effects = self.fireball.get_effects_info()
        self.assertTrue(len(effects) > 0)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "Burn"
        effect_names = [effect.__name__ for effect in effects]
        self.assertTrue(any("Burn" in name for name in effect_names))
    
    def test_execute_no_targets(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑ —Ü–µ–ª–µ–π"""
        result = self.fireball.execute(self.character, [])
        self.assertIsInstance(result, AbilityResult)
        self.assertFalse(result.success)
        self.assertEqual(result.reason, '–ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏')
    
    def test_execute_dead_target(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –º–µ—Ä—Ç–≤–æ–π —Ü–µ–ª—å—é"""
        self.target.is_alive.return_value = False
        result = self.fireball.execute(self.character, [self.target])
        self.assertIsInstance(result, AbilityResult)
        self.assertFalse(result.success)
        self.assertEqual(result.reason, '–ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏')
    
    @patch('Battle.base_mechanics.GameMechanics.apply_all_mechanics')
    def test_execute_dodge_success(self, mock_apply_mechanics):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ —É–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –º–µ—Ö–∞–Ω–∏–∫
        mock_apply_mechanics.return_value = {
            'dodge_success': True,
            'dodge_message': '–£–∫–ª–æ–Ω–µ–Ω–∏–µ!',
            'final_damage': 0,
            'blocked_damage': 0,
            'critical_hit': False
        }
        
        result = self.fireball.execute(self.character, self.targets)
        
        self.assertIsInstance(result, AbilityResult)
        self.assertFalse(result.success)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        self.assertTrue(len(result.messages) > 0)
    
    @patch('Battle.base_mechanics.GameMechanics.apply_all_mechanics')
    @patch('Battle.battle_logger.battle_logger.create_log_message')
    def test_execute_successful_hit(self, mock_create_message, mock_apply_mechanics):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_apply_mechanics.return_value = {
            'dodge_success': False,
            'dodge_message': '',
            'final_damage': 80,  # 100 * 0.8
            'blocked_damage': 10,
            'critical_hit': False
        }
        mock_create_message.return_value = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        result = self.fireball.execute(self.character, self.targets)
        
        self.assertIsInstance(result, AbilityResult)
        self.assertTrue(result.success)
        self.assertEqual(result.total_damage, 80)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–Ω –±—ã–ª –Ω–∞–Ω–µ—Å–µ–Ω
        self.target.take_damage.assert_called_once_with(80)
    
    @patch('Battle.base_mechanics.GameMechanics.apply_all_mechanics')
    @patch('Battle.battle_logger.battle_logger.create_log_message')
    def test_execute_critical_hit(self, mock_create_message, mock_apply_mechanics):
        """–¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_apply_mechanics.return_value = {
            'dodge_success': False,
            'dodge_message': '',
            'final_damage': 160,  # 100 * 0.8 * 2 (–∫—Ä–∏—Ç)
            'blocked_damage': 0,
            'critical_hit': True
        }
        mock_create_message.return_value = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ!"
        
        result = self.fireball.execute(self.character, self.targets)
        
        self.assertIsInstance(result, AbilityResult)
        self.assertTrue(result.success)
        self.assertEqual(result.total_damage, 160)
        self.target.take_damage.assert_called_once_with(160)
    
    def test_check_specific_conditions(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π"""
        # –ü–æ–∫–∞ –º–µ—Ç–æ–¥ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
        self.assertTrue(self.fireball.check_specific_conditions(self.character, self.targets))
        self.assertTrue(self.fireball.check_specific_conditions(self.character, []))
        self.assertTrue(self.fireball.check_specific_conditions(self.character, [self.target, self.target]))

if __name__ == '__main__':
    unittest.main()

- Characters/Equipment/equipment.py
from Config.game_config import EQUIPMENT_SLOT_TYPES


class EquipmentSlot:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏."""
    
    def __init__(self, name, slot_type):
        self.name = name          # –ò–º—è —Å–ª–æ—Ç–∞ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        self.slot_type = slot_type # –¢–∏–ø —Å–ª–æ—Ç–∞ (–¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        self.item = None          # –ü—Ä–µ–¥–º–µ—Ç –≤ —Å–ª–æ—Ç–µ
    
    def equip(self, item):
        """–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ª–æ—Ç."""
        if not hasattr(item, 'name'):
            raise ValueError("–ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç 'name'")
        
        old_item = self.item
        self.item = item
        return old_item  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –±—ã–ª
    
    def unequip(self):
        """–°–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å–æ —Å–ª–æ—Ç–∞."""
        old_item = self.item
        self.item = None
        return old_item
    
    def is_empty(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—É—Å—Ç –ª–∏ —Å–ª–æ—Ç."""
        return self.item is None
    
    def get_item(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞."""
        return self.item


class EquipmentMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫–∏–ø–∏—Ä–æ–≤–∫–æ–π."""
    
    def equip_item(self, item, slot_type):
        """–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ª–æ—Ç."""
        if slot_type not in self.equipment_slots:
            print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–ª–æ—Ç–∞: {slot_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã: {', '.join(EQUIPMENT_SLOT_TYPES)}")
            return False
        
        try:
            slot = self.equipment_slots[slot_type]
            old_item = slot.equip(item)
            
            if old_item:
                print(f"–°–Ω—è—Ç –ø—Ä–µ–¥–º–µ—Ç: {old_item.name} —Å–æ —Å–ª–æ—Ç–∞ {slot.name}")
            
            print(f"{item.name} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –≤ —Å–ª–æ—Ç {slot.name}")
            return True
            
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def unequip_item(self, slot_type):
        """–°–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞."""
        if slot_type not in self.equipment_slots:
            print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–ª–æ—Ç–∞: {slot_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã: {', '.join(EQUIPMENT_SLOT_TYPES)}")
            return None
        
        slot = self.equipment_slots[slot_type]
        item = slot.unequip()
        
        if item:
            print(f"–°–Ω—è—Ç –ø—Ä–µ–¥–º–µ—Ç: {item.name} —Å–æ —Å–ª–æ—Ç–∞ {slot.name}")
            return item
        else:
            print(f"–°–ª–æ—Ç {slot.name} –ø—É—Å—Ç")
            return None
    
    def unequip_item_by_name(self, item_name):
        """–°–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∏–º–µ–Ω–∏."""
        for slot_type, slot in self.equipment_slots.items():
            if slot.item and hasattr(slot.item, 'name') and slot.item.name == item_name:
                item = slot.unequip()
                print(f"–°–Ω—è—Ç –ø—Ä–µ–¥–º–µ—Ç: {item_name} —Å–æ —Å–ª–æ—Ç–∞ {slot.name}")
                return item
        print(f"–ü—Ä–µ–¥–º–µ—Ç {item_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ")
        return None
    
    def show_equipment(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É."""
        print(f"–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ {self.name}:")
        for slot in self.equipment_slots.values():
            if slot.item:
                print(f"  {slot.name}: {slot.item.name}")
            else:
                print(f"  {slot.name}: –ø—É—Å—Ç–æ")
    
    def get_equipped_item(self, slot_type):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞."""
        if slot_type in self.equipment_slots:
            return self.equipment_slots[slot_type].get_item()
        return None
    
    def get_all_equipped_items(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤."""
        return [slot.item for slot in self.equipment_slots.values() if not slot.is_empty()]
    
    def is_slot_empty(self, slot_type):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—É—Å—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ª–æ—Ç."""
        if slot_type in self.equipment_slots:
            return self.equipment_slots[slot_type].is_empty()
        return True
    
    def get_empty_slots(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤."""
        return [slot_type for slot_type, slot in self.equipment_slots.items() if slot.is_empty()]
    
    def get_occupied_slots(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤."""
        return [slot_type for slot_type, slot in self.equipment_slots.items() if not slot.is_empty()]

- Characters/Abilities/ability.py
# Characters/Abilities/ability.py - –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π

from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from typing import Dict, List, Any, Optional, TYPE_CHECKING, Type

from Utils.types import IApplyEffectResult

if TYPE_CHECKING:
    from Characters.character import Character
    from Characters.Status_effects.status_effect import Status_effect  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

# ==================== –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ====================
@dataclass
class AbilityInfo:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
    name: str
    type: int
    description: str
    level: int
    # –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
    damage_scale: Optional[float] = None
    energy_cost: Optional[int] = None
    is_mass: Optional[bool] = None
    cooldown: Optional[int] = None
    current_cooldown: Optional[int] = None


# ==================== –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ====================
@dataclass
class AbilityResult:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π."""
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
    success: bool = True
    ability_type: str = ""
    character: Optional['Character'] = None
    targets: List['Character'] = field(default_factory=list)
    messages: List[Any] = field(default_factory=list)
    damage_dealt: int = 0
    heal_amount: int = 0
    energy_restored: int = 0
    is_critical: bool = False
    total_damage: int = 0
    total_heal: int = 0
    reason: str = ""  # –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏
    details: Dict[str, Any] = field(default_factory=dict)  # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏


# ==================== –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ====================
class Ability(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π - –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é"""
    
    def __init__(self, name: str, type: int = 0, description: str = "", icon: str = "") -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        
        :param name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param type: –¢–∏–ø —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ - 0 - –∞—Ç–∞–∫–∞, 1 - –ª–µ—á–µ–Ω–∏–µ, 2 - –æ—Ç–¥—ã—Ö –∏ —Ç.–¥.
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param icon: –ò–∫–æ–Ω–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        """
        self.name: str = name
        self.type: int = type
        self.level: int = 0  # –£—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (0 = –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
        self.description: str = description
        self.icon: str = icon
    
    # ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è–º–∏ ====================
    def level_up(self) -> int:
        """–ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ 1"""
        self.level += 1
        return self.level
    
    def set_level(self, level: int) -> int:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        self.level = max(0, level)  # –£—Ä–æ–≤–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0
        return self.level
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (—É—Ä–æ–≤–µ–Ω—å > 0)"""
        return self.level > 0
    
    # ==================== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ====================
    def get_info(self) -> AbilityInfo:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
        return AbilityInfo(
            name=self.name,
            type=self.type,
            description=self.description,
            level=self.level
        )
    
    # ==================== –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã ====================
    @abstractmethod
    def can_use(self, character: 'Character', targets: Optional[List['Character']] = None) -> bool:
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        pass
    
    @abstractmethod
    def use(self, character: 'Character', targets: List['Character'], **kwargs: Any) -> AbilityResult:
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        pass


# ==================== –ê–∫—Ç–∏–≤–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ====================
class ActiveAbility(Ability):
    """–ê–∫—Ç–∏–≤–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å - –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏–≥—Ä–æ–∫–æ–º"""
    
    def __init__(self, name: str, type: int = 0, damage_scale: float = 0.0, cooldown: int = 1, 
                 energy_cost: int = 0, description: str = "", icon: str = "", is_mass: bool = False) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        
        :param name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param type: –¢–∏–ø —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ - 0 - –∞—Ç–∞–∫–∞, 1 - –ª–µ—á–µ–Ω–∏–µ, 2 - –æ—Ç–¥—ã—Ö –∏ —Ç.–¥.
        :param damage_scale: –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ä–æ–Ω–∞ –æ—Ç –∞—Ç–∞–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        :param cooldown: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param energy_cost: –°—Ç–æ–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param icon: –ò–∫–æ–Ω–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param is_mass: –ú–∞—Å—Å–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        """
        super().__init__(name, type, description, icon)
        self.damage_scale: float = damage_scale
        self.energy_cost: int = energy_cost
        self.is_mass: bool = is_mass
        self.cooldown: int = cooldown
        self.current_cooldown: int = 0
        self._applied_effects: Optional[List[Type['Status_effect']]] = None  # –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    
    # ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ ====================
    @property
    def applied_effects(self) -> List[Type['Status_effect']]:
        """–õ–µ–Ω–∏–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        if self._applied_effects is None:
            self._applied_effects = []
        return self._applied_effects
    
    def add_effect(self, effect_class: Type['Status_effect']) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω —ç—Ç–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é.
        
        :param effect_class: –ö–ª–∞—Å—Å —ç—Ñ—Ñ–µ–∫—Ç–∞
        """
        self.applied_effects.append(effect_class)
    
    def get_effects_info(self) -> List[Type['Status_effect']]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        if self._applied_effects is None:
            return []
        return self._applied_effects.copy()
    
    def clear_effects(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        if self._applied_effects is not None:
            self._applied_effects.clear()

    def add_effect_by_class_name(self, effect_class_name: str) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞.
        
        :param effect_class_name: –ò–º—è –∫–ª–∞—Å—Å–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
        :return: True –µ—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω, False –µ—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        from Characters.Status_effects.status_manager import get_effect_class_by_name
        effect_class = get_effect_class_by_name(effect_class_name)
        if effect_class:
            self.applied_effects.append(effect_class)
            return True
        return False

    def add_effect_by_class(self, effect_class: type) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –ø–æ –∫–ª–∞—Å—Å—É.
        
        :param effect_class: –ö–ª–∞—Å—Å —ç—Ñ—Ñ–µ–∫—Ç–∞
        """
        self.applied_effects.append(effect_class)

    def get_effect_instances(self, **kwargs) -> List['Status_effect']:
        """
        –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –≤—Å–µ—Ö –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
        
        :param kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        :return: –°–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        """
        instances = []
        for effect_class in self.applied_effects:
            try:
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                instance = effect_class(**kwargs)
                instances.append(instance)
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue
        return instances

    def apply_effects_with_chance(self, target: 'Character', chance: float = 1.0) -> List[IApplyEffectResult]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º.
        
        :param target: –¶–µ–ª—å
        :param chance: –®–∞–Ω—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (0.0 - 1.0)
        :return: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        """
        import random
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–Ω—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        if random.random() > chance:
            return []
            
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        effect_instances = self.get_effect_instances()
        
        apply_effect_results_list: List[IApplyEffectResult] = []
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        for effect in effect_instances:
            apply_effect_result = target.status_manager.add_effect(effect, target)
            apply_effect_results_list.append(apply_effect_result)

        return apply_effect_results_list
    
    # ==================== –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ====================
    def can_use(self, character: 'Character', targets: Optional[List['Character']] = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.
        
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        :param targets: –¶–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: True, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∏–Ω–∞—á–µ False
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if self.level <= 0:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if self.current_cooldown > 0:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
        if hasattr(character, 'energy') and character.energy < self.energy_cost:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        return self.check_specific_conditions(character, targets or [])
    
    def check_specific_conditions(self, character: 'Character', targets: List['Character']) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö.
        """
        return True
    
    # ==================== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ====================
    def use(self, character: 'Character', targets: List['Character'], **kwargs: Any) -> AbilityResult:
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.
        
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        :param targets: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        :param kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        """
        if not self.can_use(character, targets):
            result = AbilityResult()
            result.success = False
            result.reason = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"
            result.ability_type = self.__class__.__name__.lower()
            result.character = character
            result.targets = targets
            return result
        
        # –¢—Ä–∞—Ç–∏–º —ç–Ω–µ—Ä–≥–∏—é
        if hasattr(character, 'energy'):
            character.energy -= self.energy_cost
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        self.current_cooldown = self.cooldown
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        result = self.execute(character, targets, **kwargs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.on_use(character, targets, result)
        
        return result
    
    def execute(self, character: 'Character', targets: List['Character'], **kwargs: Any) -> AbilityResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö.
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ execute –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ")
    
    # ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–æ–º ====================
    def update_cooldown(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞."""
        if self.current_cooldown > 0:
            self.current_cooldown -= 1
    
    def on_use(self, character: 'Character', targets: List['Character'], result: AbilityResult) -> None:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ç.–¥.
        """
        pass
    
    # ==================== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ====================
    def get_info(self) -> AbilityInfo:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
        base_info = super().get_info()
        return AbilityInfo(**base_info.__dict__ | {
            'damage_scale': self.damage_scale,
            'energy_cost': self.energy_cost,
            'is_mass': self.is_mass,
            'cooldown': self.cooldown,
            'current_cooldown': self.current_cooldown
        })


# ==================== –ü–∞—Å—Å–∏–≤–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ====================
class PassiveAbility(Ability):
    """–ü–∞—Å—Å–∏–≤–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å - —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    
    def __init__(self, name: str, type: int = 0, description: str = "", icon: str = "") -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Å—Å–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        
        :param name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param type: –¢–∏–ø —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        :param icon: –ò–∫–æ–Ω–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        """
        super().__init__(name, type, description, icon)
    
    # ==================== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ====================
    def can_use(self, character: 'Character', targets: Optional[List['Character']] = None) -> bool:
        """
        –ü–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –µ—Å–ª–∏ –∏–º–µ—é—Ç —É—Ä–æ–≤–µ–Ω—å > 0.
        –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π.
        """
        return self.is_available()
    
    def use(self, character: 'Character', targets: List['Character'], **kwargs: Any) -> AbilityResult:
        """
        –ü–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é.
        """
        result = AbilityResult()
        result.success = False
        result.reason = "–ü–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é"
        result.ability_type = self.__class__.__name__.lower()
        result.character = character
        result.targets = targets
        return result
    
    # ==================== –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ ====================
    def apply_effect(self, character: 'Character', **kwargs: Any) -> Any:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö.
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ apply_effect –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ")

- Characters/Abilities/ability_manager.py
# Characters/Abilities/ability_manager.py
"""–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""

from abc import abstractmethod
import os
import random
import re
import importlib.util
from typing import Dict, Iterable, List, Any, Optional, TypeVar, Union

from Config.game_config import ABILITIES_PATH
from Characters.Abilities.ability import ActiveAbility, PassiveAbility, AbilityResult


T = TypeVar('T')

# ==================== –ó–∞–≥—Ä—É–∑—á–∏–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π ====================
class AbilityLoader:
    """Singleton –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"""
    _instance: Optional['AbilityLoader'] = None
    _initialized: bool = False
    
    # ==================== Singleton ====================
    def __new__(cls, root_folder: Optional[str] = None) -> 'AbilityLoader':
        if cls._instance is None:
            cls._instance = super(AbilityLoader, cls).__new__(cls)
        return cls._instance
    
    def __init__(self, root_folder: Optional[str] = None) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"""
        if not self._initialized:
            self.root_folder: str = root_folder or 'Characters/Abilities'
            self._class_map: Dict[str, type] = {}
            self._scan_abilities()
            self.__class__._initialized = True
    
    # ==================== –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π ====================
    def _scan_abilities(self) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª–∞—Å—Å—ã —ç—Ç–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"""
        base_path = os.path.normpath(ABILITIES_PATH)
        
        if not os.path.exists(base_path):
            raise FileNotFoundError(f"Root folder '{base_path}' not found")
        
        for dirpath, dirnames, filenames in os.walk(base_path):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if dirpath == base_path:
                continue

            for filename in filenames:
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
                if (filename.endswith('.py') and 
                    filename not in ['__init__.py', 'ability_base.py', 'abilities.py']):
                    full_path = os.path.join(dirpath, filename)
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞—Å—Å —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
                    try:
                        class_name = self._get_class_name_from_file(full_path)
                        if class_name:
                            ability_class = self._load_class_from_file(full_path, class_name)
                            self._class_map[class_name] = ability_class
                    except Exception as e:
                        print(f"Warning: Failed to load ability class from '{full_path}': {str(e)}")
    
    def _get_class_name_from_file(self, file_path: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞ Python"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞
            match = re.search(r'^class\s+(\w+)', content, re.MULTILINE)
            if match:
                return match.group(1)
            return None
        except Exception:
            return None

    def _load_class_from_file(self, file_path: str, class_name: str) -> type:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª–∞—Å—Å –∏–∑ —Ñ–∞–π–ª–∞"""
        spec = importlib.util.spec_from_file_location(class_name, file_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        if not hasattr(module, class_name):
            raise AttributeError(f"Class '{class_name}' not found in module '{file_path}'")
            
        return getattr(module, class_name)
    
    # ==================== –ü—É–±–ª–∏—á–Ω—ã–π API ====================
    def get_class(self, class_name: str) -> type:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞—Å—Å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏"""
        if class_name not in self._class_map:
            available_abilities = list(self._class_map.keys())
            raise FileNotFoundError(f"Ability class '{class_name}' not found. Available abilities: {available_abilities}")
        
        return self._class_map[class_name]
    
    def get_available_abilities(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–º–µ–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"""
        return list(self._class_map.keys())
    
    # ==================== Singleton management ====================
    @classmethod
    def get_instance(cls) -> 'AbilityLoader':
        """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä singleton"""
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance


def get_ability_loader() -> AbilityLoader:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AbilityLoader"""
    return AbilityLoader.get_instance()


# ==================== –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π ====================
class AbilityManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"""
        # –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        self.active_abilities: Dict[str, ActiveAbility] = {}
        self.passive_abilities: Dict[str, PassiveAbility] = {}
        
        # –ü–æ–ª—É—á–∞–µ–º singleton instance AbilityLoader
        self.ability_loader: AbilityLoader = AbilityLoader.get_instance()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.add_ability_by_name('Attack')
        self.add_ability_by_name('Rest')
    
    # ==================== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π ====================
    def add_ability(self, name: str, ability_instance: Union[ActiveAbility, PassiveAbility]) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂—É."""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            if hasattr(ability_instance, '__class__'):
                new_ability = ability_instance.__class__()
                # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                for attr, value in ability_instance.__dict__.items():
                    setattr(new_ability, attr, value)
            else:
                new_ability = ability_instance
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å
            if isinstance(new_ability, PassiveAbility):
                self.passive_abilities[name] = new_ability
            elif isinstance(new_ability, ActiveAbility):
                self.active_abilities[name] = new_ability
            return True
        except Exception as e:
            print(f"Error adding ability '{name}': {e}")
            return False
    
    def add_ability_by_name(self, ability_name: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∏."""
        ability_instance = self.create_ability_by_name(ability_name)
        if ability_instance:
            name_key = ability_name.lower()
            return self.add_ability(name_key, ability_instance)
        return False
    
    def remove_ability(self, name: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∏."""
        if name in self.active_abilities:
            del self.active_abilities[name]
            return True
        elif name in self.passive_abilities:
            del self.passive_abilities[name]
            return True
        return False
    
    def clear_abilities(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
        self.active_abilities.clear()
        self.passive_abilities.clear()
    
    # ==================== –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π ====================
    def get_ability(self, name: str) -> Optional[Union[ActiveAbility, PassiveAbility]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∏."""
        if name in self.active_abilities:
            return self.active_abilities[name]
        elif name in self.passive_abilities:
            return self.passive_abilities[name]
        return None
    
    def get_active_ability(self, name: str) -> Optional[ActiveAbility]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∏."""
        return self.active_abilities.get(name)
    
    def get_passive_ability(self, name: str) -> Optional[PassiveAbility]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Å—Å–∏–≤–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∏."""
        return self.passive_abilities.get(name)
    
    def get_all_abilities(self) -> List[Union[ActiveAbility, PassiveAbility]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return list(self.active_abilities.values()) + list(self.passive_abilities.values())
    
    def get_active_abilities(self) -> List[ActiveAbility]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return list(self.active_abilities.values())
    
    def get_passive_abilities(self) -> List[PassiveAbility]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return list(self.passive_abilities.values())
    
    def get_all_ability_names(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–∞ –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return list(self.active_abilities.keys()) + list(self.passive_abilities.keys())
    
    def get_active_ability_names(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return list(self.active_abilities.keys())
    
    def get_passive_ability_names(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–∞—Å—Å–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return list(self.passive_abilities.keys())
    
    # ==================== –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ====================
    def get_available_abilities(self, character: Any) -> List[ActiveAbility]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π."""
        return [ability for ability in self.active_abilities.values() if ability.can_use(character)]
    
    def get_available_ability_names(self, character: Any) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π."""
        return [name for name, ability in self.active_abilities.items() if ability.can_use(character)]
    
    def get_available_passive_abilities(self, character: Any) -> List[PassiveAbility]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Å—Å–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π."""
        return [ability for ability in self.passive_abilities.values() if ability.is_available()]
    
    # ==================== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π ====================
    def use_ability(self, ability: Optional[ActiveAbility], character: Any, 
                   targets: List[Any], **kwargs: Any) -> AbilityResult:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä—è–º—É—é."""
        if ability and isinstance(ability, ActiveAbility) and ability.can_use(character, targets):
            return ability.use(character, targets, **kwargs)
        result = AbilityResult()
        result.success = False
        result.reason = "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π"
        return result
    
    # ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞–º–∏ ====================
    def update_cooldowns(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É–ª–¥–∞—É–Ω—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ –∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞."""
        for ability in self.active_abilities.values():
            if hasattr(ability, 'update_cooldown'):
                ability.update_cooldown()

    def reset_all_cooldowns(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∫—É–ª–¥–∞—É–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –¥–æ 0."""
        for ability in self.active_abilities.values():
            if hasattr(ability, 'current_cooldown'):
                ability.current_cooldown = 0
    
    # ==================== –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π ====================
    def create_ability_by_name(self, ability_name: str) -> Optional[Union[ActiveAbility, PassiveAbility]]:
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ AbilityLoader."""
        try:
            ability_class = self.ability_loader.get_class(ability_name)
            return ability_class()
        except (FileNotFoundError, ImportError, AttributeError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ '{ability_name}': {e}")
            return None
    
    # ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è–º–∏ ====================
    def level_up_ability(self, ability_name: str) -> int:
        """–ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ 1."""
        ability = self.get_ability(ability_name)
        if ability:
            return ability.level_up()
        return -1
    
    def set_ability_level(self, ability_name: str, level: int) -> int:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
        ability = self.get_ability(ability_name)
        if ability:
            return ability.set_level(level)
        return -1

    @staticmethod
    def get_random_elements(source_list: Iterable[T], count: int = 1) -> List[T]:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
        
        –ú–µ—Ç–æ–¥ –≤—ã–±–∏—Ä–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.
        –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
        
        Args:
            source_list: –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ (default: 1)
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.
            –î–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞: min(count, len(source_list)) –∏–ª–∏ 0 –µ—Å–ª–∏ source_list –ø—É—Å—Ç.
            
        Examples:
            >>> get_random_elements([1, 2, 3, 4, 5], 3)
            [2, 5, 1]  # —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
            >>> get_random_elements(['a', 'b'], 5)
            ['a', 'b']  # –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            
            >>> get_random_elements([], 2)
            []  # –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
        Note:
            - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç random.sample() –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å random.sample()
            - –ù–µ –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫
        source_as_list = list(source_list)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if not source_as_list:
            return []
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
        if len(source_as_list) <= count:
            return source_as_list.copy()
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        return random.sample(source_as_list, count)

- Characters/Abilities/descriptions.py
# abilities/descriptions.py

# –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —É–º–µ–Ω–∏–π
ABILITY_DESCRIPTIONS = {
    "SlidingStrike": (
        "–°–∫–æ–ª—å–∑—è—â–∏–π —É–¥–∞—Ä ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –±—å—ë—à—å –≤—Ä–∞–≥–∞, –∞ –∫–∞–∫ –±—ã ¬´—Å–ª—É—á–∞–π–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—à—å –º–∏–º–æ¬ª "
        "–∏ –æ—Å—Ç–∞–≤–ª—è–µ—à—å –∑–∞ —Å–æ–±–æ–π –Ω–µ —Ç–æ–ª—å–∫–æ –¥–≤–µ —Ä–∞–Ω—ã, –Ω–æ –∏ –ø–∞—Ä—É —è–¥–æ–≤–∏—Ç—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤. "
        "–†–∞–∑–±–æ–π–Ω–∏–∫ –≤—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–π, –±—É–¥—Ç–æ –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç –Ω–∞ —É–∂–∏–Ω, –∏ ‚Äî —Ä–∞–∑-–¥–≤–∞ ‚Äî —É–∂–µ –¥–≤–∞ –≤—Ä–∞–≥–∞ –∫–∞—à–ª—è—é—Ç –∑–µ–ª—ë–Ω–æ–π –ø–µ–Ω–æ–π, "
        "—Å–ø—Ä–∞—à–∏–≤–∞—è: ¬´–ê —ç—Ç–æ –±—ã–ª–æ –ø–æ –¥–µ–ª—É?¬ª –£–¥–∞—Ä –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Å–∫–æ–ª—å–∑–∫–∏–π, —á—Ç–æ –¥–∞–∂–µ –±—Ä–æ–Ω—è –∑–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è, —Å—Ç–æ–∏—Ç –ª–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è—Ç—å—Å—è. "
        "–ê –ø–æ–∫–∞ –æ–Ω–∞ –¥—É–º–∞–µ—Ç ‚Äî –≤ –Ω–µ—ë —É–∂–µ –≤—Ç–∏—Å–Ω—É–ª–∏ –∫–∏–Ω–∂–∞–ª –∏ –∫–∞–ø–Ω—É–ª–∏ —è–¥—É. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —É—Ä–æ–Ω, –Ω–æ –∏ —Å—Ç–∏–ª—å: "
        "–≤–µ–¥—å –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä –Ω–µ –ø—Ä–æ—Å—Ç–æ –∞—Ç–∞–∫—É–µ—Ç ‚Äî –æ–Ω –æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Ä–∞–≥–æ–≤ –Ω–µ–¥–æ—É–º—ë–Ω–Ω—ã–º–∏, –±–æ–ª—å–Ω—ã–º–∏ –∏ —Å–ª–µ–≥–∫–∞ –∑–µ–ª—ë–Ω—ã–º–∏."
    ),
    "FireStorm": (
        "–û–≥–Ω–µ–Ω–Ω—ã–π —à—Ç–æ—Ä–º ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –º–∞–≥ –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ä—É–∫–∏, –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç –ø–∞—Ä—É —Å–ª–æ–≤ –Ω–∞ –¥—Ä–µ–≤–Ω–µ–º —è–∑—ã–∫–µ, "
        "–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –≤—Å—ë –≤–æ–∫—Ä—É–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç –≥–æ—Ä–µ—Ç—å. –ù–µ –ø—Ä–æ—Å—Ç–æ –≥–æ—Ä–µ—Ç—å ‚Äî —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –≤ –ø–ª–∞–º–µ–Ω–∏. "
        "–í—Ä–∞–≥–∏ –±–µ–≥–∞—é—Ç, –∫–∞–∫ –∫—É—Ä–∏—Ü—ã –±–µ–∑ –≥–æ–ª–æ–≤—ã, –∞ –º–∞–≥ –ª–∏—à—å —É–ª—ã–±–∞–µ—Ç—Å—è: ¬´–ù—É —á—Ç–æ, –∫—Ç–æ —Ç—É—Ç —Ö–æ—Ç–µ–ª –ø–æ—Ç–µ–ø–ª–µ–µ?¬ª "
        "–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç –∂–∞—Ä–∫—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É‚Ä¶ –∏ –Ω–µ –ª—é–±–∏—Ç –≤—Ä–∞–≥–æ–≤."
    ),
    "FireBall": (
        "–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ. –≠—Ç–æ –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∫ –¥—É—à–∏: ¬´–Ø –∑–¥–µ—Å—å, —è –∑–æ–ª, –∏ —É –º–µ–Ω—è –µ—Å—Ç—å –æ–≥–æ–Ω—å!¬ª "
        "–ú–∞–≥ –≤–∑–º–∞—Ö–∏–≤–∞–µ—Ç –ø–æ—Å–æ—Ö–æ–º, –∫–∞–∫ –¥–∏—Ä–∏–∂—ë—Ä –ø–µ—Ä–µ–¥ –æ—Ä–∫–µ—Å—Ç—Ä–æ–º –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞, –∏ ‚Äî –±–∞—Ö! ‚Äî –∏–∑ –µ–≥–æ –ª–∞–¥–æ–Ω–∏ –≤—ã—Ä—ã–≤–∞–µ—Ç—Å—è —Ä–∞—Å–∫–∞–ª—ë–Ω–Ω—ã–π —Å–≥—É—Å—Ç–æ–∫, "
        "–Ω–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π —Å–æ–ª–Ω—Ü–µ, –µ—Å–ª–∏ –±—ã –æ–Ω–æ —Ä–µ—à–∏–ª–æ –æ—Ç–æ–º—Å—Ç–∏—Ç—å. "
        "–ü–æ–ª—ë—Ç —à–∞—Ä–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è —Å–≤–∏—Å—Ç–æ–º, —Ç—Ä–µ—Å–∫–æ–º –∏ –∫—Ä–∏–∫–∞–º–∏: ¬´–£–≤–æ—Ä–∞—á–∏–≤–∞–π—Å—è!¬ª ‚Äî –Ω–æ —É–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–∏–Ω–æ. "
        "–ù–∞ –¥–µ–ª–µ –≤—Ä–∞–≥ —É—Å–ø–µ–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥—É–º–∞—Ç—å: ¬´–û, –∫—Ä–∞—Å–∏–≤–æ‚Ä¶¬ª ‚Äî –∏ —É–∂–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ñ–∞–∫–µ–ª —Å–æ —Å—Ç–æ–Ω–æ–º: "
        "¬´–ù—É –∏ –∑–∞—á–µ–º —è —Å—é–¥–∞ –ø—Ä–∏—à—ë–ª?¬ª –ü–æ–¥–∂–∞—Ä–∏–≤–∞–µ—Ç, –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ—Ç —á—ë—Ä–Ω—ã–µ –ø—è—Ç–Ω–∞ –Ω–∞ –ø–æ–ª—É ‚Äî –∏ –¥–∞, –∏–Ω–æ–≥–¥–∞ –ø–æ–¥–∂–∏–≥–∞–µ—Ç "
        "—Å–æ—é–∑–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ —Ç–µ –≤—Å—Ç–∞–ª–∏ –Ω–µ —Ç–∞–º. –ù–æ —Ä–∞–∑–≤–µ —ç—Ç–æ –Ω–µ —á–∞—Å—Ç—å –≤–µ—Å–µ–ª—å—è? –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä ‚Äî –≤—ã–±–æ—Ä —Ç–µ—Ö, –∫—Ç–æ —Å—á–∏—Ç–∞–µ—Ç, "
        "—á—Ç–æ –ª—É—á—à–∞—è –∑–∞—â–∏—Ç–∞ ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ –ø–æ–¥–æ–∂–∂—ë–Ω–Ω—ã–π –≤—Ä–∞–≥."
    ),
    "Backstab": (
        "–£–¥–∞—Ä –≤ —Å–ø–∏–Ω—É ‚Äî –¥—Ä–µ–≤–Ω–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ, –ª—é–±–∏–º–æ–µ –≤—Å–µ–º–∏, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, "
        "–Ω–æ –∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏. –†–∞–∑–±–æ–π–Ω–∏–∫ –∫—Ä–∞–¥—ë—Ç—Å—è –∑–∞ –≤—Ä–∞–≥–æ–º, –∫–∞–∫ –±—É–¥—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –æ–±–µ–¥, "
        "–∏ ‚Äî –±–∞—Ö! ‚Äî –∫–∏–Ω–∂–∞–ª –≤ –ø–æ—á–∫—É. –ñ–µ—Ä—Ç–≤–∞ –¥–∞–∂–µ –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –æ–±–µ—Ä–Ω—É—Ç—å—Å—è: ¬´–ö—Ç–æ? –ß—Ç–æ? –ó–∞—á–µ–º?¬ª "
        "–ê –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø–∞–¥–∞–µ—Ç, –±–æ—Ä–º–æ—á–∞: ¬´–ù—É –∏ –Ω–æ–∂–∏—á–µ–∫‚Ä¶¬ª –ù–µ –¥–ª—è —Å–ª–∞–±–æ–Ω–µ—Ä–≤–Ω—ã—Ö, –Ω–µ –¥–ª—è –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã—Ö, "
        "–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —á–µ—Å—Ç–Ω–∞—è –¥—É—ç–ª—å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É–∂–µ –º—ë—Ä—Ç–≤."
    ),
    "SplashAttack": (
        "–ö–æ–≥–¥–∞ –æ–¥–∏–Ω –≤—Ä–∞–≥ ‚Äî —ç—Ç–æ –º–µ–ª–∫–æ, –∞ —Ö–æ—á–µ—Ç—Å—è –Ω–∞–∫—Ä—ã—Ç—å —Å—Ä–∞–∑—É –≤—Å—é –∫–æ–º–ø–∞–Ω–∏—é ‚Äî –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤—Ä–µ–º—è —É–¥–∞—Ä–Ω–æ–π –≤–æ–ª–Ω—ã. "
        "–ë–µ—Ä—Å–µ—Ä–∫ —Ä–∞–∑–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ø–æ—Ä–æ–º —Ç–∞–∫, —á—Ç–æ –≤–µ—Ç–µ—Ä —Å–≤–∏—Å—Ç–∏—Ç, –∏ –≤—Ä—É–±–∞–µ—Ç—Å—è –≤ –∑–µ–º–ª—é —Å –∫—Ä–∏–∫–æ–º: ¬´–ê –Ω—É, —Ä–∞–∑–ª–µ—Ç–µ–ª–∏—Å—å!¬ª "
        "–û—Ç —É–¥–∞—Ä–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—ã –ª–µ—Ç—è—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏, –Ω–æ –∏ –æ—Å–∫–æ–ª–∫–∏ –±—Ä–æ–Ω–∏, –∑—É–±—ã –∏ –æ–¥–Ω–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –ø–∏—Å—å–º–æ –∫ –º–∞–º–µ. "
        "–≠—Ñ—Ñ–µ–∫—Ç ¬´–ø–æ –ø–ª–æ—â–∞–¥–∏¬ª ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –±–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É, "
        "–∫–∞–∫ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä."
    ),
    "Heal": (
        "–ò–Ω–æ–≥–¥–∞ –≤–º–µ—Å—Ç–æ —É–¥–∞—Ä–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª–æ–∂–∏—Ç—å —Ä—É–∫—É –Ω–∞ –ø–ª–µ—á–æ –∏ —Å–∫–∞–∑–∞—Ç—å: ¬´–î–∞ –ª–∞–¥–Ω–æ, –±—Ä–∞—Ç, –≤—Å—ë –±—É–¥–µ—Ç¬ª. "
        "–¶–µ–ª–∏—Ç–µ–ª—å —Å–≤–µ—Ç–∏—Ç—Å—è, –∫–∞–∫ –Ω–æ–≤–æ–≥–æ–¥–Ω—è—è —ë–ª–∫–∞, –∏ –µ–≥–æ –ª–∞–¥–æ–Ω–∏ –∏—Å—Ç–æ—á–∞—é—Ç —Ç—ë–ø–ª—ã–π —Å–≤–µ—Ç, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–∞–∂–µ —à—Ä–∞–º—ã –≤–∑–¥—ã—Ö–∞—é—Ç —Å –æ–±–ª–µ–≥—á–µ–Ω–∏–µ–º. "
        "–†–∞–Ω–∞ –∑–∞—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è, –∫–æ—Å—Ç—å —Ö—Ä—É—Å—Ç–∏—Ç, –Ω–æ —É–∂–µ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–º—ã—Å–ª–µ, –∏ —Ä–∞–Ω–µ–Ω—ã–π –≤—Å—Ç–∞—ë—Ç, —Å–ø—Ä–∞—à–∏–≤–∞—è: "
        "¬´–Ø —á—Ç–æ, —É–º–∏—Ä–∞–ª? –ê, –Ω—É —Ç–æ–≥–¥–∞ —Å–ø–∞—Å–∏–±–æ¬ª. –õ—É—á—à–µ–µ —É–º–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –≤–µ—Ä–∏—Ç: —Å–ø–∞—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ ‚Äî —Å–ø–∞—Å—Ç–∏ –º–∏—Ä. "
        "–ù—É –∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ—Ç—Ä—è–¥."
    ),
    "MassHeal": (
        "–ö–æ–≥–¥–∞ –≤–µ—Å—å –æ—Ç—Ä—è–¥ –ª–µ–∂–∏—Ç, –∫–∞–∫ –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–µ—Ä—Ç–∞ —Ç—è–∂—ë–ª–æ–π –º–µ—Ç–∞–ª-–≥—Ä—É–ø–ø—ã, –∏ –¥–∞–∂–µ –º–µ—á–∏ —Å–ª–µ–≥–∫–∞ –¥—Ä–æ–∂–∞—Ç ‚Äî "
        "–ø—Ä–∏—Ö–æ–¥–∏—Ç –≤—Ä–µ–º—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏—Å—Ü–µ–ª–µ–Ω–∏—è. –ñ—Ä–µ—Ü –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ä—É–∫–∏ –∫ –Ω–µ–±—É –∏ –≥–æ–≤–æ—Ä–∏—Ç: ¬´–û, –í–µ–ª–∏–∫–∏–π –ë–æ–∂–æ–∫, "
        "–Ω—É —Ç—ã –∂–µ –Ω–µ –∑–ª–æ–π?¬ª ‚Äî –∏ –≤ –Ω–µ–±–µ –∑–∞–≥–æ—Ä–∞–µ—Ç—Å—è —Å–≤–µ—Ç, –∫–∞–∫ –±—É–¥—Ç–æ –≤–∫–ª—é—á–∏–ª–∏ —Å–æ–ª–Ω—Ü–µ –Ω–∞ –ø–æ–ª–Ω—É—é. "
        "–í–æ–ª–Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏ –ø—Ä–æ–Ω–æ—Å–∏—Ç—Å—è –ø–æ —Ä—è–¥–∞–º: –ø–µ—Ä–µ–ª–æ–º—ã —Å—Ä–∞—Å—Ç–∞—é—Ç—Å—è, —è–¥—ã –∏—Å–ø–∞—Ä—è—é—Ç—Å—è, –∞ –º–æ—Ä–∞–ª—å –≤–∑–ª–µ—Ç–∞–µ—Ç –¥–æ –Ω–µ–±–µ—Å. "
        "–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–Ω–æ–≤–∞ –º–æ–≥—É—Ç –¥—Ä–∞—Ç—å—Å—è, –±–µ–≥–∞—Ç—å –∏ —à—É—Ç–∏—Ç—å –ø—Ä–æ –≤—á–µ—Ä–∞—à–Ω–∏–π –æ–±–µ–¥. –ü–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–≥–¥–∞ –ª–µ—á–∞—Ç –≤—Å–µ—Ö ‚Äî "
        "—ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–∞–≥–∏—è. –≠—Ç–æ –Ω–∞–¥–µ–∂–¥–∞."
    ),
    "Rest": (
        "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–µ–µ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ, ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–µ—Å—Ç—å. –ò –º–æ–ª—á–∞—Ç—å. "
        "–ì–µ—Ä–æ–∏ —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞—é—Ç —Å–ø–∞–ª—å–Ω–∏–∫–∏, –∫–æ—Ç–µ–ª–æ–∫, –∏ –∫—Ç–æ-—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ ¬´—Ç—É —Å–∞–º—É—é –±–∏—Ç–≤—É —É –±–æ–ª–æ—Ç–∞¬ª. "
        "–ú–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, —Ä–∞–Ω—ã –∑–∞—Ç—è–≥–∏–≤–∞—é—Ç—Å—è, –∞ –º–∞–≥ –º–µ–∂–¥—É –¥–µ–ª–æ–º –ø–æ–¥–æ–≥—Ä–µ–≤–∞–µ—Ç —á–∞–π. "
        "–î–∞–∂–µ –¥–µ–º–æ–Ω—ã –Ω–µ —Ä–µ—à–∞—é—Ç—Å—è –º–µ—à–∞—Ç—å ‚Äî –æ–Ω–∏ —Ç–æ–∂–µ —É—Å—Ç–∞–ª–∏. –û—Ç–¥—ã—Ö ‚Äî –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å, –∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞. "
        "–ü–æ—Ç–æ–º—É —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç: ¬´–ê –Ω—É, –≤—Å—Ç–∞–≤–∞–π—Ç–µ! –¢–∞–º –¥—Ä–∞–∫–æ–Ω!¬ª"
    )
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞
def get_ability_description(ability_class_name: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —É–º–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞.

    :param ability_class_name: –ò–º—è –∫–ª–∞—Å—Å–∞ —É–º–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "SlidingStrike")
    :return: –û–ø–∏—Å–∞–Ω–∏–µ —É–º–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    return ABILITY_DESCRIPTIONS.get(ability_class_name, "–û–ø–∏—Å–∞–Ω–∏–µ —É–º–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

- Characters/Status_effects/__init__.py
from .burn_effect import BurnEffect
from .poison_effect import PoisonEffect

- Characters/Status_effects/burn_effect.py
# Characters/Status_effects/burn_effect.py

from typing import Dict, Any, List
from Config.curses_config import COLOR_BLUE, COLOR_GREEN, COLOR_RED, COLOR_WHITE, COLOR_YELLOW

from Battle.battle_logger import battle_logger
from Characters.Status_effects.effect_result import EffectResult, ApplyEffectResult
from Characters.Status_effects.status_effect import StackableStatusEffect
from Characters.Status_effects.status_manager import register_effect
from Characters.character import Character
from Config.game_config import EFFECT_LIST_ICON, SPACES_SECOND_LEVEL
from Utils.types import IEffectResult


class BurnEffect(StackableStatusEffect):
    """–≠—Ñ—Ñ–µ–∫—Ç –æ–∂–æ–≥–∞ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –∫–∞–∂–¥—ã–π —Ö–æ–¥ —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏"""
    
    def __init__(self, duration: int = 2, base_damage: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ–∂–æ–≥–∞.
        
        :param duration: –ë–∞–∑–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ —Ä–∞—É–Ω–¥–∞—Ö
        :param base_damage: –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –æ—Ç –æ–∂–æ–≥–∞ –∑–∞ —Ö–æ–¥ (—É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤)
        """
        super().__init__(
            name="–û–∂–æ–≥",
            duration=duration,
            description=f"–ù–∞–Ω–æ—Å–∏—Ç –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–π —É—Ä–æ–Ω –∫–∞–∂–¥—ã–π —Ö–æ–¥",
            icon="üî•"
        )
        self.base_damage = base_damage
        self.base_duration = duration  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.stacks = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∞
    
    def apply_effect(self, target: Character) -> IEffectResult:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞"""
        
        # –ü–µ—Ä–≤–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        apply_effect_result = ApplyEffectResult("burn")
        
        target_color = COLOR_GREEN if target.is_player else COLOR_BLUE

        template: str = f"{SPACES_SECOND_LEVEL}%1 %2 –ø–æ–ª—É—á–∞–µ—Ç %3"        
        elements: List[tuple] = [(EFFECT_LIST_ICON, COLOR_RED), 
            (target.name, target_color), ("–æ–∂–æ–≥", COLOR_RED)]
        message = battle_logger.create_log_message(template, elements)

        apply_effect_result.add_message(message)
        return apply_effect_result

    
    def update_effect(self, target: Character) -> EffectResult:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ö–æ–¥ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –æ—Ç –æ–∂–æ–≥–∞ —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º"""
        result: EffectResult = EffectResult()
        result.effect = 'burn_tick'
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–∫–æ–≤ (–ª–∏–Ω–µ–π–Ω—ã–π —Ä–æ—Å—Ç)
        current_damage =  self.get_total_effect_value(self.base_damage)
        target.take_damage(current_damage)
        result.total_damage = current_damage
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Ä–æ–Ω–µ
        damage_template = f"%1 %2 –ø–æ–ª—É—á–∞–µ—Ç %3 —É—Ä–æ–Ω–∞ –æ—Ç –æ–∂–æ–≥–∞"
        if self.stacks > 1:
            damage_template += f" ({self.stacks} —Å—Ç–∞–∫–æ–≤)"
            
        damage_elements: List[tuple] = [(self.icon, COLOR_WHITE), (target.name, COLOR_YELLOW), 
                                      (str(current_damage), COLOR_RED)]
        
        log_message = battle_logger.create_log_message(damage_template, damage_elements)
        result.messages.append(log_message)
        
        return result
    
    def remove_effect(self, target: Character) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        return {
            'message': f"–≠—Ñ—Ñ–µ–∫—Ç –æ–∂–æ–≥–∞ –Ω–∞ {target.name} –∏—Å—á–µ–∑",
            'effect': 'burn_removed'
        }

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ
register_effect(BurnEffect)

- Characters/Status_effects/effect_result.py
# Characters/Status_effects/effect_result.py
from typing import List, Any, Dict
from Utils.types import LoggerMessageType

class EffectResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞."""
    def __init__(self) -> None:
        self.success: bool = True
        self.messages: List[LoggerMessageType] = []
        self.details: Dict[str, Any] = {}

    def add_message(self, message: LoggerMessageType) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        self.messages.append(message)
        
    def set_success(self, success: bool) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞."""
        self.success = success
        
    def add_detail(self, key: str, value: Any) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        self.details[key] = value

class ApplyEffectResult:
    def __init__(self, effect: str) -> None:
        self.effect: str = effect
        self.message: LoggerMessageType = None

    def add_message(self, message: LoggerMessageType) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        self.message = message

- Characters/Status_effects/poison_effect.py
# Characters/Status_effects/poison_effect.py
from typing import Dict, Any, List
from Config.curses_config import COLOR_BLUE, COLOR_GREEN, COLOR_RED, COLOR_WHITE, COLOR_YELLOW

from Battle.battle_logger import battle_logger
from Characters.Status_effects.effect_result import ApplyEffectResult, EffectResult
from Characters.Status_effects.status_effect import StackableStatusEffect
from Characters.Status_effects.status_manager import register_effect
from Characters.character import Character
from Config.game_config import EFFECT_LIST_ICON, SPACES_SECOND_LEVEL
from Utils.types import IEffectResult


class PoisonEffect(StackableStatusEffect):
    """–≠—Ñ—Ñ–µ–∫—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –∫–∞–∂–¥—ã–π —Ö–æ–¥ —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º"""
    
    def __init__(self, duration: int = 3, base_damage: int = 5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è.
        
        :param duration: –ë–∞–∑–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ —Ä–∞—É–Ω–¥–∞—Ö
        :param base_damage: –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –æ—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞ —Ö–æ–¥ (—É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤)
        """
        super().__init__(
            name="–û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ",
            duration=duration,
            description=f"–ù–∞–Ω–æ—Å–∏—Ç –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–π —É—Ä–æ–Ω –∫–∞–∂–¥—ã–π —Ö–æ–¥",
            icon="‚ò†Ô∏è"
        )
        self.base_damage = base_damage
        self.base_duration = duration  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.stacks = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∞
    
    def apply_effect(self, target: Character) -> IEffectResult:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞"""
        
        # –ü–µ—Ä–≤–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        apply_effect_result = ApplyEffectResult("poison")
        
        target_color = COLOR_GREEN if target.is_player else COLOR_BLUE

        template: str = f"{SPACES_SECOND_LEVEL}%1 %2 –ø–æ–ª—É—á–∞–µ—Ç %3"        
        elements: List[tuple] = [(EFFECT_LIST_ICON, COLOR_RED), 
            (target.name, target_color), ("–æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ", COLOR_GREEN)]
        message = battle_logger.create_log_message(template, elements)

        apply_effect_result.add_message(message)
        return apply_effect_result

    
    def update_effect(self, target: Character) -> EffectResult:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ö–æ–¥ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –æ—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º"""
        result: EffectResult = EffectResult()
        result.effect = 'poison_tick'
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–∫–æ–≤ (–ª–∏–Ω–µ–π–Ω—ã–π —Ä–æ—Å—Ç)
        current_damage = self.get_total_effect_value(self.base_damage)
        target.take_damage(current_damage)
        result.total_damage = current_damage
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Ä–æ–Ω–µ
        damage_template = f"%1 %2 –ø–æ–ª—É—á–∞–µ—Ç %3 —É—Ä–æ–Ω–∞ –æ—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è"
        if self.stacks > 1:
            damage_template += f" ({self.stacks} —Å—Ç–∞–∫–æ–≤)"
            
        damage_elements: List[tuple] = [(self.icon, COLOR_WHITE), (target.name, COLOR_YELLOW), 
                                      (str(current_damage), COLOR_RED)]
        
        log_message = battle_logger.create_log_message(damage_template, damage_elements)
        result.messages.append(log_message)
        
        return result
    
    def remove_effect(self, target: Character) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        return {
            'message': f"–≠—Ñ—Ñ–µ–∫—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ {target.name} –∏—Å—á–µ–∑",
            'effect': 'poison_removed'
        }

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ
register_effect(PoisonEffect)

- Characters/Status_effects/status_effect.py
# Characters/Status_effects/status_effect.py
from abc import ABC, abstractmethod
from typing import List, Dict, Any, Optional
from Characters.character import Character

class StatusEffect(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤."""
    
    def __init__(self, name: str, duration: int, description: str = "", icon: str = ""):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç–∞.
        
        :param name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        :param duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ —Ä–∞—É–Ω–¥–∞—Ö (-1 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö)
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        :param icon: –ò–∫–æ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
        """
        self.name = name
        self.duration = duration  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        self.description = description
        self.icon = icon
        self.applied = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        
    @abstractmethod
    def apply_effect(self, target: Character) -> Dict[str, Any]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∫ —Ü–µ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–ª–æ–∂–µ–Ω–∏–∏.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞.
        
        :param target: –¶–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∞ (–ø–µ—Ä—Å–æ–Ω–∞–∂)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ (—Å–æ–æ–±—â–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–æ–≤ –∏ —Ç.–¥.)
        """
        pass
    
    @abstractmethod
    def update_effect(self, target: Character) -> Dict[str, Any]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ —Ü–µ–ª–∏ –∫–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥, –ø–æ–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω.
        
        :param target: –¶–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∞ (–ø–µ—Ä—Å–æ–Ω–∞–∂)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ (—É—Ä–æ–Ω, —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç.–¥.)
        """
        pass
    
    @abstractmethod
    def remove_effect(self, target: Character) -> Dict[str, Any]:
        """
        –£–¥–∞–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å —Ü–µ–ª–∏.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–ª–∏ –µ–≥–æ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏.
        
        :param target: –¶–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∞ (–ø–µ—Ä—Å–æ–Ω–∞–∂)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç.–¥.)
        """
        pass
    
    def tick(self, target: Character) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –≤ –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ.
        –£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã.
        
        :param target: –¶–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∞ (–ø–µ—Ä—Å–æ–Ω–∞–∂)
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞
        """
        if not self.applied:
            self.applied = True

        
        if self.duration > 0:
            self.duration -= 1
            
        result = self.update_effect(target)
            
        return result
    
    def is_expired(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞.
        
        :return: True –µ—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –∏—Å—Ç–µ–∫, False –µ—Å–ª–∏ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        """
        return self.duration == 0
    
    def get_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ.
        
        :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ
        """
        return {
            'name': self.name,
            'duration': self.duration,
            'description': self.description,
            'icon': self.icon,
            'applied': self.applied
        }
        
    def extend_duration(self) -> None:
        """
        –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞.
        
        :param rounds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        """
        if self.duration > 0:
            self.duration = self.base_duration
                
    def set_duration(self, duration: int) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞.
        
        :param duration: –ù–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞
        """
        self.duration = duration


class StackableStatusEffect(StatusEffect):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞–∫–∞—é—â–∏—Ö—Å—è —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤."""
    
    def __init__(self, name: str, duration: int, description: str = "", icon: str = ""):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–∫–∞—é—â–µ–≥–æ—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∞.
        
        :param name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        :param duration: –ë–∞–∑–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ —Ä–∞—É–Ω–¥–∞—Ö
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        :param icon: –ò–∫–æ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
        """
        super().__init__(name=name, duration=duration, description=description, icon=icon)
        self.stacks: int = 0
        self.max_stacks: int = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
    def add_stack(self, stacks: int = 1) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞–∫–∏ –∫ —ç—Ñ—Ñ–µ–∫—Ç—É.
        
        :param stacks: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        :return: True –µ—Å–ª–∏ —Å—Ç–∞–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã, False –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        """
        if self.stacks < self.max_stacks:
            self.stacks = min(self.stacks + stacks, self.max_stacks)
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–∫–æ–≤
            self.extend_duration()
            return True
        return False
    
    def remove_stack(self, stacks: int = 1) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞–∫–∏ –∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞.
        
        :param stacks: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∫–æ–≤
        """
        removed_stacks = min(stacks, self.stacks)
        self.stacks = max(1, self.stacks - stacks)  # –ú–∏–Ω–∏–º—É–º 1 —Å—Ç–∞–∫
        return removed_stacks
    
    def get_stack_multiplier(self) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–∫–æ–≤.
        
        :return: –ú–Ω–æ–∂–∏—Ç–µ–ª—å (1.0 –¥–ª—è 1 —Å—Ç–∞–∫–∞, 1.5 –¥–ª—è 2 —Å—Ç–∞–∫–æ–≤ –∏ —Ç.–¥.)
        """
        return 1.0 + (self.stacks - 1) * 0.5  # –ö–∞–∂–¥—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–∫ –¥–∞–µ—Ç +50%
    
    def get_total_effect_value(self, base_value: int) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–∫–æ–≤.
        
        :param base_value: –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        :return: –ò—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–∫–æ–≤
        """
        return int(base_value * self.get_stack_multiplier())
    
    def get_stacks_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∫–∞—Ö —ç—Ñ—Ñ–µ–∫—Ç–∞.
        
        :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞–∫–∞—Ö
        """
        return {
            'stacks': self.stacks,
            'max_stacks': self.max_stacks,
            'multiplier': self.get_stack_multiplier()
        }
    
    def reset_stacks(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤ –¥–æ 1."""
        self.stacks = 1
    
    def is_max_stacks(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–æ–≤."""
        return self.stacks >= self.max_stacks


- Characters/Status_effects/status_manager.py
# Characters/Status_effects/status_manager.py
from typing import List, Dict, Any, Optional, TYPE_CHECKING

from Characters.Status_effects.status_effect import StackableStatusEffect
from Utils.types import IApplyEffectResult

if TYPE_CHECKING:
    from Characters.character import Character
    from Characters.Status_effects.status_effect import StatusEffect

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
_EFFECT_REGISTRY = {}

def register_effect(effect_class):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ"""
    _EFFECT_REGISTRY[effect_class.__name__] = effect_class
    return effect_class

def get_effect_class_by_name(effect_class_name: str) -> Optional[type]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞—Å—Å —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"""
    return _EFFECT_REGISTRY.get(effect_class_name)

class StatusEffectManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    
    def __init__(self, character: 'Character'):
        self.character = character
        self.active_effects: List = []  # List[StatusEffect] - —Ç–∏–ø –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –ø–æ–∑–∂–µ
        
    def _get_status_effect_type(self):
        """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ StatusEffect"""
        if not hasattr(self, '_status_effect_class'):
            from Characters.Status_effects.status_effect import StatusEffect
            self._status_effect_class = StatusEffect
        return self._status_effect_class
        
    def add_effect(self, effect, target) -> IApplyEffectResult:  # effect: StatusEffect
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É.
        
        :param effect: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç
        existing_effect = self.get_effect(effect)
 
        if existing_effect:
            # –ï—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–¥–ª—è–µ–º –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ
            existing_effect.extend_duration()
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            self.active_effects.append(effect)
            existing_effect = effect

        if isinstance(effect, StackableStatusEffect):
            existing_effect.add_stack()

        return effect.apply_effect(target)

    
    def remove_effect(self, effect_name: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –∏–º–µ–Ω–∏.
        
        :param effect_name: –ò–º—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        :return: True –µ—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç —É–¥–∞–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        for i, effect in enumerate(self.active_effects):
            if effect.name == effect_name:
                effect.remove_effect(self.character)
                del self.active_effects[i]
                return True
        return False
    
    def get_effect(self, effect: 'StatusEffect') -> Optional['StatusEffect']:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç.
        :return: –≠–∫–∑–µ–º–ø–ª—è—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        for active_effect in self.active_effects:
            if active_effect.__class__ == effect.__class__:
                return active_effect
        return None
    
    def update_effects(self) -> List[Dict[str, Any]]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞.
        
        :return: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        """
        results = []
        expired_effects = []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        for effect in self.active_effects:
            result = effect.tick(self.character)
            results.append(result)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç
            if effect.is_expired():
                expired_effects.append(effect)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        for effect in expired_effects:
            if effect in self.active_effects:
                self.active_effects.remove(effect)
            
        return results
    
    def has_effect(self, effect_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç.
        
        :param effect_name: –ò–º—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        :return: True –µ—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –µ—Å—Ç—å, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        return any(effect.name == effect_name for effect in self.active_effects)
    
    def get_all_effects(self) -> List:  # List[StatusEffect]
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
        
        :return: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        """
        return self.active_effects.copy()
    
    def clear_all_effects(self) -> List[Dict[str, Any]]:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã.
        
        :return: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        """
        results = []
        for effect in self.active_effects.copy():
            result = effect.remove_effect(self.character)
            results.append(result)
        self.active_effects.clear()
        return results
    
    def get_effect_class_by_name(self, effect_class_name: str) -> Optional[type]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞—Å—Å —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞.
        
        :param effect_class_name: –ò–º—è –∫–ª–∞—Å—Å–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
        :return: –ö–ª–∞—Å—Å —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        return get_effect_class_by_name(effect_class_name)

- Characters/Abilities/Attack_abilities/attack.py
# Characters/Abilities/basic_attack.py

from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult

class Attack(ActiveAbility):
    """–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    def __init__(self):
        super().__init__(
            name="–ê—Ç–∞–∫–∞", 
            damage_scale=1.0, 
            cooldown=0, 
            energy_cost=10, 
            description="–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞",
            icon="‚öîÔ∏è"
        )
        self.set_level(1)
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—É—é –∞—Ç–∞–∫—É –ø–æ –æ–¥–Ω–æ–π —Ü–µ–ª–∏."""
        result = AbilityResult()
        result.ability_type = "basic_attack"
        result.character = character.name
        
        if not targets:
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∂–∏–≤—É—é —Ü–µ–ª—å
        target = None
        for t in targets:
            if t.is_alive():
                target = t
                break
        
        if not target:
            result.success = False
            result.reason = '–ù–µ—Ç –∂–∏–≤—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        result.targets = [target.name]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ —Å—Ä–∞–∑—É
        base_damage = int(character.derived_stats.attack * self.damage_scale)
        mechanics_results = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if mechanics_results['dodge_success']:
            # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–µ—Ö–∞–Ω–∏–∫
            result.messages = [mechanics_results['dodge_message']]
            result.details['dodge'] = True
            result.details['target_alive'] = target.is_alive()
        else:
            # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
            actual_damage = mechanics_results['final_damage']
            # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
            target.take_damage(actual_damage)
            
            result.damage_dealt = actual_damage
            result.total_damage = actual_damage
            result.details['damage_blocked'] = mechanics_results['blocked_damage']
            result.is_critical = mechanics_results['critical_hit']
            result.details['target_alive'] = target.is_alive()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞—Ç–∞–∫–µ
            result.messages = [self._create_attack_message(
                character, target, damage=actual_damage, 
                blocked=mechanics_results['blocked_damage'], 
                is_critical=mechanics_results['critical_hit']
            )]
        
        return result
    
    def _create_attack_message(self, character, target, damage=0, blocked=0, is_critical=False):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞—Ç–∞–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
        if is_critical:
            template = "%1 %2 –∞—Ç–∞–∫—É–µ—Ç %3 –∏ –Ω–∞–Ω–æ—Å–∏—Ç %4 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û —É—Ä–æ–Ω–∞ (%5 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) %6"
            crit_text = "üí•" if damage > 0 else ""
            if character.is_player:
                elements = [(self.icon, 0), (character.name, 2), (target.name, 4), (str(damage), 1), (str(blocked), 3), (crit_text, 0)]
            else:
                elements = [(self.icon, 0), (character.name, 4), (target.name, 2), (str(damage), 1), (str(blocked), 3), (crit_text, 0)]
        else:
            template = "%1 %2 –∞—Ç–∞–∫—É–µ—Ç %3 –∏ –Ω–∞–Ω–æ—Å–∏—Ç %4 —É—Ä–æ–Ω–∞ (%5 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
            if character.is_player:
                elements = [(self.icon, 0), (character.name, 2), (target.name, 4), (str(damage), 1), (str(blocked), 3)]
            else:
                elements = [(self.icon, 0), (character.name, 4), (target.name, 2), (str(damage), 1), (str(blocked), 3)]
            
        return battle_logger.create_log_message(template, elements)
    
    def check_specific_conditions(self, character, targets):
        return True

- Characters/Abilities/Attack_abilities/backstab.py
# characters/abilities/attack/backstab.py

from typing import List, Dict, Any, Optional
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult
from Characters.character import Character
from Config.curses_config import COLOR_GREEN, COLOR_BLUE, COLOR_RED, COLOR_YELLOW
from Config.game_config import DAMAGE_LIST_ICON

class Backstab(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –£–¥–∞—Ä –≤ —Å–ø–∏–Ω—É - –º–æ—â–Ω–∞—è –æ–¥–∏–Ω–æ—á–Ω–∞—è –∞—Ç–∞–∫–∞ —Å –±–æ–Ω—É—Å–æ–º –∫ —É—Ä–æ–Ω—É"""
    
    def __init__(self) -> None:
        super().__init__(
            name="–£–¥–∞—Ä –≤ —Å–ø–∏–Ω—É",
            damage_scale=1.8,  # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω
            cooldown=4,
            energy_cost=30,
            description="–ú–æ—â–Ω–∞—è –∞—Ç–∞–∫–∞ –≤ —Å–ø–∏–Ω—É, –Ω–∞–Ω–æ—Å—è—â–∞—è —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω",
            icon="üî™"
        )
    
    def execute(self, character: Character, targets: List[Character], **kwargs: Any) -> AbilityResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞—Ä –≤ —Å–ø–∏–Ω—É –ø–æ –æ–¥–Ω–æ–π —Ü–µ–ª–∏."""
        result: AbilityResult = AbilityResult()
        result.ability_type = "backstab"
        result.character = character.name
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å (–æ–¥–∏–Ω–æ—á–Ω–∞—è –∞—Ç–∞–∫–∞)
        if not targets or not targets[0].is_alive():
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        target: Character = targets[0]
        result.targets = [target.name]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω —Å –±–æ–Ω—É—Å–æ–º
        base_damage: int = int(character.derived_stats.attack * self.damage_scale)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template: str = "%1 %2 –∑–∞—Ö–æ–¥–∏—Ç –∑–∞ —Å–ø–∏–Ω—É %3"
        elements: List[tuple] = [(self.icon, 0), (character.name, COLOR_GREEN), (target.name, COLOR_BLUE)]
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏
        mechanics_results: Dict[str, Any] = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
        
        target_info: Dict[str, Any] = {
            'damage_dealt': 0,
            'damage_blocked': 0,
            'is_critical': False,
            'dodge': mechanics_results['dodge_success'],
            'target_alive': target.is_alive()
        }
        
        if mechanics_results['dodge_success']:
            # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
            target_info['message'] = mechanics_results['dodge_message']
            dodge_template: str = "  üî∏ %1 –∑–∞–º–µ—á–∞–µ—Ç –∞—Ç–∞–∫—É –∏ —É–∫–ª–æ–Ω—è–µ—Ç—Å—è!"
            dodge_elements: List[tuple] = [(target.name, 4)]
            result.messages.append(battle_logger.create_log_message(dodge_template, dodge_elements))
            result.success = False
        else:
            # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
            actual_damage: int = mechanics_results['final_damage']
            # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
            target.take_damage(actual_damage)
            
            target_info['damage_dealt'] = actual_damage
            target_info['damage_blocked'] = mechanics_results['blocked_damage']
            target_info['is_critical'] = mechanics_results['critical_hit']
            target_info['target_alive'] = target.is_alive()
            
            result.total_damage = actual_damage
            result.success = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Ä–æ–Ω–µ
            if mechanics_results['critical_hit']:
                damage_template: str = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û —É—Ä–æ–Ω–∞ –≤ —Å–ø–∏–Ω—É (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) üí•"
            else:
                damage_template: str = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 —É—Ä–æ–Ω–∞ –≤ —Å–ø–∏–Ω—É (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
                
            damage_elements: List[tuple] = [(target.name, COLOR_BLUE), 
                    (str(actual_damage), COLOR_RED), (str(mechanics_results['blocked_damage']), COLOR_YELLOW)]
            


            result.messages.append(battle_logger.create_log_message(damage_template, damage_elements))
        
        result.details['target_info'] = target_info
        return result
    
    def check_specific_conditions(self, character: Character, targets: List[Character]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–µ–Ω–∏—è"""
        # –£–¥–∞—Ä –≤ —Å–ø–∏–Ω—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ç–∏–≤ –æ–¥–Ω–æ–π —Ü–µ–ª–∏
        return True

- Characters/Abilities/Attack_abilities/fireball.py
# characters/abilities/attack/fireball.py

from typing import List, Dict, Any
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult
from Characters.character import Character
from Config.curses_config import COLOR_GREEN, COLOR_BLUE, COLOR_RED, COLOR_YELLOW
from Config.game_config import DAMAGE_LIST_ICON
from Utils.types import IApplyEffectResult


class Fireball(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä - –º–æ—â–Ω–∞—è –æ–¥–∏–Ω–æ—á–Ω–∞—è –∞—Ç–∞–∫–∞ –æ–≥–Ω—ë–º"""
    
    def __init__(self) -> None:
        super().__init__(
            name="–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä",
            damage_scale=0.8,  # —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω
            cooldown=1,
            energy_cost=5,
            description="–ú–æ—â–Ω—ã–π –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä, –Ω–∞–Ω–æ—Å—è—â–∏–π —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω –æ–¥–Ω–æ–π —Ü–µ–ª–∏",
            icon="üî•"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ–∂–æ–≥–∞ –∫ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        self.add_effect_by_class_name("BurnEffect")
    
    def execute(self, character: Character, targets: List[Character], **kwargs: Any) -> AbilityResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–≥–Ω–µ–Ω–Ω—É—é –∞—Ç–∞–∫—É –ø–æ –æ–¥–Ω–æ–π —Ü–µ–ª–∏.
        
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        :param targets: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π (–±–µ—Ä–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è)
        :param kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        """
        result: AbilityResult = AbilityResult()
        result.ability_type = "fireball"
        result.character = character
        result.targets = targets
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å (–æ–¥–∏–Ω–æ—á–Ω–∞—è –∞—Ç–∞–∫–∞)
        if not targets or not targets[0].is_alive():
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        target: Character = targets[0]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage: int = int(character.stats.intelligence * self.damage_scale)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template: str = "%1 %2 –≤—ã–ø—É—Å–∫–∞–µ—Ç –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä –≤ %3"
        elements: List[tuple] = [(self.icon, 0), (character.name, COLOR_GREEN), (target.name, COLOR_BLUE)]
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏
        mechanics_results: Dict[str, Any] = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
        
        target_info: Dict[str, Any] = {
            'damage_dealt': 0,
            'damage_blocked': 0,
            'is_critical': False,
            'dodge': mechanics_results['dodge_success'],
            'target_alive': target.is_alive()
        }
        
        if mechanics_results['dodge_success']:
            # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
            target_info['message'] = mechanics_results['dodge_message']
            dodge_template: str = "  üî∏ %1 —É–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —à–∞—Ä–∞!"
            dodge_elements: List[tuple] = [(target.name, COLOR_BLUE)]
            result.messages.append(battle_logger.create_log_message(dodge_template, dodge_elements))
            result.success = False
        else:
            # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
            actual_damage: int = mechanics_results['final_damage']
            # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
            target.take_damage(actual_damage)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º
            apply_effect_result_list: List[IApplyEffectResult] = []
            if target.is_alive():
                apply_effect_result_list = self.apply_effects_with_chance(target, chance=1.0)  # 100% —à–∞–Ω—Å –Ω–∞–ª–æ–∂–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç

            target_info['damage_dealt'] = actual_damage
            target_info['damage_blocked'] = mechanics_results['blocked_damage']
            target_info['is_critical'] = mechanics_results['critical_hit']
            target_info['target_alive'] = target.is_alive()
            
            result.total_damage = actual_damage
            result.success = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Ä–æ–Ω–µ
            damage_template: str = ""
            if mechanics_results['critical_hit']:
                damage_template = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) üí•"
            else:
                damage_template = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
                
            damage_elements: List[tuple] = [(target.name, COLOR_BLUE), 
                                          (str(actual_damage), COLOR_RED), 
                                          (str(mechanics_results['blocked_damage']), COLOR_YELLOW)]
            
            message = battle_logger.create_log_message(damage_template, damage_elements)
            result.messages.append(message)
            
            for apply_effect_result in apply_effect_result_list:
                result.messages.append(apply_effect_result.message)
            
        result.details['target_info'] = target_info
        return result
    
    def check_specific_conditions(self, character: Character, targets: List[Character]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–µ–Ω–∏—è.
        
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        :param targets: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        :return: True –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        # –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ç–∏–≤ –æ–¥–Ω–æ–π —Ü–µ–ª–∏ - –ø–æ–∫–∞ –æ—Ç—Å—Ç–∞–≤–∏—Ç—å
        return True #len(targets) <= 1 and len(targets) > 0

- Characters/Abilities/Attack_abilities/firestorm.py
# characters/abilities/attack/fire_storm.py

from typing import List, Dict, Any
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult
from Characters.character import Character
from Config.curses_config import COLOR_GREEN, COLOR_BLUE, COLOR_RED, COLOR_YELLOW
from Config.game_config import DAMAGE_LIST_ICON
from Utils.types import IApplyEffectResult


class FireStorm(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –û–≥–Ω–µ–Ω–Ω—ã–π —à—Ç–æ—Ä–º - –º–æ—â–Ω–∞—è –º–∞—Å—Å–æ–≤–∞—è –∞—Ç–∞–∫–∞ –æ–≥–Ω—ë–º –ø–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º"""
    
    def __init__(self) -> None:
        super().__init__(
            name="–û–≥–Ω–µ–Ω–Ω—ã–π —à—Ç–æ—Ä–º",
            damage_scale=0.6,  # –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ —É—Ä–æ–Ω–∞ –∏–∑-–∑–∞ –º–∞—Å—Å–æ–≤–æ—Å—Ç–∏
            cooldown=3,        # –±–æ–ª—å—à–∏–π –∫—É–ª–¥–∞—É–Ω –∏–∑-–∑–∞ –º–æ—â–Ω–æ—Å—Ç–∏
            energy_cost=12,    # –≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏
            description="–ú–æ—â–Ω—ã–π –æ–≥–Ω–µ–Ω–Ω—ã–π —à—Ç–æ—Ä–º, –Ω–∞–Ω–æ—Å—è—â–∏–π —É—Ä–æ–Ω –≤—Å–µ–º –≤—Ä–∞–≥–∞–º",
            icon="üå™Ô∏è",
            is_mass=True       # –º–∞—Å—Å–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        )
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ–∂–æ–≥–∞ –∫ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        self.add_effect_by_class_name("BurnEffect")
    
    def execute(self, character: Character, targets: List[Character], **kwargs: Any) -> AbilityResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–≥–Ω–µ–Ω–Ω—É—é –∞—Ç–∞–∫—É –ø–æ –≤—Å–µ–º —Ü–µ–ª—è–º.
        
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        :param targets: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–µ–ª–µ–π
        :param kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        """
        result: AbilityResult = AbilityResult()
        result.ability_type = "fire_storm"
        result.character = character
        result.targets = targets
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∂–∏–≤—ã—Ö —Ü–µ–ª–µ–π
        alive_targets = [target for target in targets if target.is_alive()]
        if not alive_targets:
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage: int = int(character.stats.intelligence * self.damage_scale)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template: str = "%1 %2 –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –æ–≥–Ω–µ–Ω–Ω—ã–π —à—Ç–æ—Ä–º!"
        elements: List[tuple] = [(self.icon, 0), (character.name, COLOR_GREEN), ("", 0)]
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result.total_damage = 0
        total_effects_applied = 0
        
        # –ê—Ç–∞–∫—É–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å
        for target in alive_targets:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
            mechanics_results: Dict[str, Any] = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
            
            if mechanics_results['dodge_success']:
                # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
                dodge_template: str = "  üî∏ %1 —É–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —à—Ç–æ—Ä–º–∞!"
                dodge_elements: List[tuple] = [(target.name, COLOR_BLUE)]
                result.messages.append(battle_logger.create_log_message(dodge_template, dodge_elements))
            else:
                # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                actual_damage: int = mechanics_results['final_damage']
                target.take_damage(actual_damage)

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º
                apply_effect_result_list: List[IApplyEffectResult] = []
                if target.is_alive():
                    apply_effect_result_list = self.apply_effects_with_chance(target, chance=0.7)  # 70% —à–∞–Ω—Å –Ω–∞–ª–æ–∂–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç

                result.total_damage += actual_damage
                total_effects_applied += len(apply_effect_result_list)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Ä–æ–Ω–µ
                damage_template: str = ""
                if mechanics_results['critical_hit']:
                    damage_template = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) üí•"
                else:
                    damage_template = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
                    
                damage_elements: List[tuple] = [(target.name, COLOR_BLUE), 
                                              (str(actual_damage), COLOR_RED), 
                                              (str(mechanics_results['blocked_damage']), COLOR_YELLOW)]
                
                message = battle_logger.create_log_message(damage_template, damage_elements)
                result.messages.append(message)
                
                for apply_effect_result in apply_effect_result_list:
                    result.messages.append(apply_effect_result.message)
        
        result.success = True
        result.details['targets_hit'] = len(alive_targets)
        result.details['effects_applied'] = total_effects_applied
        
        return result
    
    def check_specific_conditions(self, character: Character, targets: List[Character]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–µ–Ω–∏—è.
        
        :param character: –ü–µ—Ä—Å–æ–Ω–∞–∂, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        :param targets: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        :return: True –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        # –û–≥–Ω–µ–Ω–Ω—ã–π —à—Ç–æ—Ä–º –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Ç–∏–≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–µ–ª–µ–π
        return True

- Characters/Abilities/Attack_abilities/sliding_strike.py
# characters/abilities/attack/sliding_strike.py

from typing import List, Dict, Any
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult
from Characters.character import Character
from Config.curses_config import COLOR_GREEN, COLOR_BLUE, COLOR_RED, COLOR_YELLOW
from Config.game_config import DAMAGE_LIST_ICON
from Utils.types import IApplyEffectResult

class SlidingStrike(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –°–∫–æ–ª—å–∑—è—â–∏–π —É–¥–∞—Ä - –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–∫–≤–æ–∑—å –≤—Ä–∞–≥–æ–≤, –∞—Ç–∞–∫—É—è 2—Ö"""
    
    def __init__(self) -> None:
        super().__init__(
            name="–°–∫–æ–ª—å–∑—è—â–∏–π —É–¥–∞—Ä",
            is_mass=True,
            damage_scale=0.55,  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –∑–∞ –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞–≥–∞
            cooldown=4,
            energy_cost=25,
            description="–ü—Ä–æ—Ö–æ–¥–∏—Ç —Å–∫–≤–æ–∑—å –≤—Ä–∞–≥–æ–≤, –∞—Ç–∞–∫—É—è 2—Ö –Ω–∞ –ø—É—Ç–∏",
            icon="üó°Ô∏è"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        self.add_effect_by_class_name("PoisonEffect")
    
    def execute(self, character: 'Character', targets: List[Character], **kwargs: Any) -> AbilityResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫–æ–ª—å–∑—è—â–∏–π —É–¥–∞—Ä –ø–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º."""
        result: AbilityResult = AbilityResult()
        result.ability_type = "sliding_strike"
        result.character = character
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∏–≤—ã–µ —Ü–µ–ª–∏
        alive_targets = [target for target in targets if target.is_alive()]
        
        if not alive_targets:
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        chosen_targets = character.ability_manager.get_random_elements(alive_targets, 2)
        result.targets = chosen_targets
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage: int = int(character.derived_stats.attack * self.damage_scale)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template: str = "%1 %2 —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Å–∫–æ–ª—å–∑—è—â–∏–π —É–¥–∞—Ä –ø–æ –≤—Ä–∞–≥–∞–º!"
        elements: List[tuple] = [(self.icon, 0), (character.name, COLOR_GREEN)]
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        # –ê—Ç–∞–∫—É–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å
        total_damage = 0
        target_details = {}
        
        for target in chosen_targets:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
            mechanics_results: Dict[str, Any] = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
            
            target_info: Dict[str, Any] = {
                'damage_dealt': 0,
                'damage_blocked': 0,
                'is_critical': False,
                'dodge': mechanics_results['dodge_success'],
                'target_alive': target.is_alive()
            }
            
            if mechanics_results['dodge_success']:
                # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
                target_info['message'] = mechanics_results['dodge_message']
                dodge_template: str = "  üî∏ %1 —É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —É–¥–∞—Ä–∞!"
                dodge_elements: List[tuple] = [(target.name, COLOR_BLUE)]
                result.messages.append(battle_logger.create_log_message(dodge_template, dodge_elements))
            else:
                # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                actual_damage: int = mechanics_results['final_damage']
                # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
                target.take_damage(actual_damage)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º
                apply_effect_result_list: List[IApplyEffectResult] = []
                if target.is_alive():
                    apply_effect_result_list = self.apply_effects_with_chance(target, chance=0.7)  # 100% —à–∞–Ω—Å –Ω–∞–ª–æ–∂–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç


                target_info['damage_dealt'] = actual_damage
                target_info['damage_blocked'] = mechanics_results['blocked_damage']
                target_info['is_critical'] = mechanics_results['critical_hit']
                target_info['target_alive'] = target.is_alive()
                
                total_damage += actual_damage
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Ä–æ–Ω–µ
                damage_template: str = ""
                if mechanics_results['critical_hit']:
                    damage_template = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û —É—Ä–æ–Ω–∞ –æ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —É–¥–∞—Ä–∞! (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) üí•"
                else:
                    damage_template = f"  {DAMAGE_LIST_ICON} %1 –ø–æ–ª—É—á–∞–µ—Ç %2 —É—Ä–æ–Ω–∞ –æ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —É–¥–∞—Ä–∞. (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
                
                damage_elements: List[tuple] = [(target.name, COLOR_BLUE), 
                                              (str(actual_damage), COLOR_RED), 
                                              (str(mechanics_results['blocked_damage']), COLOR_YELLOW)]
                
                result.messages.append(battle_logger.create_log_message(damage_template, damage_elements))

                for apply_effect_result in apply_effect_result_list:
                    result.messages.append(apply_effect_result.message)
            
            target_details[target.name] = target_info
        
        result.total_damage = total_damage
        result.details['targets_info'] = target_details
        result.success = True
        
        return result
    
    def check_specific_conditions(self, character: Character, targets: List[Character]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–µ–Ω–∏—è"""
        # –°–∫–æ–ª—å–∑—è—â–∏–π —É–¥–∞—Ä –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π
        return True

- Characters/Abilities/Attack_abilities/splash_attack.py
# Characters/Abilities/splash_attack.py

from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult

class SplashAttack(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ê—Ç–∞–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç–∏ (—Å–ø–ª—ç—à)"""
    
    def __init__(self):
        super().__init__(
            name="–°–ø–ª—ç—à –ê—Ç–∞–∫–∞",
            is_mass=True,
            damage_scale=0.7,
            cooldown=3,
            energy_cost=20,
            description="–ê—Ç–∞–∫–∞, –ø–æ—Ä–∞–∂–∞—é—â–∞—è –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤",
            icon="üí•"
        )
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–ª—ç—à –∞—Ç–∞–∫—É –ø–æ –≤—Å–µ–º —Ü–µ–ª—è–º."""
        result = AbilityResult()
        result.ability_type = "splash_attack"
        result.character = character.name
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∏–≤—ã–µ —Ü–µ–ª–∏
        alive_targets = [target for target in targets if target.is_alive()]
        
        if not alive_targets:
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        result.targets = [target.name for target in alive_targets]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage = int(character.derived_stats.attack * self.damage_scale)
        
        # –ê—Ç–∞–∫—É–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫
        total_damage = 0
        target_details = {}
        
        for target in alive_targets:
            mechanics_results = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
            
            target_info = {
                'damage_dealt': 0,
                'damage_blocked': 0,
                'is_critical': False,
                'dodge': mechanics_results['dodge_success'],
                'target_alive': target.is_alive()
            }
            
            if mechanics_results['dodge_success']:
                # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
                target_info['message'] = mechanics_results['dodge_message']
            else:
                # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                actual_damage = mechanics_results['final_damage']
                is_critical = mechanics_results['critical_hit']
                
                # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
                damage_dealt, blocked = target.take_damage(actual_damage)
                
                target_info['damage_dealt'] = damage_dealt
                target_info['damage_blocked'] = blocked
                target_info['is_critical'] = is_critical
                target_info['target_alive'] = target.is_alive()
                
                total_damage += damage_dealt
            
            target_details[target.name] = target_info
        
        result.total_damage = total_damage
        result.details['targets_info'] = target_details
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template = "%1 %2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –°–ø–ª—ç—à –ê—Ç–∞–∫—É –ø–æ %3 —Ü–µ–ª—è–º!"
        elements = [(self.icon, 0), (character.name, 2), (str(len(alive_targets)), 1)]
        
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        return result
    
    def check_specific_conditions(self, character, targets):
        return True

- Characters/Abilities/Attack_abilities/volley.py
# Characters/Abilities/volley_ability.py

from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import Ability, AbilityResult

class Volley(Ability):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ì—Ä–∞–¥ —Å—Ç—Ä–µ–ª - –º–∞—Å—Å–æ–≤–∞—è –∞—Ç–∞–∫–∞ –ø–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º"""
    
    def __init__(self):
        super().__init__(
            name="–ì—Ä–∞–¥ —Å—Ç—Ä–µ–ª",
            type=0,
            is_mass=True,
            damage_scale=0.6,
            cooldown=3,
            energy_cost=25,
            description="–ú–∞—Å—Å–æ–≤–∞—è –∞—Ç–∞–∫–∞, –ø–æ—Ä–∞–∂–∞—é—â–∞—è –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ —Å—Ç—Ä–µ–ª–∞–º–∏",
            icon="üèπ"
        )
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é –∞—Ç–∞–∫—É –ø–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º."""
        result = AbilityResult()
        result.ability_type = "volley"
        result.character = character.name
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∏–≤—ã–µ —Ü–µ–ª–∏
        alive_targets = [target for target in targets if target.is_alive()]
        
        if not alive_targets:
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏'
            return result
        
        result.targets = [target.name for target in alive_targets]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage = int(character.derived_stats.attack * self.damage_scale)
        
        # –ê—Ç–∞–∫—É–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫
        total_damage = 0
        target_details = {}
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        template = "%1 %2 –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ì—Ä–∞–¥ —Å—Ç—Ä–µ–ª!"
        elements = [(self.icon, 0), (character.name, 2)]
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        for target in alive_targets:
            mechanics_results = GameMechanics.apply_all_mechanics(self, character, target, base_damage)
            
            target_info = {
                'damage_dealt': 0,
                'damage_blocked': 0,
                'is_critical': False,
                'dodge': mechanics_results['dodge_success'],
                'target_alive': target.is_alive()
            }
            
            if mechanics_results['dodge_success']:
                # –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å
                target_info['message'] = mechanics_results['dodge_message']
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–∫–ª–æ–Ω–µ–Ω–∏–∏
                dodge_template = "  üî∏ %1 —É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —Å—Ç—Ä–µ–ª!"
                dodge_elements = [(target.name, 4)]
                result.messages.append(battle_logger.create_log_message(dodge_template, dodge_elements))
            else:
                # –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                actual_damage = mechanics_results['final_damage']
                # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
                target.take_damage(actual_damage)
                
                target_info['damage_dealt'] = actual_damage
                target_info['damage_blocked'] = mechanics_results['blocked_damage']
                target_info['is_critical'] = mechanics_results['critical_hit']
                target_info['target_alive'] = target.is_alive()
                
                total_damage += actual_damage
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Ä–æ–Ω–µ –ø–æ —Ü–µ–ª–∏
                if mechanics_results['critical_hit']:
                    damage_template = "  üî∏ %1 –ø–æ–ª—É—á–∞–µ—Ç %2 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û —É—Ä–æ–Ω–∞ (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ) %4"
                    crit_text = "üí•" if actual_damage > 0 else ""
                    damage_elements = [(target.name, 4), (str(actual_damage), 1), (str(mechanics_results['blocked_damage']), 3), (crit_text, 0)]
                else:
                    damage_template = "  üî∏ %1 –ø–æ–ª—É—á–∞–µ—Ç %2 —É—Ä–æ–Ω–∞ (%3 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)"
                    damage_elements = [(target.name, 4), (str(actual_damage), 1), (str(mechanics_results['blocked_damage']), 3)]
                
                result.messages.append(battle_logger.create_log_message(damage_template, damage_elements))
            
            target_details[target.name] = target_info
        
        result.total_damage = total_damage
        result.details['targets_info'] = target_details
        
        return result
    
    def check_specific_conditions(self, character, targets):
        return True

- Characters/Abilities/Heal_abilities/heal.py
# Characters/Abilities/heal_ability.py

import random
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult

class Heal(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –õ–µ—á–µ–Ω–∏–µ —Å–æ—é–∑–Ω–∏–∫–∞"""
    
    def __init__(self):
        super().__init__(
            name="–õ–µ—á–µ–Ω–∏–µ",
            type=1,
            damage_scale=0.0,
            cooldown=1,
            energy_cost=5,
            description="–õ–µ—á–∏—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞",
            icon="üíó"
        )
        self.base_heal_amount = 25
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞."""
        result = AbilityResult()
        result.ability_type = "heal"
        result.character = character.name
        
        if not targets:
            result.success = False
            result.reason = '–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –ª–µ—á–µ–Ω–∏—è'
            return result
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∂–∏–≤—É—é —Ü–µ–ª—å
        target = None
        for t in targets:
            if t.is_alive():
                target = t
                break
        
        if not target:
            result.success = False
            result.reason = '–ù–µ—Ç –∂–∏–≤—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –ª–µ—á–µ–Ω–∏—è'
            return result
        
        result.targets = [target.name]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ
        base_heal = random.randint(self.base_heal_amount - 5, self.base_heal_amount + 5)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–µ—á–µ–Ω–∏—è
        mechanics_results = GameMechanics.apply_all_mechanics(self, character, target, base_heal)
        final_heal_amount = mechanics_results['final_damage']
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ—á–µ–Ω–∏–µ
        actual_heal = target.take_heal(final_heal_amount)
        
        result.heal_amount = actual_heal
        result.total_heal = actual_heal
        result.is_critical = mechanics_results['critical_hit']
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if mechanics_results['critical_hit']:
            template = "%1 %2 –ª–µ—á–∏—Ç %3 –Ω–∞ %4 –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –∑–¥–æ—Ä–æ–≤—å—è! %5"
            crit_text = "‚ú®" if actual_heal > 0 else ""
            elements = [(self.icon, 0), (character.name, 2), (target.name, 2), (str(actual_heal), 3), (crit_text, 0)]
        else:
            template = "%1 %2 –ª–µ—á–∏—Ç %3 –Ω–∞ %4 –∑–¥–æ—Ä–æ–≤—å—è."
            elements = [(self.icon, 0), (character.name, 2), (target.name, 2), (str(actual_heal), 3)]
        
        result.messages = [battle_logger.create_log_message(template, elements)]
        
        return result
    
    def check_specific_conditions(self, character, targets):
        return True

- Characters/Abilities/Heal_abilities/mass_heal.py
# Characters/Abilities/mass_heal_ability.py

import random
from Battle.battle_logger import battle_logger
from Battle.base_mechanics import GameMechanics
from Characters.Abilities.ability import ActiveAbility, AbilityResult

class MassHeal(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ú–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ"""
    
    def __init__(self):
        super().__init__(
            name="–ú–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ",
            type=1,
            is_mass=True,
            damage_scale=0.0,
            cooldown=2,
            energy_cost=5,
            description="–õ–µ—á–∏—Ç –≤—Å–µ—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤",
            icon="üíñ"
        )
        self.base_heal_amount = 20
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤."""
        result = AbilityResult()
        result.ability_type = "mass_heal"
        result.character = character.name
        
        alive_allies = [ally for ally in targets if ally.is_alive()]
        
        if not alive_allies:
            result.success = False
            result.reason = '–ù–µ—Ç –∂–∏–≤—ã—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤ –¥–ª—è –ª–µ—á–µ–Ω–∏—è'
            return result
        
        result.targets = [ally.name for ally in alive_allies]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–µ—á–µ–Ω–∏–µ –Ω–∞ —Ü–µ–ª—å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        heal_per_target = max(1, self.base_heal_amount // max(1, len(alive_allies)))
        base_heal_amount = max(1, random.randint(heal_per_target - 3, heal_per_target + 3))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–µ—á–µ–Ω–∏—è (—Å–Ω–∏–∂–µ–Ω–Ω—ã–π —à–∞–Ω—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ)
        heal_crit_chance = GameMechanics.calculate_crit_chance(character) * 0.7
        is_critical = random.random() < heal_crit_chance
        heal_multiplier = 1.8 if is_critical else 1.0
        final_heal_amount = int(base_heal_amount * heal_multiplier)
        
        # –õ–µ—á–∏–º –∫–∞–∂–¥–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞ –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        total_healed = 0
        healed_targets = []
        
        for target_ally in alive_allies:
            old_hp = target_ally.hp
            target_ally.hp = min(target_ally.derived_stats.max_hp, target_ally.hp + final_heal_amount)
            actual_heal = target_ally.hp - old_hp
            
            healed_targets.append({
                'target': target_ally.name,
                'heal_amount': actual_heal
            })
            total_healed += actual_heal
        
        result.total_heal = total_healed
        result.heal_amount = total_healed
        result.is_critical = is_critical
        result.details['healed_targets'] = healed_targets
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_critical:
            message_template = "%1 %2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç %3 –∑–¥–æ—Ä–æ–≤—å—è! %4"
            crit_text = "üåü" if total_healed > 0 else ""
            message_elements = [(self.icon, 0), (character.name, 2), (str(total_healed), 3), (crit_text, 0)]
        else:
            message_template = "%1 %2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç %3 –∑–¥–æ—Ä–æ–≤—å—è."
            message_elements = [(self.icon, 0), (character.name, 2), (str(total_healed), 3)]
        
        result.messages = []
        result.messages.append(battle_logger.create_log_message(message_template, message_elements))

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—é–∑–Ω–∏–∫—É (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
        for target_info in healed_targets:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞: –∏–º—è, " –≤—ã–ª–µ—á–µ–Ω –Ω–∞ ", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            detail_template = "  üîπ %1 –≤—ã–ª–µ—á–µ–Ω –Ω–∞ %2 –∑–¥–æ—Ä–æ–≤—å—è"
            detail_elements = [(target_info['target'], 2),  # –∏–º—è - –∑–µ–ª–µ–Ω—ã–π
                (str(target_info['heal_amount']), 6),  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –±–∏—Ä—é–∑–æ–≤—ã–π
            ]
            result.messages.append(battle_logger.create_log_message(detail_template, detail_elements))
        
        return result
    
    def check_specific_conditions(self, character, targets):
        return True

- Characters/Abilities/Misc_abilities/rest.py
# Characters/Abilities/rest_ability.py

from Battle.battle_logger import battle_logger
from Characters.Abilities.ability import ActiveAbility, AbilityResult

class Rest(ActiveAbility):
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –û—Ç–¥—ã—Ö - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é"""
    
    def __init__(self):
        super().__init__(
            name="–û—Ç–¥—ã—Ö",
            type=2,
            damage_scale=0.0,
            cooldown=0,  # –ù–µ—Ç –∫—É–ª–¥–∞—É–Ω–∞
            energy_cost=0,  # –ù–µ —Ç—Ä–µ–±—É–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            description="–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 30 —ç–Ω–µ—Ä–≥–∏–∏",
            icon="üßò"
        )
        self.energy_restore = 30
        self.set_level(1)
    
    def execute(self, character, targets, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é."""
        result = AbilityResult()
        result.ability_type = "rest"
        result.character = character.name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞
        old_energy = character.energy if hasattr(character, 'energy') else 0
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
        if hasattr(character, 'energy') and hasattr(character, 'derived_stats'):
            character.energy = min(character.derived_stats.max_energy, character.energy + self.energy_restore)
            actual_restore = character.energy - old_energy
        else:
            actual_restore = 0
            
        result.energy_restored = actual_restore
        result.details['old_energy'] = old_energy
        result.details['new_energy'] = character.energy if hasattr(character, 'energy') else 0
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        template = "%1 %2 –æ—Ç–¥—ã—Ö–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç %3 —ç–Ω–µ—Ä–≥–∏–∏!"
        elements = [(self.icon, 0), (character.name, 2), (str(actual_restore), 6)]
        
        result.messages = [battle_logger.create_log_message(template, elements)]
            
        return result
    
    def check_specific_conditions(self, character, targets):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç–¥—ã—Ö–∞—Ç—å (–Ω–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ —ç–Ω–µ—Ä–≥–∏–∏)."""
        if not hasattr(character, 'energy') or not hasattr(character, 'derived_stats'):
            return False
        return character.energy < character.derived_stats.max_energy

- Characters/Abilities/Passive_abilities/critical_strike.py
# characters/abilities/misc/critical_strike.py

from typing import Any, Dict
from Characters.Abilities.ability import PassiveAbility

class CriticalStrike(PassiveAbility):
    """–ü–∞—Å—Å–∏–≤–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä - –ø–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞"""
    
    def __init__(self) -> None:
        super().__init__(
            name="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä",
            type=3,  # –¢–∏–ø –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
            description="–ü–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞ –ø—Ä–∏ –∞—Ç–∞–∫–∞—Ö",
            icon="‚ö°"
        )
        # –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        self.base_critical_bonus: float = 0.05  # 5% –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        self.max_level: int = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    
    def level_up(self) -> int:
        """–ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ 1, –Ω–æ –Ω–µ –≤—ã—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ"""
        if self.level < self.max_level:
            self.level += 1
        return self.level
    
    def set_level(self, level: int) -> int:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é"""
        self.level = max(0, min(level, self.max_level))
        return self.level
    
    def get_current_bonus(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–æ–Ω—É—Å –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º—É —à–∞–Ω—Å—É"""
        return self.base_critical_bonus * self.level
    
    def apply_effect(self, character: Any, **kwargs: Any) -> Dict[str, Any]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        –ü–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        """

        current_bonus = self.get_current_bonus()
    
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ
        return {
            'effect_applied': True,
            'critical_bonus': current_bonus,
            'current_level': self.level,
            'max_level': self.max_level,
            'character': character
        }
    
    def get_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Å—Å–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
        info = super().get_info()
        info.update({
            'current_bonus': self.get_current_bonus(),
            'base_critical_bonus': self.base_critical_bonus,
            'max_level': self.max_level
        })
        return info
    
    def get_detailed_description(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –±–æ–Ω—É—Å–∞–º–∏"""
        current_bonus = self.get_current_bonus()
        return f"{self.description}\n–ë–æ–Ω—É—Å: +{current_bonus*100:.0f}% –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞\n–£—Ä–æ–≤–µ–Ω—å: {self.level}/{self.max_level}"

- Characters/Abilities/Passive_abilities/poison_strike.py
# Characters/Abilities/Passive_abilities/poison_strike.py
import random
from typing import Any, Dict, List
from Characters.Abilities.ability import PassiveAbility
from Characters.Status_effects.poison_effect import PoisonEffect

class PoisonStrike(PassiveAbility):
    """–ü–∞—Å—Å–∏–≤–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –û—Ç—Ä–∞–≤–ª—è—é—â–∏–π —É–¥–∞—Ä - —Å —à–∞–Ω—Å–æ–º –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∞—Ç–∞–∫–µ"""
    
    def __init__(self) -> None:
        super().__init__(
            name="–û—Ç—Ä–∞–≤–ª—è—é—â–∏–π —É–¥–∞—Ä",
            type=3,  # –¢–∏–ø –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
            description="–° —à–∞–Ω—Å–æ–º –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞—Ç–∞–∫–µ",
            icon="‚ò†Ô∏è"
        )
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        self.base_chance: float = 0.15  # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å 15%
        self.chance_per_level: float = 0.05  # +5% –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        self.poison_duration: int = 3  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è
        self.poison_damage: int = 4  # –£—Ä–æ–Ω –æ—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞ —Ö–æ–¥
        self.max_level: int = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    
    def level_up(self) -> int:
        """–ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ 1, –Ω–æ –Ω–µ –≤—ã—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ"""
        if self.level < self.max_level:
            self.level += 1
        return self.level
    
    def set_level(self, level: int) -> int:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é"""
        self.level = max(0, min(level, self.max_level))
        return self.level
    
    def get_current_chance(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–Ω—Å –Ω–∞–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è"""
        return min(self.base_chance + (self.chance_per_level * (self.level - 1)), 0.5)  # –ú–∞–∫—Å–∏–º—É–º 50%
    
    def apply_effect(self, character: Any, target: Any = None, **kwargs: Any) -> Dict[str, Any]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ - –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–ª–æ–∂–∏—Ç—å –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—Ç–∞–∫–∏.
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if self.level <= 0:
            return {
                'effect_applied': False,
                'reason': 'ability_not_learned'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª—å
        if target is None:
            return {
                'effect_applied': False,
                'reason': 'no_target'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ target
        if not hasattr(target, 'is_alive') or not target.is_alive():
            return {
                'effect_applied': False,
                'reason': 'target_dead'
            }
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∞–Ω—Å –Ω–∞–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è
        current_chance = self.get_current_chance()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç
        if random.random() < current_chance:
            # –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è
            poison_effect = PoisonEffect(
                duration=self.poison_duration,
                damage_per_turn=self.poison_damage,
                chance=current_chance
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫ —Ü–µ–ª–∏
            result = target.add_status_effect(poison_effect)
            
            return {
                'effect_applied': True,
                'poison_applied': True,
                'chance': current_chance,
                'target': target.name,
                'effect_instance': poison_effect,
                'message': "–û—Ç—Ä–∞–≤–ª–µ–Ω"
            }
        else:
            return {
                'effect_applied': True,
                'poison_applied': False,
                'chance': current_chance,
                'target': target.name,
                'message': '–û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ'
            }
    
    def get_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Å—Å–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
        info = super().get_info()
        info.update({
            'current_chance': self.get_current_chance(),
            'base_chance': self.base_chance,
            'chance_per_level': self.chance_per_level,
            'poison_duration': self.poison_duration,
            'poison_damage': self.poison_damage,
            'max_level': self.max_level
        })
        return info
    
    def get_detailed_description(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        current_chance = self.get_current_chance()
        return (f"{self.description}\n"
                f"–®–∞–Ω—Å: {current_chance*100:.0f}%\n"
                f"–£—Ä–æ–Ω –æ—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è: {self.poison_damage} –∑–∞ —Ö–æ–¥\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.poison_duration} —Ä–∞—É–Ω–¥–∞\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {self.level}/{self.max_level}")

- Utils/UI/ability_cards.py
# Utils/ability_cards.py - –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —É–º–µ–Ω–∏–π —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π

import curses
from typing import Dict, Any, List
from abc import ABC, abstractmethod
from Config.curses_config import get_color_pair, COLOR_WHITE, COLOR_YELLOW, COLOR_GRAY, COLOR_CYAN, COLOR_GREEN, COLOR_BLUE, COLOR_RED

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
# –†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫
DEFAULT_CARD_WIDTH = 45
CARD_HEIGHT = 5  # –í—ã—Å–æ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ä—Ç–æ—á–∫–∏ (–±–µ–∑ —Ä–∞–º–∫–∏)
CARD_VERTICAL_SPACING = 6  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
CARD_HORIZONTAL_SPACING = 2  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
CARDS_PER_ROW = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ä—è–¥—É

# –°–∏–º–≤–æ–ª—ã —Ä–∞–º–æ–∫
# –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
INACTIVE_TOP_LEFT_CORNER = "‚îå"
INACTIVE_TOP_RIGHT_CORNER = "‚îê"
INACTIVE_BOTTOM_LEFT_CORNER = "‚îî"
INACTIVE_BOTTOM_RIGHT_CORNER = "‚îò"
INACTIVE_HORIZONTAL_LINE = "‚îÄ"
INACTIVE_VERTICAL_LINE = "‚îÇ"

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
ACTIVE_TOP_LEFT_CORNER = "‚ïî"
ACTIVE_TOP_RIGHT_CORNER = "‚ïó"
ACTIVE_BOTTOM_LEFT_CORNER = "‚ïö"
ACTIVE_BOTTOM_RIGHT_CORNER = "‚ïù"
ACTIVE_HORIZONTAL_LINE = "‚ïê"
ACTIVE_VERTICAL_LINE = "‚ïë"
ACTIVE_DOUBLE_HORIZONTAL_SEGMENT = "‚ïê‚ïê"

# –ü–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
NAME_Y_OFFSET = 0
DESCRIPTION_Y_OFFSET = 1
ADDITIONAL_INFO_Y_OFFSET = 2
LEVEL_BAR_Y_OFFSET = 3

# –ì—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
MIN_SCREEN_MARGIN = 3
SCREEN_BOTTOM_MARGIN = 3

class AbilityCard(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —É–º–µ–Ω–∏—è"""
    
    def __init__(self) -> None:
        self.default_card_width: int = DEFAULT_CARD_WIDTH
        self._colors_initialized: bool = False
        self._white_color = None
        self._yellow_color = None
        self._gray_color = None
        self._cyan_color = None
        self._green_color = None
        self._blue_color = None
        self._red_color = None
        self._active_color = None
    
    def _initialize_colors(self) -> None:
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤"""
        if not self._colors_initialized:
            self._white_color = get_color_pair(COLOR_WHITE) | curses.A_BOLD
            self._yellow_color = get_color_pair(COLOR_YELLOW)
            self._gray_color = get_color_pair(COLOR_GRAY)
            self._cyan_color = get_color_pair(COLOR_CYAN)
            self._green_color = get_color_pair(COLOR_GREEN)
            self._blue_color = get_color_pair(COLOR_BLUE)
            self._red_color = get_color_pair(COLOR_RED) | curses.A_BOLD
            self._active_color = get_color_pair(COLOR_BLUE) | curses.A_BOLD
            self._colors_initialized = True
    
    @property
    def white_color(self):
        if not self._colors_initialized:
            self._initialize_colors()
        return self._white_color
    
    @property
    def yellow_color(self):
        if not self._colors_initialized:
            self._initialize_colors()
        return self._yellow_color
    
    @property
    def gray_color(self):
        if not self._colors_initialized:
            self._initialize_colors()
        return self._gray_color
    
    @property
    def cyan_color(self):
        if not self._colors_initialized:
            self._initialize_colors()
        return self._cyan_color
    
    @property
    def green_color(self):
        if not self._colors_initialized:
            self._initialize_colors()
        return self._green_color
    
    @property
    def blue_color(self):
        if not self._colors_initialized:
            self._initialize_colors()
        return self._blue_color
    
    @property
    def red_color(self):
        if not self._colors_initialized:
            self._initialize_colors()
        return self._red_color
    
    @property
    def active_color(self):
        if not self._colors_initialized:
            self._initialize_colors()
        return self._active_color
    
    def calculate_card_width(self, max_width: int, screen_width: int, x: int) -> int:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —à–∏—Ä–∏–Ω—É –∫–∞—Ä—Ç–æ—á–∫–∏
        """
        card_width = min(max_width - 4, self.default_card_width)
        if x + card_width >= screen_width:
            card_width = screen_width - x - 2
        return max(card_width, 10)
    
    def display_centered_level_bar(self, stdscr: curses.window, current_level: int, max_level: int, y: int, x: int, card_width: int, is_active: bool = False) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∫–∞–ª—É —É—Ä–æ–≤–Ω–µ–π
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —É—Ä–æ–≤–Ω–µ–π
            level_bar = ""
            for i in range(1, max_level + 1):
                if i <= current_level:
                    level_bar += "[‚ñ†]"
                else:
                    level_bar += "[‚ñ°]"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            bar_width = len(level_bar)
            center_x = x + (card_width - bar_width) // 2
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            if center_x < x:
                center_x = x
            elif center_x + bar_width > x + card_width:
                center_x = x + card_width - bar_width
            
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
            stdscr.addstr(y, max(center_x, x), level_bar, self.yellow_color)
        except curses.error:
            pass
    
    @abstractmethod
    def display_additional_info(self, stdscr: curses.window, ability: Dict[str, Any], y: int, x: int, card_width: int, is_active: bool = False) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É–º–µ–Ω–∏—è
        """
        pass
    
    def display_ability_card(self, stdscr: curses.window, ability: Dict[str, Any], y: int, x: int, max_width: int, is_active: bool = False) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —É–º–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π —Ä–∞–º–∫–æ–π
        """
        try:
            height, width = stdscr.getmaxyx()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
            if y >= height - MIN_SCREEN_MARGIN or x >= width - MIN_SCREEN_MARGIN:
                return
            
            # –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–∞—Ä—Ç–æ—á–∫–∏
            card_width = self.calculate_card_width(max_width, width, x)
            
            if is_active:
                # –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ - –¥–≤–æ–π–Ω–∞—è —Ä–∞–º–∫–∞ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
                active_color = self.red_color
                
                # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Å –¥–≤–æ–π–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
                if y - 1 >= 0:
                    horizontal_fill = ACTIVE_DOUBLE_HORIZONTAL_SEGMENT * ((card_width - 2) // 2)
                    if (card_width - 2) % 2:
                        horizontal_fill += ACTIVE_HORIZONTAL_LINE
                    stdscr.addstr(y - 1, x, ACTIVE_TOP_LEFT_CORNER + horizontal_fill + ACTIVE_TOP_RIGHT_CORNER, active_color)
                
                # –ë–æ–∫–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
                if y < height:
                    stdscr.addstr(y, x, ACTIVE_VERTICAL_LINE, active_color)
                    if x + card_width - 1 < width:
                        stdscr.addstr(y, x + card_width - 1, ACTIVE_VERTICAL_LINE, active_color)
                if y + 1 < height:
                    stdscr.addstr(y + 1, x, ACTIVE_VERTICAL_LINE, active_color)
                    if x + card_width - 1 < width:
                        stdscr.addstr(y + 1, x + card_width - 1, ACTIVE_VERTICAL_LINE, active_color)
                if y + 2 < height:
                    stdscr.addstr(y + 2, x, ACTIVE_VERTICAL_LINE, active_color)
                    if x + card_width - 1 < width:
                        stdscr.addstr(y + 2, x + card_width - 1, ACTIVE_VERTICAL_LINE, active_color)
                if y + 3 < height:
                    stdscr.addstr(y + 3, x, ACTIVE_VERTICAL_LINE, active_color)
                    if x + card_width - 1 < width:
                        stdscr.addstr(y + 3, x + card_width - 1, ACTIVE_VERTICAL_LINE, active_color)
                
                # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Å –¥–≤–æ–π–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
                if y + 4 < height:
                    horizontal_fill = ACTIVE_DOUBLE_HORIZONTAL_SEGMENT * ((card_width - 2) // 2)
                    if (card_width - 2) % 2:
                        horizontal_fill += ACTIVE_HORIZONTAL_LINE
                    stdscr.addstr(y + 4, x, ACTIVE_BOTTOM_LEFT_CORNER + horizontal_fill + ACTIVE_BOTTOM_RIGHT_CORNER, active_color)
            else:
                # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ - –æ–¥–∏–Ω–∞—Ä–Ω–∞—è —Å–µ—Ä–∞—è —Ä–∞–º–∫–∞
                border_color = self.gray_color
                
                # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
                if y - 1 >= 0:
                    stdscr.addstr(y - 1, x, INACTIVE_TOP_LEFT_CORNER + INACTIVE_HORIZONTAL_LINE * (card_width - 2) + INACTIVE_TOP_RIGHT_CORNER, border_color)
                
                # –ë–æ–∫–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
                if y < height:
                    stdscr.addstr(y, x, INACTIVE_VERTICAL_LINE, border_color)
                    if x + card_width - 1 < width:
                        stdscr.addstr(y, x + card_width - 1, INACTIVE_VERTICAL_LINE, border_color)
                if y + 1 < height:
                    stdscr.addstr(y + 1, x, INACTIVE_VERTICAL_LINE, border_color)
                    if x + card_width - 1 < width:
                        stdscr.addstr(y + 1, x + card_width - 1, INACTIVE_VERTICAL_LINE, border_color)
                if y + 2 < height:
                    stdscr.addstr(y + 2, x, INACTIVE_VERTICAL_LINE, border_color)
                    if x + card_width - 1 < width:
                        stdscr.addstr(y + 2, x + card_width - 1, INACTIVE_VERTICAL_LINE, border_color)
                if y + 3 < height:
                    stdscr.addstr(y + 3, x, INACTIVE_VERTICAL_LINE, border_color)
                    if x + card_width - 1 < width:
                        stdscr.addstr(y + 3, x + card_width - 1, INACTIVE_VERTICAL_LINE, border_color)
                
                # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
                if y + 4 < height:
                    stdscr.addstr(y + 4, x, INACTIVE_BOTTOM_LEFT_CORNER + INACTIVE_HORIZONTAL_LINE * (card_width - 2) + INACTIVE_BOTTOM_RIGHT_CORNER, border_color)
            
            # –ò–º—è —É–º–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –±–µ–ª—ã–π —Å –∂–∏—Ä–Ω—ã–º)
            name_text = ability["name"][:card_width-2] if len(ability["name"]) > card_width-2 else ability["name"]
            stdscr.addstr(y + NAME_Y_OFFSET, x + 1, name_text, self.white_color)
            
            # –û–ø–∏—Å–∞–Ω–∏–µ (–≤—Å–µ–≥–¥–∞ —Å–µ—Ä—ã–π)
            desc_text = ability["description"][:card_width-2] if len(ability["description"]) > card_width-2 else ability["description"]
            stdscr.addstr(y + DESCRIPTION_Y_OFFSET, x + 1, desc_text, self.gray_color)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞)
            if y + ADDITIONAL_INFO_Y_OFFSET < height - SCREEN_BOTTOM_MARGIN:
                self.display_additional_info(stdscr, ability, y + ADDITIONAL_INFO_Y_OFFSET, x + 1, card_width - 2, is_active)
            
            # –®–∫–∞–ª–∞ —É—Ä–æ–≤–Ω–µ–π (–≤—Å–µ–≥–¥–∞ –∂–µ–ª—Ç–∞—è)
            current_level = ability.get("level", 1)
            max_level = ability.get("max_level", 5)
            self.display_centered_level_bar(stdscr, current_level, max_level, y + LEVEL_BAR_Y_OFFSET, x + 1, card_width - 2, is_active)
                
        except curses.error:
            pass


class ActiveAbilityCard(AbilityCard):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–º–µ–Ω–∏–π"""
    
    def display_additional_info(self, stdscr: curses.window, ability: Dict[str, Any], y: int, x: int, card_width: int, is_active: bool = False) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω –∏ —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–º–µ–Ω–∏–π
        """
        cost_text = ""
        if "energy" in ability:
            cost_text += f"‚ö° {ability['energy']} "
        if "cooldown" in ability and ability["cooldown"] > 0:
            cost_text += f"‚è±Ô∏è  {ability['cooldown']}"
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª—É–±–æ–π —Ü–≤–µ—Ç
        if cost_text:
            stdscr.addstr(y, x, cost_text, self.cyan_color)


class PassiveAbilityCard(AbilityCard):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–∞—Å—Å–∏–≤–Ω—ã—Ö —É–º–µ–Ω–∏–π"""
    
    def display_additional_info(self, stdscr: curses.window, ability: Dict[str, Any], y: int, x: int, card_width: int, is_active: bool = False) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–∞—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
        """
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        stdscr.addstr(y, x, "–ü–∞—Å—Å–∏–≤–Ω–æ–µ", self.green_color)


class AbilityCardNavigator:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —É–º–µ–Ω–∏–π"""
    
    def __init__(self, abilities: List[Dict[str, Any]]) -> None:
        self.abilities = abilities
        self.current_index = 0
        self.active_card_renderer = ActiveAbilityCard()
        self.passive_card_renderer = PassiveAbilityCard()
    
    def next_ability(self) -> None:
        """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–º–µ–Ω–∏—é"""
        if self.abilities:
            self.current_index = (self.current_index + 1) % len(self.abilities)
    
    def prev_ability(self) -> None:
        """–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É–º–µ–Ω–∏—é"""
        if self.abilities:
            self.current_index = (self.current_index - 1) % len(self.abilities)
    
    def get_current_ability(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É–º–µ–Ω–∏–µ"""
        if self.abilities:
            return self.abilities[self.current_index]
        return {}
    
    def get_current_index(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —É–º–µ–Ω–∏—è"""
        return self.current_index
    
    def display_abilities_grid(self, stdscr: curses.window, start_y: int, start_x: int, max_width: int = 30) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–µ—Ç–∫—É —É–º–µ–Ω–∏–π —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
        
        Args:
            stdscr: –û–∫–Ω–æ curses
            start_y: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è Y
            start_x: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X
            max_width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if not self.abilities:
            return
        
        try:
            height, width = stdscr.getmaxyx()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω–∏–π –≤ —Ä—è–¥—É
            abilities_per_row = CARDS_PER_ROW
            ability_width = min((max_width - 10) // abilities_per_row, DEFAULT_CARD_WIDTH)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —É–º–µ–Ω–∏—è
            for i, ability in enumerate(self.abilities):
                row = i // abilities_per_row
                col = i % abilities_per_row
                
                # –ü–æ–∑–∏—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
                ability_x = start_x + col * (ability_width + CARD_HORIZONTAL_SPACING)
                ability_y = start_y + row * CARD_VERTICAL_SPACING
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
                if ability_y + CARD_HEIGHT < height - SCREEN_BOTTOM_MARGIN:
                    is_active = (i == self.current_index)
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–º–µ–Ω–∏—è
                    if ability.get("type", "active") == "active" or "cooldown" in ability or "energy" in ability:
                        self.active_card_renderer.display_ability_card(stdscr, ability, ability_y, ability_x, ability_width, is_active)
                    else:
                        self.passive_card_renderer.display_ability_card(stdscr, ability, ability_y, ability_x, ability_width, is_active)
                        
        except curses.error:
            pass


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
ACTIVE_ABILITY_CARD: ActiveAbilityCard = ActiveAbilityCard()
PASSIVE_ABILITY_CARD: PassiveAbilityCard = PassiveAbilityCard()

- Utils/UI/draw_character.py
# draw_character.py - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

import curses
import random
from Config.game_config import ENERGY_BAR_WIDTH, MONSTER_NAME_COLUMN_WIDTH, PLAYER_NAME_COLUMN_WIDTH, PROGRESS_BORDER_CHARS, PROGRESS_BAR_CHARS, HP_BAR_WIDTH, BASE_ENERGY_COST
from Config.curses_config import get_color_pair, COLOR_RED, COLOR_GREEN, COLOR_YELLOW, COLOR_BLUE, COLOR_GRAY, COLOR_WHITE

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
ENEMY_NAME_EXTRA_WIDTH = 25
CLASS_ICON_DISPLAY_WIDTH = 3
LEVEL_DISPLAY_BASE_WIDTH = 2
DEATH_SYMBOL_WIDTH = 2
CLASS_DISPLAY_WIDTH = 4
MIN_LENGTH_FOR_DOTS = 2
MIN_LENGTH_FOR_DOT = 1
HP_BAR_DEFAULT_WIDTH = 10
ENERGY_BAR_DEFAULT_WIDTH = 8
DEFAULT_SPACING = 1
AFTER_BAR_SPACING = 2
ENERGY_BAR_COLOR = 7
HIGH_HP_THRESHOLD = 0.75
LOW_HP_THRESHOLD = 0.25
MAX_EFFECT_NAME_LENGTH = 6
MAX_DISPLAYED_EFFECTS = 3
EFFECT_DOTS_LENGTH = 2
STATUS_EFFECTS_MAX_WIDTH = 15


class DrawCharacter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –∏–º—è, HP, Energy, —Å—Ç–∞—Ç—É—Å—ã.
    –í–∫–ª—é—á–∞–µ—Ç –í–°–Å: –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∏–º–µ–Ω–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã, —ç—Ñ—Ñ–µ–∫—Ç—ã ‚Äî –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    """

    @staticmethod
    def draw_character_name(screen, position_y: int, position_x: int, character) -> int:
        """
        –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∏–∫–æ–Ω–∫–æ–π –∫–ª–∞—Å—Å–∞, —É—Ä–æ–≤–Ω–µ–º, —Ü–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∫–æ–π —Å–º–µ—Ä—Ç–∏.
        - –ò–≥—Ä–æ–∫: –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ (NAME_COLUMN_WIDTH + 15)
        - –í—Ä–∞–≥: –º–µ–Ω—å—à–µ –º–µ—Å—Ç–∞ (NAME_COLUMN_WIDTH)
        - –ò–º—è –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è —Å "..", –µ—Å–ª–∏ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç —Å —É—á—ë—Ç–æ–º –∫–ª–∞—Å—Å–∞ –∏ —É—Ä–æ–≤–Ω—è
        - –¶–≤–µ—Ç–∞: –∏–º—è ‚Äî –∑–µ–ª—ë–Ω–æ–µ (–∏–≥—Ä–æ–∫), —Å–∏–Ω–µ–µ (–≤—Ä–∞–≥); –∫–ª–∞—Å—Å ‚Äî –µ–≥–æ —Ü–≤–µ—Ç–æ–º; —É—Ä–æ–≤–µ–Ω—å ‚Äî –∂—ë–ª—Ç—ã–π; —Å–∫–æ–±–∫–∏ ‚Äî –±–µ–ª—ã–µ
        - –ú—ë—Ä—Ç–≤—ã–π: ‚Ä† –≤ –Ω–∞—á–∞–ª–µ, —Å–µ—Ä—ã–π —Ü–≤–µ—Ç, —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ
        """
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        total_name_width = PLAYER_NAME_COLUMN_WIDTH if character.is_player else MONSTER_NAME_COLUMN_WIDTH

        current_x_position = position_x
        max_x_position = position_x + total_name_width  # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞

        # –¶–≤–µ—Ç–∞
        white_color_pair = get_color_pair(COLOR_WHITE)
        yellow_color_pair = get_color_pair(COLOR_YELLOW)
        gray_dim_color_pair = get_color_pair(COLOR_GRAY) | curses.A_DIM
        base_name_color_pair = get_color_pair(COLOR_GREEN) if character.is_player else get_color_pair(COLOR_BLUE)
        final_name_color_pair = gray_dim_color_pair if not character.is_alive() else base_name_color_pair

        # 1. –†–∏—Å—É–µ–º ‚Ä† –µ—Å–ª–∏ –º—ë—Ä—Ç–≤ + –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ
        if not character.is_alive():
            try:
                if current_x_position < max_x_position:
                    screen.addstr(position_y, current_x_position, "‚Ä† ", gray_dim_color_pair)
                    current_x_position += DEATH_SYMBOL_WIDTH
            except curses.error:
                pass

        if character.is_player:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
            current_x_position = DrawCharacter._draw_player_name(screen, position_y, current_x_position, max_x_position, character, 
                                                               white_color_pair, yellow_color_pair, final_name_color_pair)
        else:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –º–æ–Ω—Å—Ç—Ä–æ–≤
            current_x_position = DrawCharacter._draw_monster_name(screen, position_y, current_x_position, max_x_position, character,
                                                               white_color_pair, yellow_color_pair, final_name_color_pair)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–±–µ–ª–∞–º–∏
        try:
            while current_x_position < max_x_position:
                screen.addstr(position_y, current_x_position, " ", final_name_color_pair)
                current_x_position += 1
        except curses.error:
            pass

        return current_x_position

    @staticmethod
    def _draw_player_name(screen, position_y: int, position_x: int, max_x_position: int, character,
                         white_color_pair, yellow_color_pair, final_name_color_pair) -> int:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ —Å –∫–ª–∞—Å—Å–æ–º –∏ —É—Ä–æ–≤–Ω–µ–º: –†–æ–ª–∞–Ω–¥ [W][1]"""
        current_x_position = position_x
        
        # –†–∞—Å—á–µ—Ç –¥–ª–∏–Ω—ã —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        suffix_length = 0
        has_class = bool(getattr(character, 'class_icon', ''))
        has_level = getattr(character, 'level', None) is not None
        
        if has_class and has_level:
            # [W][1] = 5 —Å–∏–º–≤–æ–ª–æ–≤
            suffix_length = 5
        elif has_class:
            # [W] = 3 —Å–∏–º–≤–æ–ª–∞
            suffix_length = 3
        elif has_level:
            # [1] = 3 —Å–∏–º–≤–æ–ª–∞
            suffix_length = 3

        # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –∏–º–µ–Ω–∏
        available_space = max_x_position - current_x_position - suffix_length
        available_space = max(0, available_space)

        # –û–±—Ä–µ–∑–∫–∞ –∏–º–µ–Ω–∏
        character_name = getattr(character, 'name', '')
        display_name = ""
        
        if available_space >= MIN_LENGTH_FOR_DOTS:
            if len(character_name) <= available_space:
                display_name = character_name
            else:
                display_name = character_name[:available_space - EFFECT_DOTS_LENGTH] + ".."
        elif available_space == MIN_LENGTH_FOR_DOT:
            display_name = "." if len(character_name) > 0 else ""

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–º–µ–Ω–∏
        if display_name:
            try:
                if current_x_position < max_x_position:
                    end_x = min(current_x_position + len(display_name), max_x_position)
                    text_to_draw = display_name[:end_x - current_x_position]
                    screen.addstr(position_y, current_x_position, text_to_draw, final_name_color_pair)
                    current_x_position += len(text_to_draw)
            except curses.error:
                pass

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        class_icon = getattr(character, 'class_icon', '')
        character_level = getattr(character, 'level', None)
        
        if class_icon and character_level is not None:
            # [W][1]
            level_str = str(character_level)
            if current_x_position + 5 + len(level_str) <= max_x_position:
                try:
                    screen.addstr(position_y, current_x_position, " [", white_color_pair)
                    screen.addstr(position_y, current_x_position + 2, class_icon, 
                                get_color_pair(getattr(character, 'class_icon_color', COLOR_WHITE)))
                    screen.addstr(position_y, current_x_position + 3, "][", white_color_pair)
                    screen.addstr(position_y, current_x_position + 5, level_str, yellow_color_pair)
                    screen.addstr(position_y, current_x_position + 5 + len(level_str), "]", white_color_pair)
                    current_x_position += 6 + len(level_str)
                except curses.error:
                    pass
        elif class_icon:
            # [W]
            if current_x_position + 4 <= max_x_position:
                try:
                    screen.addstr(position_y, current_x_position, " [", white_color_pair)
                    screen.addstr(position_y, current_x_position + 2, class_icon, 
                                get_color_pair(getattr(character, 'class_icon_color', COLOR_WHITE)))
                    screen.addstr(position_y, current_x_position + 3, "]", white_color_pair)
                    current_x_position += 4
                except curses.error:
                    pass
        elif character_level is not None:
            # [1]
            level_str = str(character_level)
            if current_x_position + 3 + len(level_str) <= max_x_position:
                try:
                    screen.addstr(position_y, current_x_position, " [", white_color_pair)
                    screen.addstr(position_y, current_x_position + 2, level_str, yellow_color_pair)
                    screen.addstr(position_y, current_x_position + 2 + len(level_str), "]", white_color_pair)
                    current_x_position += 3 + len(level_str)
                except curses.error:
                    pass

        return current_x_position

    @staticmethod
    def _draw_monster_name(screen, position_y: int, position_x: int, max_x_position: int, character,
                          white_color_pair, yellow_color_pair, final_name_color_pair) -> int:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –º–æ–Ω—Å—Ç—Ä–∞ —Å —É—Ä–æ–≤–Ω–µ–º: –ë–µ—à–µ–Ω—ã–π –º—É—Ç–∞–Ω—Ç [1]"""
        current_x_position = position_x
        
        # –†–∞—Å—á–µ—Ç –¥–ª–∏–Ω—ã —Å—É—Ñ—Ñ–∏–∫—Å–∞
        suffix_length = 0
        has_level = getattr(character, 'level', None) is not None
        if has_level:
            suffix_length = 3  # [1]

        # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –∏–º–µ–Ω–∏
        available_space = max_x_position - current_x_position - suffix_length
        available_space = max(0, available_space)

        # –û–±—Ä–µ–∑–∫–∞ –∏–º–µ–Ω–∏
        character_name = getattr(character, 'name', '')
        display_name = ""
        
        if available_space >= MIN_LENGTH_FOR_DOTS:
            if len(character_name) <= available_space:
                display_name = character_name
            else:
                display_name = character_name[:available_space - EFFECT_DOTS_LENGTH] + ".."
        elif available_space == MIN_LENGTH_FOR_DOT:
            display_name = "." if len(character_name) > 0 else ""

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–º–µ–Ω–∏
        if display_name:
            try:
                if current_x_position < max_x_position:
                    end_x = min(current_x_position + len(display_name), max_x_position)
                    text_to_draw = display_name[:end_x - current_x_position]
                    screen.addstr(position_y, current_x_position, text_to_draw, final_name_color_pair)
                    current_x_position += len(text_to_draw)
            except curses.error:
                pass

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è
        character_level = getattr(character, 'level', None)
        if character_level is not None:
            level_str = str(character_level)
            if current_x_position + 3 + len(level_str) <= max_x_position:
                try:
                    screen.addstr(position_y, current_x_position, " [", white_color_pair)
                    screen.addstr(position_y, current_x_position + 2, level_str, yellow_color_pair)
                    screen.addstr(position_y, current_x_position + 2 + len(level_str), "]", white_color_pair)
                    current_x_position += 3 + len(level_str)
                except curses.error:
                    pass

        return current_x_position

    @staticmethod
    def draw_progress_bar(screen, position_y: int, position_x: int, current_value: int, max_value: int,
                         bar_width: int, bar_color=None,
                         show_percent: bool = False, show_values: bool = False,
                         border_characters=PROGRESS_BORDER_CHARS, bar_characters=PROGRESS_BAR_CHARS):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (HP, Energy –∏ –¥—Ä.) ‚Äî –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –∏–∑ progress_bar.py.
        """
        if max_value <= 0:
            ratio_value: float = 0
        else:
            ratio_value = max(0.0, min(1.0, current_value / max_value))

        filled_segment_width = int(ratio_value * bar_width)
        if current_value > 0 and filled_segment_width == 0 and bar_width > 0:
            filled_segment_width = 1
        filled_segment_width = max(0, min(filled_segment_width, bar_width))

        filled_character = bar_characters[0]
        empty_character = bar_characters[1]
        progress_bar_string = filled_character * filled_segment_width + empty_character * (bar_width - filled_segment_width)

        # –¶–≤–µ—Ç
        if bar_color is None:
            if current_value <= 0:
                bar_color_pair = get_color_pair(COLOR_RED)
            elif ratio_value > HIGH_HP_THRESHOLD:
                bar_color_pair = get_color_pair(COLOR_GREEN)
            elif ratio_value > LOW_HP_THRESHOLD:
                bar_color_pair = get_color_pair(COLOR_YELLOW)
            else:
                bar_color_pair = get_color_pair(COLOR_RED)
        elif isinstance(bar_color, int):
            bar_color_pair = get_color_pair(bar_color)
        else:
            bar_color_pair = bar_color

        # –ì—Ä–∞–Ω–∏—Ü—ã
        left_border_char, right_border_char = border_characters
        try:
            screen.addstr(position_y, position_x, left_border_char, get_color_pair(COLOR_GRAY))
            screen.addstr(position_y, position_x + 1, progress_bar_string, bar_color_pair)
            screen.addstr(position_y, position_x + 1 + bar_width, right_border_char, get_color_pair(COLOR_GRAY))

            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            text_parts_list = []
            if show_percent:
                text_parts_list.append(f"{int(ratio_value * 100)}%")
            if show_values:
                text_parts_list.append(f"{current_value}/{max_value}")
            if text_parts_list:
                additional_text = " " + " ".join(text_parts_list)
                screen.addstr(position_y, position_x + 1 + bar_width + 1, additional_text, get_color_pair(COLOR_GRAY))
        except curses.error:
            pass

    @staticmethod
    def draw_energy_bar(screen, position_y: int, position_x: int, current_energy: int, max_energy: int, bar_width: int = 0):
        """
        –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞—Ä —ç–Ω–µ—Ä–≥–∏–∏ ‚Äî —Å–∫—Ä—ã–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é, –µ—Å–ª–∏ < BASE_ENERGY_COST.
        """
        if bar_width is None:
            bar_width = HP_BAR_WIDTH

        display_energy_value = 0 if current_energy < BASE_ENERGY_COST else current_energy

        DrawCharacter.draw_progress_bar(
            screen=screen,
            position_y=position_y,
            position_x=position_x,
            current_value=display_energy_value,
            max_value=max_energy,
            bar_width=bar_width,
            bar_color=ENERGY_BAR_COLOR,
            show_percent=False,
            show_values=False
        )

    @staticmethod
    def draw_hp_bar(screen, position_y: int, position_x: int, character, bar_width: int = 0) -> int:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ HP-–±–∞—Ä–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É.
        """
        if bar_width is None:
            bar_width = HP_BAR_DEFAULT_WIDTH
            
        current_hp_value = getattr(character, 'hp', 0)
        max_hp_value = getattr(character.derived_stats, 'max_hp', 1)
        DrawCharacter.draw_progress_bar(
            screen=screen,
            position_y=position_y,
            position_x=position_x,
            current_value=current_hp_value,
            max_value=max_hp_value,
            bar_width=bar_width,
            bar_color=None,
            show_percent=False,
            show_values=False
        )
        return position_x + bar_width + AFTER_BAR_SPACING

    @staticmethod
    def draw_energy_bar_direct(screen, position_y: int, position_x: int, character, bar_width: int = 0) -> int:
        """
        –£–¥–æ–±–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏.
        """
        if bar_width is None:
            bar_width = ENERGY_BAR_DEFAULT_WIDTH
            
        current_energy_value = getattr(character, 'energy', 0)
        max_energy_value = getattr(character.derived_stats, 'max_energy', 1)
        DrawCharacter.draw_energy_bar(
            screen=screen,
            position_y=position_y,
            position_x=position_x,
            current_energy=current_energy_value,
            max_energy=max_energy_value,
            bar_width=bar_width
        )
        return position_x + bar_width + AFTER_BAR_SPACING

    # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –∏—Ö —Ç–∞–º –µ—â–µ –Ω–µ—Ç
# import curses
# from Config.curses_config import get_color_pair, COLOR_GRAY

    @staticmethod
    def draw_status_effects(screen, position_y: int, position_x: int, character, max_width: int = 0) -> int:
        """
        –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –≤–∏–¥–µ –∏–∫–æ–Ω–æ–∫.
        
        Args:
            screen: –≠–∫—Ä–∞–Ω curses –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏.
            position_y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏.
            position_x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏.
            character: –û–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
            max_width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
            
        Returns:
            int: –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è X –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏.
        """
        if max_width is None:
            max_width = STATUS_EFFECTS_MAX_WIDTH
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            active_effects_list = character.get_active_status_effects()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é X
            if not active_effects_list:
                return position_x

            # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 5 –ø–µ—Ä–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            displayed_effects = active_effects_list[:5]
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–∫–æ–Ω–∫–∞–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
            effect_icons: list = []
            current_width = 0
            
            for effect in displayed_effects:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É —ç—Ñ—Ñ–µ–∫—Ç–∞ –µ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç icon –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –∏–º–µ–Ω–∏
                icon = getattr(effect, 'icon', effect.name[0] if effect.name else '?')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –µ—â–µ –æ–¥–∏–Ω —ç—Ñ—Ñ–µ–∫—Ç
                icon_width = len(icon)
                spacing = 1 if effect_icons else 0  # –ü—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
                
                if current_width + spacing + icon_width <= max_width:
                    effect_icons.append(icon)
                    current_width += spacing + icon_width
                else:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
                    if current_width + 3 <= max_width:
                        # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
                        if effect_icons:
                            effect_icons[-1] = '..' if len('..') <= max_width - (current_width - len(effect_icons[-1])) else '.'
                        else:
                            effect_icons.append('.' * min(3, max_width))
                    break
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
            effects_text = ' '.join(effect_icons) if effect_icons else ''
            
            # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            if effects_text:
                screen.addstr(position_y, position_x, effects_text)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é X –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            return position_x + len(effects_text) + DEFAULT_SPACING
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é X
            pass
            
        return position_x

    @classmethod
    def draw_character_row(cls, screen, character, position_y: int, position_x: int, is_player: bool = True):
        """
        –ü–æ–ª–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        """
        current_x_position = position_x

        # 1. –ò–º—è
        current_x_position = cls.draw_character_name(screen, position_y, current_x_position, character)
        current_x_position += DEFAULT_SPACING

        # 2. HP
        current_x_position = cls.draw_hp_bar(screen, position_y, current_x_position, character, HP_BAR_WIDTH)
        current_x_position += DEFAULT_SPACING

        # 3. Energy
        current_x_position = cls.draw_energy_bar_direct(screen, position_y, current_x_position, character, ENERGY_BAR_WIDTH)
        current_x_position += DEFAULT_SPACING

        # 4. –≠—Ñ—Ñ–µ–∫—Ç—ã
        cls.draw_status_effects(screen, position_y, current_x_position, character, max_width=STATUS_EFFECTS_MAX_WIDTH)
        return current_x_position

- Utils/UI/key_hints.py
# Utils/key_hints.py - –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏—à

import curses
from typing import List, Tuple, Optional
from abc import ABC, abstractmethod
from Config.curses_config import get_color_pair, COLOR_GRAY

class KeyHints(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∫–ª–∞–≤–∏—à"""
    
    def __init__(self) -> None:
        self.pair_separator: str = " : "      # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä—ã (–∫–ª–∞–≤–∏—à–∞ : –æ–ø–∏—Å–∞–Ω–∏–µ)
        self.group_separator: str = " ‚îÇ "     # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
        self._hint_color = None
    
    @property
    def hint_color(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ curses"""
        if self._hint_color is None:
            self._hint_color = get_color_pair(COLOR_GRAY) | curses.A_DIM
        return self._hint_color
    
    @abstractmethod
    def get_hints(self) -> List[Tuple[str, int]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (—Ç–µ–∫—Å—Ç, —Ü–≤–µ—Ç)
        –î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–∞—Ä—ã: –∫–ª–∞–≤–∏—à–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–ª–∞–≤–∏—à–∞, –æ–ø–∏—Å–∞–Ω–∏–µ...
        
        Returns:
            List[Tuple[str, int]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏, —Ü–≤–µ—Ç curses)
        """
        pass
    
    def display_hints(self, stdscr: curses.window, start_y: Optional[int] = None) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ (2 —Å—Ç—Ä–æ–∫–∏)
        –ï—Å–ª–∏ start_y –Ω–µ —É–∫–∞–∑–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é
        
        Args:
            stdscr: –û–∫–Ω–æ curses –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            start_y: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ Y (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        """
        try:
            height, width = stdscr.getmaxyx()
            
            # –ï—Å–ª–∏ start_y –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏
            if start_y is None:
                start_y = height - 2
            
            # –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            if start_y < height:
                stdscr.addstr(start_y, 0, "‚îÄ" * (width - 1), self.hint_color)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
            hints_y = start_y + 1
            if hints_y < height:
                self._draw_hints_line(stdscr, hints_y, 2, width - 4)
                
        except curses.error:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    
    def _draw_hints_line(self, stdscr: curses.window, y: int, x: int, max_width: int) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–¥—Å–∫–∞–∑–æ–∫
        
        Args:
            stdscr: –û–∫–Ω–æ curses –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            y: –ü–æ–∑–∏—Ü–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            x: –ü–æ–∑–∏—Ü–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            max_width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
        """
        try:
            hints_data: List[Tuple[str, int]] = self.get_hints()
            if not hints_data:
                return
            
            current_x: int = x
            max_x: int = x + max_width - 2
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–∞—Ä–∞–º–∏ (–∫–ª–∞–≤–∏—à–∞ + –æ–ø–∏—Å–∞–Ω–∏–µ)
            for i in range(0, len(hints_data), 2):
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
                if i > 0:
                    if current_x + len(self.group_separator) < max_x:
                        stdscr.addstr(y, current_x, self.group_separator, self.hint_color)
                        current_x += len(self.group_separator)
                    else:
                        break
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏—à—É
                key_text, key_color = hints_data[i]
                if current_x + len(key_text) < max_x:
                    stdscr.addstr(y, current_x, key_text, key_color)
                    current_x += len(key_text)
                else:
                    break
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä—ã
                if current_x + len(self.pair_separator) < max_x:
                    stdscr.addstr(y, current_x, self.pair_separator, self.hint_color)
                    current_x += len(self.pair_separator)
                else:
                    break
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                if i + 1 < len(hints_data):
                    desc_text, desc_color = hints_data[i + 1]
                    if current_x + len(desc_text) < max_x:
                        stdscr.addstr(y, current_x, desc_text, desc_color)
                        current_x += len(desc_text)
                    else:
                        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
                        if current_x + 3 < max_x:
                            stdscr.addstr(y, current_x, "...", self.hint_color)
                        break
                else:
                    break
                    
        except curses.error:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏


class MainWindowHints(KeyHints):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–≥—Ä—ã"""
    
    def get_hints(self) -> List[Tuple[str, int]]:
        
        hints_dict = {
            "Enter": "–ù–∞—á–∞—Ç—å –±–æ–π",
            "I": "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", 
            "S": "–£–º–µ–Ω–∏—è",
            "R": "–ú–∞–≥–∞–∑–∏–Ω",
            "F12": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "H": "–ü–æ–º–æ—â—å",
            "C": "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥",
            "Q": "–í—ã—Ö–æ–¥"
        }
        
        return [
            item 
            for key, desc in hints_dict.items() 
            for item in [(key, self.hint_color), (desc, self.hint_color)]
        ]


class InventoryHints(KeyHints):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ–∫–Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    
    def get_hints(self) -> List[Tuple[str, int]]:
        return [
            ("‚Üê ‚Üí", self.hint_color),
            ("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤", self.hint_color),
            ("Q", self.hint_color),
            ("–ù–∞–∑–∞–¥", self.hint_color)
        ]


class AbilitiesHints(KeyHints):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ–∫–Ω–∞ —É–º–µ–Ω–∏–π"""
    
    def get_hints(self) -> List[Tuple[str, int]]:
        return [
            ("‚Üê ‚Üí", self.hint_color),
            ("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤", self.hint_color),
            ("‚Üë/‚Üì", self.hint_color),
            ("–Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É–º–µ–Ω–∏—è–º", self.hint_color),
            ("Q", self.hint_color),
            ("–ù–∞–∑–∞–¥", self.hint_color)
        ]


class ShopHints(KeyHints):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ–∫–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    
    def get_hints(self) -> List[Tuple[str, int]]:
        return [
            ("‚Üê ‚Üí", self.hint_color),
            ("–ù–∞–≤–∏–≥–∞—Ü–∏—è", self.hint_color),
            ("Enter", self.hint_color),
            ("–ö—É–ø–∏—Ç—å", self.hint_color),
            ("Q", self.hint_color),
            ("–ù–∞–∑–∞–¥", self.hint_color)
        ]


class BattleHints(KeyHints):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ–∫–Ω–∞ –±–æ—è"""
    
    def get_hints(self) -> List[Tuple[str, int]]:
        return [
            ("–ü—Ä–æ–±–µ–ª", self.hint_color),
            ("–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥", self.hint_color),
            ("Q", self.hint_color),
            ("–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–æ–π", self.hint_color)
        ]


class StatisticHints(KeyHints):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ–∫–æ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def get_hints(self) -> List[Tuple[str, int]]:
        return [
            ("‚Üë‚Üì", self.hint_color),
            ("–ù–∞–≤–∏–≥–∞—Ü–∏—è", self.hint_color),
            ("Enter", self.hint_color),
            ("–í—ã–±—Ä–∞—Ç—å", self.hint_color),
            ("Q", self.hint_color),
            ("–ù–∞–∑–∞–¥", self.hint_color)
        ]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
MAIN_HINTS: MainWindowHints = MainWindowHints()
INVENTORY_HINTS: InventoryHints = InventoryHints()
ABILITIES_HINTS: AbilitiesHints = AbilitiesHints()
SHOP_HINTS: ShopHints = ShopHints()
BATTLE_HINTS: BattleHints = BattleHints()
STATISTICS_HINTS: StatisticHints = StatisticHints()

- Utils/UI/window.py
# Utils/UI/window.py
"""
–ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–æ–Ω –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ curses.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—Ä–∫–∞—Å –¥–ª—è –≤—Å–µ—Ö –æ–∫–æ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è
–µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–ª–æ, —Ñ—É—Ç–µ—Ä) –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞.
"""

import curses
from abc import ABC, abstractmethod
from typing import Optional, Any


class Window(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞, –∞ —Ç–∞–∫–∂–µ
    –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö.
    """

    # -------------------------------------------------------------------------
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    # -------------------------------------------------------------------------

    def __init__(self, stdscr: curses.window) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –æ–∫–Ω–æ.

        Args:
            stdscr: –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ curses, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ wrapper'–æ–º.
        """
        self.stdscr: curses.window = stdscr
        self.height: int = 0
        self.width: int = 0
        self.hint_class: Optional[Any] = None # –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–ª–∞—Å—Å —Ç–∏–ø–∞ KeyHints

    # -------------------------------------------------------------------------
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∫–Ω–∞
    # -------------------------------------------------------------------------

    def run(self) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∫–Ω–∞.

        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤, –æ—á–∏—Å—Ç–∫—É —ç–∫—Ä–∞–Ω–∞, –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
        –æ–∫–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞
        `_handle_input` –Ω–µ –≤–µ—Ä–Ω—ë—Ç True (—Å–∏–≥–Ω–∞–ª –¥–ª—è –≤—ã—Ö–æ–¥–∞).
        """
        while True:
            try:
                self.height, self.width = self.stdscr.getmaxyx()
                self.stdscr.clear()

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–∫–Ω–∞
                self._display_header()
                self._display_body()
                self._display_footer()

                self.stdscr.refresh()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
                key: int = self.stdscr.getch()
                if self._handle_input(key):
                    break

            except curses.error:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ –æ–∫–Ω–∞
                pass
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ü–∏–∫–ª–µ
                pass

    # -------------------------------------------------------------------------
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞: –ó–∞–≥–æ–ª–æ–≤–æ–∫
    # -------------------------------------------------------------------------

    def _display_header(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞."""
        header_text: str = self.get_header_text()
        if header_text and self.height > 1:
            try:
                centered_x: int = max(0, self.width // 2 - len(header_text) // 2)
                self.stdscr.addstr(0, centered_x, header_text, self.get_header_style())
                self.stdscr.addstr(1, 0, "‚îÄ" * (self.width - 1), self.get_separator_style())
            except curses.error:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
                pass

    @abstractmethod
    def get_header_text(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞.

        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ.

        Returns:
            str: –¢–µ–∫—Å—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –æ–∫–Ω–∞.
        """
        pass

    def get_header_style(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞.

        Returns:
            int: –°—Ç–∏–ª—å curses –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é curses.A_BOLD).
        """
        return curses.A_BOLD

    # -------------------------------------------------------------------------
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞: –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    # -------------------------------------------------------------------------

    @abstractmethod
    def _display_body(self) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞.

        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ.
        """
        pass

    # -------------------------------------------------------------------------
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞: –§—É—Ç–µ—Ä (–ø–æ–¥—Å–∫–∞–∑–∫–∏)
    # -------------------------------------------------------------------------

    def _display_footer(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–ª–∞–≤–∏—à–∞–º."""
        if self.hint_class and hasattr(self.hint_class, 'display_hints'):
            try:
                self.hint_class.display_hints(self.stdscr)
            except curses.error:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
                pass

    def get_separator_style(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π.

        Returns:
            int: –°—Ç–∏–ª—å curses –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é curses.A_DIM).
        """
        return curses.A_DIM

    # -------------------------------------------------------------------------
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
    # -------------------------------------------------------------------------

    @abstractmethod
    def _handle_input(self, key: int) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.

        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ.

        Args:
            key (int): –ö–æ–¥ –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏.

        Returns:
            bool: True, –µ—Å–ª–∏ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å—Å—è, –∏–Ω–∞—á–µ False.
        """
        pass

- Utils/UI/abilities_window.py
# Utils/UI/abilities_window.py
"""
–û–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–º–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —Ä–µ–∞–ª–∏–∑—É—é—â–µ–µ –ø–∞—Ç—Ç–µ—Ä–Ω Window.
"""

import curses
from typing import List, Dict, Any, TYPE_CHECKING

# –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ç–∏–ø–æ–≤
# Player –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ get_player_abilities
from Characters.player_classes import Player, Warrior, Mage, Healer, Rogue, Archer, Tank

from Utils.UI.window import Window # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
from Utils.UI.ability_cards import AbilityCardNavigator
from Config.curses_config import get_color_pair, COLOR_CYAN, COLOR_GRAY, COLOR_WHITE, COLOR_MAGENTA, COLOR_YELLOW

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
from Utils.UI.key_hints import AbilitiesHints # <-- –ò–∑–º–µ–Ω–µ–Ω–∏–µ 1: –ò–º–ø–æ—Ä—Ç

# === –ö–û–ù–°–¢–ê–ù–¢–´ (–æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∞–ª—å–Ω—ã–º —É–º–µ–Ω–∏—è–º) ===
TAB_SPACING = 4
HEADER_HEIGHT = 4
ABILITIES_START_Y = 6
ABILITIES_START_X = 2
BOTTOM_MARGIN = 2

# –£–±–∏—Ä–∞–µ–º CLASS_ABILITIES, —Ç–∞–∫ –∫–∞–∫ –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
# DEFAULT_ABILITIES —Ç–∞–∫–∂–µ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

def get_player_abilities(player: Player) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–º–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–∏–≥–æ–¥–Ω–æ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ AbilityManager –∏–≥—Ä–æ–∫–∞.
    Args:
        player: –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞.
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —É–º–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫.
    """
    abilities_list = []
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (–∫—Ä–æ–º–µ Attack –∏ Rest)
    for name, ability_instance in player.ability_manager.active_abilities.items():
        # –ò—Å–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–µ–ø—Ä–æ–∫–∞—á–∏–≤–∞–µ–º—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if name in ["Attack", "Rest"]:
            continue
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        ability_data = {
            "name": ability_instance.name,
            "description": ability_instance.description,
            "level": getattr(ability_instance, 'level', 0),
            "max_level": getattr(ability_instance, 'max_level', 5), # –£–º–æ–ª—á–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç max_level
            "energy": getattr(ability_instance, 'energy_cost', 0),
            "cooldown": getattr(ability_instance, 'cooldown', 0),
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å —É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            # "icon": getattr(ability_instance, 'icon', "")
        }
        abilities_list.append(ability_data)
        
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    for name, ability_instance in player.ability_manager.passive_abilities.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        ability_data = {
            "name": ability_instance.name,
            "description": ability_instance.description,
            "level": getattr(ability_instance, 'level', 0),
            "max_level": getattr(ability_instance, 'max_level', 5), # –£–º–æ–ª—á–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç max_level
            # –ü–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É—é—Ç —ç–Ω–µ—Ä–≥–∏–∏ –∏ –Ω–µ –∏–º–µ—é—Ç –∫—É–ª–¥–∞—É–Ω–∞
            "energy": 0,
            "cooldown": 0,
            # "icon": getattr(ability_instance, 'icon', "")
        }
        abilities_list.append(ability_data)
        
    return abilities_list


class AbilitiesScreenWindow(Window):
    """
    –û–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É–º–µ–Ω–∏—è–º –∏–≥—Ä–æ–∫–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AbilityCardNavigator –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫.
    """

    def __init__(self, stdscr: curses.window, players: List[Player]) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–∫–Ω–æ —É–º–µ–Ω–∏–π.

        Args:
            stdscr: –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ curses.
            players: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤.
        """
        super().__init__(stdscr)
        self.players: List[Player] = players
        self.current_tab: int = 0 # –ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ (–∏–≥—Ä–æ–∫–∞)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä, –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑—å–º–µ–º –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if self.players:
            initial_abilities = get_player_abilities(self.players[0])
            self.navigator = AbilityCardNavigator(initial_abilities)
        else:
            self.navigator = AbilityCardNavigator([])
        
        # <-- –ò–∑–º–µ–Ω–µ–Ω–∏–µ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ -->
        self.hint_class = AbilitiesHints()

    def get_header_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞."""
        return "‚öîÔ∏è –£–ú–ï–ù–ò–Ø –ì–ï–†–û–ï–í"

    def _display_body(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞ - —É–º–µ–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤."""
        if not self.players:
            try:
                self.stdscr.addstr(2, 2, "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–º–µ–Ω–∏–π.")
            except curses.error:
                pass
            return

        height, width = self.stdscr.getmaxyx()
        
        try:
            # 1. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            tab_x = 2
            for i, player in enumerate(self.players):
                if i == self.current_tab:
                    self.stdscr.attron(get_color_pair(COLOR_CYAN) | curses.A_BOLD)
                    self.stdscr.addstr(2, tab_x, f"[{player.name}]")
                    self.stdscr.attroff(get_color_pair(COLOR_CYAN) | curses.A_BOLD)
                else:
                    self.stdscr.attron(get_color_pair(COLOR_WHITE))
                    self.stdscr.addstr(2, tab_x, f" {player.name} ")
                    self.stdscr.attroff(get_color_pair(COLOR_WHITE))
                tab_x += len(player.name) + TAB_SPACING

            self.stdscr.addstr(3, 0, "‚îÄ" * (width - 1), get_color_pair(COLOR_GRAY) | curses.A_DIM)

            # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            current_player = self.players[self.current_tab]
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            current_abilities = get_player_abilities(current_player)
            self.navigator.abilities = current_abilities
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –≤—ã—à–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            if self.navigator.current_index >= len(current_abilities) and current_abilities:
                self.navigator.current_index = 0
            elif not current_abilities:
                 self.navigator.current_index = 0

            # 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —É–º–µ–Ω–∏–π
            self.navigator.display_abilities_grid(
                self.stdscr,
                start_y=ABILITIES_START_Y,
                start_x=ABILITIES_START_X,
                max_width=width - 4 # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—è
            )

        except curses.error:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –º–∞–ª–µ–Ω—å–∫–æ–º –æ–∫–Ω–µ
            pass
        except Exception as e:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            try:
                self.stdscr.addstr(2, 2, f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            except curses.error:
                pass

    def _handle_input(self, key: int) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.

        Args:
            key: –ö–æ–¥ –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏.

        Returns:
            bool: True, –µ—Å–ª–∏ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 'q'), –∏–Ω–∞—á–µ False.
        """
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        if key == 9: # Tab
            if len(self.players) > 1:
                self.current_tab = (self.current_tab + 1) % len(self.players)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
                self.navigator.current_index = 0
                return False # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É–º–µ–Ω–∏—è–º
        if key == curses.KEY_RIGHT:
            self.navigator.next_ability()
            return False
        if key == curses.KEY_LEFT:
            self.navigator.prev_ability()
            return False

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
        if key == ord('q') or key == ord('Q'):
            return True # –°–∏–≥–Ω–∞–ª –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–∫–Ω–∞

        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏—à–∏
        return False


- Utils/UI/inventory_window.py
# Utils/UI/inventory_window.py
"""
–û–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, —Ä–µ–∞–ª–∏–∑—É—é—â–µ–µ –ø–∞—Ç—Ç–µ—Ä–Ω Window.
"""

import curses
from typing import List, Dict, Any, TYPE_CHECKING

# –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ç–∏–ø–æ–≤
if TYPE_CHECKING:
    from Characters.player_classes import Player # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ç–∏–ø –¥–ª—è players
    # Item - —ç—Ç–æ Protocol, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ inventory
    from Inventory.inventory import Item 

from Utils.UI.window import Window # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
from Inventory.inventory import get_inventory, Item
from Utils.UI.key_hints import InventoryHints
from Config.curses_config import get_color_pair, COLOR_CYAN, COLOR_GRAY, COLOR_WHITE, COLOR_MAGENTA, COLOR_YELLOW

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
TAB_SPACING = 4
HEADER_HEIGHT = 4
HERO_STATS_START_Y = 4
INVENTORY_START_Y = 11
BOTTOM_MARGIN = 2

# –û–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ key_hints.py
# (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å –∫–∞–∫ InventoryHints, –µ—Å–ª–∏ –Ω–µ—Ç - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –Ω–∏–∂–µ)
# INVENTORY_HINTS_DATA = [
#     ("‚Üê ‚Üí", "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤"),
#     ("Q", "–ù–∞–∑–∞–¥")
# ]
# class InventoryHints(KeyHints):
#     def get_hints(self):
#         return [(hint[0], self.hint_color) for hint in INVENTORY_HINTS_DATA] + \
#                [(hint[1], self.hint_color) for hint in INVENTORY_HINTS_DATA]

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ INVENTORY_HINTS —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ key_hints.py



def _display_hero_stats_in_inventory(stdscr: curses.window, player: Any, y: int, x: int, max_width: int) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (–±–µ–∑ –±–∞—Ä–æ–≤, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç).
    –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ display_hero_stats_in_inventory –∏–∑ output.txt.
    """
    try:
        height, width = stdscr.getmaxyx()
        
        # –ò–º—è –≥–µ—Ä–æ—è
        stdscr.addstr(y, x, player.name, get_color_pair(COLOR_CYAN) | curses.A_BOLD)
        
        # –£—Ä–æ–≤–µ–Ω—å –∏ –∫–ª–∞—Å—Å
        level_class_text = f"[–£—Ä.{player.level} {player.role.capitalize()}]"
        stdscr.addstr(y, x + len(player.name) + 1, level_class_text, get_color_pair(COLOR_WHITE))
        
        # HP –∏ –≠–Ω–µ—Ä–≥–∏—è
        hp_text = f"HP: {player.hp}/{player.derived_stats.max_hp}"
        energy_text = f"–≠–Ω–µ—Ä–≥–∏—è: {player.energy}/{player.derived_stats.max_energy}"
        stdscr.addstr(y + 1, x, hp_text, get_color_pair(COLOR_WHITE))
        stdscr.addstr(y + 1, x + len(hp_text) + 2, energy_text, get_color_pair(COLOR_WHITE))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        stats_text = f"–°–∏–ª–∞: {player.stats.strength}  –õ–æ–≤–∫: {player.stats.dexterity}  –¢–µ–ª–æ: {player.stats.constitution}  –ò–Ω—Ç: {player.stats.intelligence}"
        stdscr.addstr(y + 2, x, stats_text, get_color_pair(COLOR_WHITE))
        
        # –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞
        equip_col_x = x + max_width // 2 # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        if hasattr(player, 'equipment_slots'):
            weapon_name = getattr(player.equipped_weapon, 'name', '-') if hasattr(player, 'equipped_weapon') else '-'
            armor_name = getattr(player.equipped_armor, 'name', '-') if hasattr(player, 'equipped_armor') else '-'
            accessory_name = getattr(player.equipped_accessory, 'name', '-') if hasattr(player, 'equipped_accessory') else '-'
            
            stdscr.addstr(y + 1, equip_col_x, f"–û—Ä—É–∂–∏–µ: {weapon_name}", get_color_pair(COLOR_WHITE))
            stdscr.addstr(y + 2, equip_col_x, f"–ë—Ä–æ–Ω—è: {armor_name}", get_color_pair(COLOR_WHITE))
            stdscr.addstr(y + 3, equip_col_x, f"–ê–∫—Å–µ—Å—Å—É–∞—Ä: {accessory_name}", get_color_pair(COLOR_WHITE))
        else:
            stdscr.addstr(y + 1, equip_col_x, "–û—Ä—É–∂–∏–µ: -", get_color_pair(COLOR_GRAY))
            stdscr.addstr(y + 2, equip_col_x, "–ë—Ä–æ–Ω—è: -", get_color_pair(COLOR_GRAY))
            stdscr.addstr(y + 3, equip_col_x, "–ê–∫—Å–µ—Å—Å—É–∞—Ä: -", get_color_pair(COLOR_GRAY))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if y + 4 < height:
            separator_length = min(max_width - 4, width - x - 1)
            stdscr.addstr(y + 4, x, "‚îÄ" * separator_length, get_color_pair(COLOR_GRAY) | curses.A_DIM)
            
    except curses.error:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏


class InventoryWindow(Window):
    """
    –û–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≥—Ä—É–ø–ø—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–æ–≤.
    """

    def __init__(self, stdscr: curses.window, players: List[Any]) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.

        Args:
            stdscr: –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ curses.
            players: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤.
        """
        super().__init__(stdscr)
        self.players: List[Any] = players
        self.current_tab: int = 0 # –ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ (–∏–≥—Ä–æ–∫–∞)
        self.inventory = get_inventory() # –ü–æ–ª—É—á–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.hint_class = InventoryHints()

    def get_header_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞."""
        return "üéí –ò–ù–í–ï–ù–¢–ê–†–¨"

    def _display_body(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞ - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""
        if not self.players:
            try:
                self.stdscr.addstr(2, 2, "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.")
            except curses.error:
                pass
            return

        height, width = self.stdscr.getmaxyx()
        
        try:
            # 1. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            tab_x = 2
            for i, player in enumerate(self.players):
                if i == self.current_tab:
                    self.stdscr.attron(get_color_pair(COLOR_CYAN) | curses.A_BOLD)
                    self.stdscr.addstr(2, tab_x, f"[{player.name}]")
                    self.stdscr.attroff(get_color_pair(COLOR_CYAN) | curses.A_BOLD)
                else:
                    self.stdscr.attron(get_color_pair(COLOR_WHITE))
                    self.stdscr.addstr(2, tab_x, f" {player.name} ")
                    self.stdscr.attroff(get_color_pair(COLOR_WHITE))
                tab_x += len(player.name) + TAB_SPACING

            self.stdscr.addstr(3, 0, "‚îÄ" * (width - 1), get_color_pair(COLOR_GRAY) | curses.A_DIM)

            # 2. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –≥–µ—Ä–æ—è
            current_player = self.players[self.current_tab]
            max_content_width = width - 4
            _display_hero_stats_in_inventory(
                self.stdscr, 
                current_player, 
                HERO_STATS_START_Y, 
                2, 
                max_content_width
            )

            # 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            inventory_start_y = INVENTORY_START_Y
            self.stdscr.addstr(inventory_start_y, 2, "üß≥ –ò–ù–í–ï–ù–¢–ê–†–¨", get_color_pair(COLOR_MAGENTA) | curses.A_BOLD)
            self.stdscr.addstr(inventory_start_y + 1, 0, "‚îÄ" * (width - 1), get_color_pair(COLOR_GRAY) | curses.A_DIM)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
            gold_y = inventory_start_y + 2
            self.stdscr.addstr(gold_y, 4, f"üí∞ –ó–æ–ª–æ—Ç–æ: {self.inventory.get_gold()}", get_color_pair(COLOR_YELLOW))

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            item_objects: Dict[Item, int] = self.inventory.get_all_items()
            item_y = inventory_start_y + 4
            item_index = 0

            if not item_objects:
                self.stdscr.addstr(item_y, 4, "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç", get_color_pair(COLOR_GRAY))
            else:
                for item_object, quantity in item_objects.items():
                    if item_y + item_index >= height - BOTTOM_MARGIN:
                        # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
                        self.stdscr.addstr(item_y + item_index, 4, "...", get_color_pair(COLOR_GRAY))
                        break
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞
                        item_name = getattr(item_object, 'name', str(item_object))
                        rarity_color = getattr(item_object, 'get_rarity_color', lambda: COLOR_WHITE)()
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞
                        item_line = f"‚ó¶ {item_name}"
                        if quantity > 1:
                            item_line += f" (x{quantity})"
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                        self.stdscr.addstr(item_y + item_index, 4, item_line, get_color_pair(rarity_color))
                        item_index += 1
                    except Exception: # –ù–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
                        item_name = getattr(item_object, 'name', str(item_object))
                        self.stdscr.addstr(item_y + item_index, 4, f"‚ó¶ {item_name}: {quantity}", get_color_pair(COLOR_WHITE))
                        item_index += 1

        except curses.error:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –º–∞–ª–µ–Ω—å–∫–æ–º –æ–∫–Ω–µ
            pass
        except Exception as e:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            try:
                self.stdscr.addstr(2, 2, f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
            except curses.error:
                pass

    def _handle_input(self, key: int) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.

        Args:
            key: –ö–æ–¥ –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏.

        Returns:
            bool: True, –µ—Å–ª–∏ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 'q'), –∏–Ω–∞—á–µ False.
        """
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        # –°—Ç—Ä–µ–ª–∫–∏ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –∏ Tab
        if key == curses.KEY_LEFT or key == curses.KEY_RIGHT or key == 9: # 9 - –∫–æ–¥ –∫–ª–∞–≤–∏—à–∏ Tab
            if len(self.players) > 1:
                if key == curses.KEY_LEFT:
                    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–ª–µ–≤–æ –ø–æ —Å—Ç—Ä–µ–ª–∫–µ
                    self.current_tab = (self.current_tab - 1) % len(self.players)
                elif key == curses.KEY_RIGHT or key == 9: # –í–ø—Ä–∞–≤–æ –ø–æ —Å—Ç—Ä–µ–ª–∫–µ –∏–ª–∏ Tab
                    self.current_tab = (self.current_tab + 1) % len(self.players)
            return False # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
        if key == ord('q') or key == ord('Q'):
            return True # –°–∏–≥–Ω–∞–ª –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–∫–Ω–∞

        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏—à–∏
        return False


- Utils/UI/main_window.py
# Utils/UI/main_window.py
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –æ–∫–Ω–æ.
"""

import curses
from typing import List
from Characters.player_classes import Player

from Utils.UI.window import Window
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –æ–∫–Ω–æ
from Utils.UI.event_window import EventWindow

class MainWindow(Window):
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–≥—Ä—ã - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞.
    –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ—Ç EventWindow.
    """

    def __init__(self, stdscr: curses.window, players: List[Player]) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ.

        Args:
            stdscr: –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ curses.
            players: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤.
        """
        super().__init__(stdscr)
        self.players: List[Player] = players
        # MainWindow –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–∞–º –ø–æ —Å–µ–±–µ

    def get_header_text(self) -> str:
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è."""
        return ""

    def _display_body(self) -> None:
        """–ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º."""
        pass

    def _handle_input(self, key: int) -> bool:
        """
        –í–≤–æ–¥ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –æ–∫–Ω–µ.
        """
        # MainWindow –Ω–µ –∂–∏–≤–µ—Ç –¥–æ–ª–≥–æ, run() –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç EventWindow
        return True 

    def run(self) -> None:
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º run –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ EventWindow.
        """
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –æ–∫–Ω–æ
        # –≠—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤, –ø–æ–∫–∞ EventWindow –Ω–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è
        event_window = EventWindow(self.stdscr, self.players)
        event_window.run()
        
        # –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è EventWindow, MainWindow.run —Ç–æ–∂–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
        # –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ main.py


- Utils/UI/event_window.py
# Utils/UI/event_window.py
"""
–û—Å–Ω–æ–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –æ–∫–Ω–æ. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.
"""

import curses
from typing import List
from Characters.player_classes import Player
from Battle.battle_logger import battle_logger
from Utils.commands import CommandHandler
from Utils.display import create_screen_observer, update_display
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º create_enemies –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–∞–≥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—è
from Characters.char_utils import create_enemies

from Utils.UI.window import Window
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
from Utils.UI.key_hints import MainWindowHints

class EventWindow(Window):
    """
    –û—Å–Ω–æ–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –æ–∫–Ω–æ.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –ª–æ–≥ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥.
    """

    def __init__(self, stdscr: curses.window, players: List[Player]) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–≥—Ä—ã.

        Args:
            stdscr: –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ curses.
            players: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤.
        """
        super().__init__(stdscr)
        self.players: List[Player] = players
        
        # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´ ===
        # 1. –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π)
        self.enemies: List = []
        
        # 2. –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
        self.command_handler = CommandHandler(self.players, self.enemies, self.stdscr)
        
        # 3. –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç –ª–∏ —ç—Ç–æ —Å –¥—Ä—É–≥–∏–º–∏ observer'–∞–º–∏
        # –ï—Å–ª–∏ MainWindow —Å–æ–∑–¥–∞–≤–∞–ª —Å–≤–æ–π observer, –µ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        self.screen_observer = create_screen_observer(self.stdscr, self.command_handler)
        battle_logger.add_observer(self.screen_observer)
        
        # 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Ä–∞–Ω–∞ (–º–æ–≥—É—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å setup_screen, –Ω–æ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏)
        self.stdscr.nodelay(False)  # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
        self.stdscr.keypad(True)    # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
        
        # 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.hint_class = MainWindowHints()
        
        # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        battle_logger.log_system_message("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ–±–∞—Ç—Ç–ª–µ—Ä!")
        battle_logger.log_system_message("–ù–∞–∂–º–∏—Ç–µ 'H' –¥–ª—è –ø–æ–º–æ—â–∏")

    def get_header_text(self) -> str:
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫."""
        return "üè∞ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ"

    def _display_body(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é update_display –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try:
            update_display(self.stdscr, self.command_handler)
        except curses.error:
            pass

    def _handle_input(self, key: int) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ CommandHandler.

        Args:
            key: –ö–æ–¥ –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏.

        Returns:
            bool: True, –µ—Å–ª–∏ –∏–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è (–∫–æ–º–∞–Ω–¥–∞ 'q').
        """
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–æ–º–∞–Ω–¥
            # process_input –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã
            should_exit = self.command_handler.process_input(key)
            return should_exit
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
            battle_logger.log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
            
        return False # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def run(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∫–Ω–∞.
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.
        """
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–∏–∫–ª Window
            super().run()
        finally:
            # –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ run, –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            try:
                battle_logger.remove_observer(self.screen_observer)
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ observer'–∞, –Ω–æ –º–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
                # battle_logger.log_system_message(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
                pass


- Utils/GameState/states.py
# GameState/states.py
"""
–ú–æ–¥—É–ª—å, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∏ –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω State –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ (–º–µ–Ω—é, –±–æ–π, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ —Ç.–¥.).
"""

from abc import ABC, abstractmethod
import curses
from typing import TYPE_CHECKING, Optional, Any

# –ò—Å–ø–æ–ª—å–∑—É–µ–º TYPE_CHECKING, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
# –ø—Ä–∏ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∏–ø–æ–≤
if TYPE_CHECKING:
    from Utils.GameState.context import GameContext
    from Characters.character import Player

class GameState(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä—ã."""

    def __init__(self):
        self.context: Optional['GameContext'] = None

    def set_context(self, context: 'GameContext'):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä—ã."""
        self.context = context

    @abstractmethod
    def enter_state(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        pass

    @abstractmethod
    def exit_state(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        pass

    @abstractmethod
    def handle_input(self, key: int):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
        –ú–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ self.context.set_state().
        """
        pass

    @abstractmethod
    def update(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)."""
        pass

    @abstractmethod
    def render(self, stdscr: curses.window):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —ç—Ç–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
        pass


# --- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---

class MenuState(GameState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    def enter_state(self):
        # –ú–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º–µ–Ω—é
        pass

    def exit_state(self):
        # –ú–æ–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º–µ–Ω—é
        pass

    def handle_input(self, key: int):
        if key == ord('q') or key == ord('Q'):
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.context.set_exit_flag(True)
        elif key == ord('\n'): # Enter
            # –ü—Ä–∏–º–µ—Ä: –Ω–∞—á–∞—Ç—å –±–æ–π
            from Utils.GameState.states import BattleState # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤
            self.context.set_state(BattleState())
        elif key == ord('i') or key == ord('I'):
            # –ü—Ä–∏–º–µ—Ä: –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            from GameState.states import InventoryState
            self.context.set_state(InventoryState())
        elif key == ord('s') or key == ord('S'):
            # –ü—Ä–∏–º–µ—Ä: –æ—Ç–∫—Ä—ã—Ç—å —É–º–µ–Ω–∏—è
            from GameState.states import AbilitiesState
            self.context.set_state(AbilitiesState())
        # ... –¥—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –º–µ–Ω—é ...

    def update(self):
        # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        pass

    def render(self, stdscr: curses.window):
        height, width = stdscr.getmaxyx()
        stdscr.clear()
        try:
            title = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            stdscr.addstr(0, max(0, width // 2 - len(title) // 2), title, curses.A_BOLD)
            
            # –ü—Ä–∏–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if self.context and self.context.players:
                player_name = self.context.players[0].name if self.context.players else "–ì–µ—Ä–æ–π"
                stdscr.addstr(2, 2, f"–ì–µ—Ä–æ–π: {player_name}")
            
            # –ü—Ä–∏–º–µ—Ä –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
            menu_items = [
                "Enter - –ù–∞—á–∞—Ç—å –±–æ–π",
                "I - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                "S - –£–º–µ–Ω–∏—è",
                "Q - –í—ã—Ö–æ–¥"
            ]
            for i, item in enumerate(menu_items):
                stdscr.addstr(4 + i, 2, item)
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–∑ KeyHints
            # (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
            stdscr.addstr(height - 2, 0, "–ù–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É...")
        except curses.error:
            pass


class BattleState(GameState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è."""

    def __init__(self):
        super().__init__()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –±–æ—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.battle_active = True
        self.battle_log = [] # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞

    def enter_state(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—è, —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–∞–≥–æ–≤ –∏ —Ç.–¥.
        self.battle_log.append("–ë–æ–π –Ω–∞—á–∞–ª—Å—è!")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑ BattleManager
        pass

    def exit_state(self):
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –±–æ—è
        self.battle_active = False
        pass

    def handle_input(self, key: int):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ –≤—Ä–µ–º—è –±–æ—è
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–µ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π
        if key == ord('q') or key == ord('Q'):
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –±–æ—è
            from GameState.states import MenuState
            self.context.set_state(MenuState())
        elif key == ord(' '): # –ü—Ä–æ–±–µ–ª - —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
            self.battle_log.append("–•–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω...")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –±–æ—è

    def update(self):
        # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        pass

    def render(self, stdscr: curses.window):
        height, width = stdscr.getmaxyx()
        stdscr.clear()
        try:
            stdscr.addstr(0, 2, "=== –ë–æ–π ===", curses.A_BOLD)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–∞ –±–æ—è (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä)
            for i, log_entry in enumerate(self.battle_log[-(height-4):]): # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                 stdscr.addstr(2 + i, 2, log_entry[:width-4])
            
            stdscr.addstr(height - 2, 0, "–ü—Ä–æ–±–µ–ª - —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥, Q - –≤—ã–π—Ç–∏ –∏–∑ –±–æ—è")
        except curses.error:
            pass


class InventoryState(GameState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""

    def enter_state(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        pass

    def exit_state(self):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        pass

    def handle_input(self, key: int):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        if key == ord('q') or key == ord('Q'):
            from GameState.states import MenuState
            self.context.set_state(MenuState())
        # ... –ª–æ–≥–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é ...

    def update(self):
        pass

    def render(self, stdscr: curses.window):
        height, width = stdscr.getmaxyx()
        stdscr.clear()
        try:
            stdscr.addstr(0, 2, "=== –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ===", curses.A_BOLD)
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ display_inventory –∏–ª–∏ –∫–ª–∞—Å—Å–∞ InventoryWindow
            stdscr.addstr(2, 2, "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...")
            
            stdscr.addstr(height - 2, 0, "Q - –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        except curses.error:
            pass


class AbilitiesState(GameState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —É–º–µ–Ω–∏–π."""

    def enter_state(self):
        pass

    def exit_state(self):
        pass

    def handle_input(self, key: int):
        if key == ord('q') or key == ord('Q'):
            from GameState.states import MenuState
            self.context.set_state(MenuState())
        # ... –ª–æ–≥–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É–º–µ–Ω–∏—è–º ...

    def update(self):
        pass

    def render(self, stdscr: curses.window):
        height, width = stdscr.getmaxyx()
        stdscr.clear()
        try:
            stdscr.addstr(0, 2, "=== –£–º–µ–Ω–∏—è ===", curses.A_BOLD)
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–º–µ–Ω–∏–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ display_abilities_screen –∏–ª–∏ –∫–ª–∞—Å—Å–∞ AbilitiesScreenWindow
            stdscr.addstr(2, 2, "–°–ø–∏—Å–æ–∫ —É–º–µ–Ω–∏–π...")
            
            stdscr.addstr(height - 2, 0, "Q - –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        except curses.error:
            pass

# –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏: StatisticsState, ShopState –∏ —Ç.–¥.

- Utils/GameState/context.py
# GameState/context.py
"""
–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä—ã, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
"""

import curses
from typing import List, Optional, Any
from Utils.GameState.states import GameState, MenuState

class GameContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä—ã, —Ö—Ä–∞–Ω—è—â–∏–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ."""

    def __init__(self, stdscr: curses.window, players: List[Any], enemies: List[Any]):
        self.stdscr = stdscr
        self.players = players
        self.enemies = enemies
        self.current_state: Optional[GameState] = None
        self._should_exit = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.set_state(MenuState())

    def set_state(self, state: GameState):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        if self.current_state:
            self.current_state.exit_state()
        
        self.current_state = state
        self.current_state.set_context(self) # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.current_state.enter_state()

    def set_exit_flag(self, flag: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã."""
        self._should_exit = flag

    def should_exit(self) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã."""
        return self._should_exit

    def handle_input(self, key: int):
        """–ü–µ—Ä–µ–¥–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
        if self.current_state:
            self.current_state.handle_input(key)

    def update(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        if self.current_state:
            self.current_state.update()

    def render(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        if self.current_state:
            self.current_state.render(self.stdscr)

- Utils/UI/Skills/skills_window.py
# Utils/UI/Skills/skills_window.py - –û–∫–Ω–æ —É–º–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

import curses
from typing import List, Dict, Any
from Utils.UI.ability_cards import AbilityCardNavigator
from Config.curses_config import (
    get_color_pair,
    COLOR_CYAN,
    COLOR_GRAY,
    COLOR_WHITE,
    COLOR_MAGENTA,
    COLOR_YELLOW
)
from Utils.UI.key_hints import ABILITIES_HINTS

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
WINDOW_TITLE = "‚öîÔ∏è –£–ú–ï–ù–ò–Ø –ì–ï–†–û–ï–í"
SECTION_TITLE = "–£–ú–ï–ù–ò–Ø –ì–ï–†–û–Ø"
TAB_SPACING = 4
HEADER_HEIGHT = 4
ABILITIES_START_Y = 6
ABILITIES_START_X = 2
BOTTOM_MARGIN = 2

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–º–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
CLASS_ABILITIES = {
    "warrior": {
        "active": [
            {"name": "–†–∞–∑—è—â–∏–π —É–¥–∞—Ä", "level": 3, "cooldown": 2, "energy": 20, "description": "–ú–æ—â–Ω–∞—è –∞—Ç–∞–∫–∞ –ø–æ –æ–¥–Ω–æ–π —Ü–µ–ª–∏"},
            {"name": "–ë–æ–µ–≤–æ–π –∫–ª–∏—á", "level": 2, "cooldown": 4, "energy": 15, "description": "–ü–æ–≤—ã—à–∞–µ—Ç –∞—Ç–∞–∫—É —Å–æ—é–∑–Ω–∏–∫–æ–≤"},
            {"name": "–©–∏—Ç –∏ –º–µ—á", "level": 1, "cooldown": 3, "energy": 25, "description": "–ê—Ç–∞–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —â–∏—Ç–æ–º"},
            {"name": "–ö—Ä–æ–≤–∞–≤–∞—è —è—Ä–æ—Å—Ç—å", "level": 4, "cooldown": 5, "energy": 30, "description": "–£—Ä–æ–Ω –ø–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º"},
            {"name": "–°—Ç–æ–π–∫–∞ –∑–∞—â–∏—Ç–Ω–∏–∫–∞", "level": 2, "cooldown": 3, "energy": 20, "description": "–ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–æ–≤"},
            {"name": "–í—Ç–æ—Ä–æ–µ –¥—ã—Ö–∞–Ω–∏–µ", "level": 1, "cooldown": 6, "energy": 35, "description": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ"}
        ],
        "passive": [
            {"name": "–ñ–µ–ª–µ–∑–Ω–∞—è –≤–æ–ª—è", "level": 3, "description": "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –æ–≥–ª—É—à–µ–Ω–∏—é"},
            {"name": "–ë–æ–µ–≤–æ–π –æ–ø—ã—Ç", "level": 2, "description": "–ü–æ–≤—ã—à–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π –æ–ø—ã—Ç"},
            {"name": "–¢—è–∂–µ–ª–∞—è –±—Ä–æ–Ω—è", "level": 4, "description": "–°–Ω–∏–∂–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω"},
            {"name": "–ë–µ—Å—Å—Ç—Ä–∞—à–∏–µ", "level": 1, "description": "–ò–º–º—É–Ω–∏—Ç–µ—Ç –∫ —Å—Ç—Ä–∞—Ö—É"},
            {"name": "–ú–∞—Å—Ç–µ—Ä —â–∏—Ç–∞", "level": 3, "description": "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ —É—Ä–æ–Ω–∞"},
            {"name": "–ë–µ—Ä—Å–µ—Ä–∫", "level": 2, "description": "–£—Ä–æ–Ω —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ –Ω–∏–∑–∫–æ–º HP"}
        ]
    },
    "mage": {
        "active": [
            {"name": "–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä", "level": 4, "cooldown": 2, "energy": 25, "description": "–û–≥–Ω–µ–Ω–Ω–∞—è –º–∞–≥–∏—è –ø–æ –æ–¥–Ω–æ–π —Ü–µ–ª–∏"},
            {"name": "–ú–æ–ª–Ω–∏—è", "level": 3, "cooldown": 3, "energy": 20, "description": "–¶–µ–ø–Ω–∞—è –º–∞–≥–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞"},
            {"name": "–õ–µ–¥—è–Ω–∞—è —Å—Ç–µ–Ω–∞", "level": 2, "cooldown": 4, "energy": 30, "description": "–°–æ–∑–¥–∞–µ—Ç –∑–∞—â–∏—Ç–Ω—ã–π –±–∞—Ä—å–µ—Ä"},
            {"name": "–ú–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–æ–∂–¥—å", "level": 5, "cooldown": 6, "energy": 40, "description": "–ú–∞—Å—Å–æ–≤–∞—è –∞—Ç–∞–∫–∞ –ø–æ –≤—Ä–∞–≥–∞–º"},
            {"name": "–ú–∞–Ω–∞ –±—É—Ä—è", "level": 3, "cooldown": 4, "energy": 35, "description": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–Ω—É —Å–æ—é–∑–Ω–∏–∫–æ–≤"},
            {"name": "–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è", "level": 2, "cooldown": 3, "energy": 25, "description": "–ò–∑–±–µ–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π –∞—Ç–∞–∫–∏"}
        ],
        "passive": [
            {"name": "–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ", "level": 3, "description": "–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é –∑–∞—â–∏—Ç—É"},
            {"name": "–≠–∫–æ–Ω–æ–º–∏—è –º–∞–Ω—ã", "level": 2, "description": "–°–Ω–∏–∂–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ –º–∞–Ω—ã –Ω–∞ 15%"},
            {"name": "–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "level": 4, "description": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω—ã –∫–∞–∂–¥—ã–π —Ö–æ–¥"},
            {"name": "–ê—Ä–∫–∞–Ω–Ω–∞—è —Å–∏–ª–∞", "level": 3, "description": "–ü–æ–≤—ã—à–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω"},
            {"name": "–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞", "level": 2, "description": "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –º–∞–≥–∏—á–µ—Å–∫–∏–º —ç—Ñ—Ñ–µ–∫—Ç–∞–º"},
            {"name": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –º–∞–≥–∏—è", "level": 1, "description": "–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞"}
        ]
    },
    "rogue": {
        "active": [
            {"name": "–£–¥–∞—Ä –≤ —Å–ø–∏–Ω—É", "level": 4, "cooldown": 3, "energy": 20, "description": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω —Å–∑–∞–¥–∏"},
            {"name": "–Ø–¥", "level": 2, "cooldown": 2, "energy": 15, "description": "–£—Ä–æ–Ω —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º"},
            {"name": "–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å", "level": 3, "cooldown": 4, "energy": 25, "description": "–í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å"},
            {"name": "–û—Ç—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∏–Ω–æ–∫", "level": 3, "cooldown": 3, "energy": 30, "description": "–ê—Ç–∞–∫–∞ —Å –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ–º"},
            {"name": "–ö—Ä—É–≥–æ–≤–æ–π —É–¥–∞—Ä", "level": 2, "cooldown": 3, "energy": 35, "description": "–ê—Ç–∞–∫–∞ –ø–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º"},
            {"name": "–ë—Ä–æ—Å–æ–∫ –Ω–æ–∂–∞", "level": 1, "cooldown": 2, "energy": 15, "description": "–î–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞"}
        ],
        "passive": [
            {"name": "–°–∫—Ä—ã—Ç–Ω—ã–π —à–∞–≥", "level": 3, "description": "–®–∞–Ω—Å –∏–∑–±–µ–∂–∞—Ç—å –∞—Ç–∞–∫–∏"},
            {"name": "–Ø–¥–æ–≤–∏—Ç—ã–µ –∫–ª–∏–Ω–∫–∏", "level": 2, "description": "–í—Å–µ –∞—Ç–∞–∫–∏ –æ—Ç—Ä–∞–≤–ª—è—é—Ç –≤—Ä–∞–≥–æ–≤"},
            {"name": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä", "level": 4, "description": "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∞"},
            {"name": "–ë—ã—Å—Ç—Ä—ã–µ —Ä—É–∫–∏", "level": 2, "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞"},
            {"name": "–í–æ—Ä–æ–≤—Å–∫–∞—è —É–¥–∞—á–∞", "level": 1, "description": "–ü–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤"},
            {"name": "–°–∫—Ä—ã—Ç–Ω—ã–µ –∞—Ç–∞–∫–∏", "level": 3, "description": "–£—Ä–æ–Ω —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ –∞—Ç–∞–∫–µ —Å–∑–∞–¥–∏"}
        ]
    },
    "healer": {
        "active": [
            {"name": "–ò—Å—Ü–µ–ª–µ–Ω–∏–µ", "level": 3, "cooldown": 2, "energy": 20, "description": "–õ–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Ü–µ–ª–∏"},
            {"name": "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–≤–µ—Ç", "level": 4, "cooldown": 4, "energy": 30, "description": "–ú–∞—Å—Å–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ"},
            {"name": "–û—á–∏—â–µ–Ω–∏–µ", "level": 2, "cooldown": 3, "energy": 25, "description": "–°–Ω–∏–º–∞–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã"},
            {"name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ", "level": 3, "cooldown": 5, "energy": 35, "description": "–ü–æ–≤—ã—à–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"},
            {"name": "–í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ", "level": 5, "cooldown": 8, "energy": 50, "description": "–û–∂–∏–≤–ª—è–µ—Ç –ø–∞–≤—à–µ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞"},
            {"name": "–°–≤—è—Ç–æ–π —â–∏—Ç", "level": 2, "cooldown": 3, "energy": 25, "description": "–í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å"}
        ],
        "passive": [
            {"name": "–¶–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–ª–∞", "level": 3, "description": "–ü–æ–≤—ã—à–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è"},
            {"name": "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞", "level": 2, "description": "–°–Ω–∏–∂–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω"},
            {"name": "–≠–º–ø–∞—Ç–∏—è", "level": 4, "description": "–°–æ—é–∑–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —á–∞—Å—Ç—å –ª–µ—á–µ–Ω–∏—è"},
            {"name": "–°–≤—è—Ç–∞—è –º–∞–≥–∏—è", "level": 3, "description": "–ò–º–º—É–Ω–∏—Ç–µ—Ç –∫ –ø—Ä–æ–∫–ª—è—Ç–∏—è–º"},
            {"name": "–î—É—Ö–æ–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "level": 2, "description": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ —Å–æ—é–∑–Ω–∏–∫–æ–≤"},
            {"name": "–ê–Ω–≥–µ–ª—å—Å–∫–∞—è –º–∏–ª–æ—Å—Ç—å", "level": 1, "description": "–®–∞–Ω—Å —Å–ø–∞—Å—Ç–∏ —Å–æ—é–∑–Ω–∏–∫–∞ –æ—Ç —Å–º–µ—Ä—Ç–∏"}
        ]
    }
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —É–º–µ–Ω–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
DEFAULT_ABILITIES = {
    "active": [
        {"name": "–ê—Ç–∞–∫–∞", "level": 1, "cooldown": 0, "energy": 10, "description": "–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞"},
        {"name": "–ó–∞—â–∏—Ç–∞", "level": 1, "cooldown": 2, "energy": 15, "description": "–ü–æ–≤—ã—à–∞–µ—Ç –∑–∞—â–∏—Ç—É"},
        {"name": "–£–¥–∞—Ä", "level": 2, "cooldown": 3, "energy": 20, "description": "–°–∏–ª—å–Ω—ã–π —É–¥–∞—Ä"},
        {"name": "–õ–µ—á–µ–Ω–∏–µ", "level": 1, "cooldown": 4, "energy": 25, "description": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ"},
        {"name": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞", "level": 3, "cooldown": 3, "energy": 30, "description": "–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞"},
        {"name": "–ë–ª–æ–∫", "level": 1, "cooldown": 2, "energy": 15, "description": "–ë–ª–æ–∫–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞—Ç–∞–∫—É"}
    ],
    "passive": [
        {"name": "–°–∏–ª–∞", "level": 2, "description": "–ü–æ–≤—ã—à–∞–µ—Ç —Å–∏–ª—É –∞—Ç–∞–∫–∏"},
        {"name": "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "level": 1, "description": "–ü–æ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ"},
        {"name": "–õ–æ–≤–∫–æ—Å—Ç—å", "level": 3, "description": "–ü–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è"},
        {"name": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç", "level": 2, "description": "–ü–æ–≤—ã—à–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω"},
        {"name": "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è", "level": 1, "description": "–ü–æ–≤—ã—à–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏"},
        {"name": "–£–¥–∞—á–∞", "level": 1, "description": "–ü–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞"}
    ]
}


def display_abilities_screen(stdscr, players: List[Any]) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω —É–º–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
    
    Args:
        stdscr: –û–∫–Ω–æ curses
        players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    """
    if not players:
        return

    current_tab = 0
    current_navigator = None  # –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    
    while True:
        try:
            height, width = stdscr.getmaxyx()
            stdscr.clear()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            stdscr.addstr(0, width // 2 - 8, WINDOW_TITLE,
                         get_color_pair(COLOR_CYAN) | curses.A_BOLD)
            stdscr.addstr(1, 0, "‚îÄ" * (width - 1), get_color_pair(COLOR_GRAY) | curses.A_DIM)

            # –í–∫–ª–∞–¥–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            tab_x = 2
            for i, player in enumerate(players):
                if i == current_tab:
                    # –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
                    stdscr.attron(get_color_pair(COLOR_CYAN) | curses.A_BOLD)
                    stdscr.addstr(2, tab_x, f" [{player.name}] ")
                    stdscr.attroff(get_color_pair(COLOR_CYAN) | curses.A_BOLD)
                else:
                    # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
                    stdscr.attron(get_color_pair(COLOR_WHITE))
                    stdscr.addstr(2, tab_x, f" {player.name} ")
                    stdscr.attroff(get_color_pair(COLOR_WHITE))
                tab_x += len(player.name) + TAB_SPACING

            stdscr.addstr(3, 0, "‚îÄ" * (width - 1), get_color_pair(COLOR_GRAY) | curses.A_DIM)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            current_player = players[current_tab]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–º–µ–Ω–∏–π
            class_name = getattr(current_player, 'role', 'default')
            
            # –ü–æ–ª—É—á–∞–µ–º —É–º–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
            abilities_data = CLASS_ABILITIES.get(class_name, DEFAULT_ABILITIES)
            all_abilities = abilities_data["active"] + abilities_data["passive"]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –∏–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è –ø–µ—Ä—Å–æ–Ω–∞–∂
            if current_navigator is None:
                current_navigator = AbilityCardNavigator(all_abilities)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
            stdscr.addstr(4, 2, SECTION_TITLE, get_color_pair(COLOR_MAGENTA) | curses.A_BOLD)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —É–º–µ–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            current_navigator.display_abilities_grid(stdscr, ABILITIES_START_Y, ABILITIES_START_X, width - 4)
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤—ã—Ö–æ–¥–∞
            ABILITIES_HINTS.display_hints(stdscr)


            stdscr.refresh()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
            key = stdscr.getch()
            
            if key == ord('q') or key == ord('Q'):
                break
            elif key == curses.KEY_LEFT:
                current_tab = (current_tab - 1) % len(players)
                current_navigator = None  # –°–±—Ä–æ—Å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            elif key == curses.KEY_RIGHT:
                current_tab = (current_tab + 1) % len(players)
                current_navigator = None  # –°–±—Ä–æ—Å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            elif key == curses.KEY_UP:
                current_navigator.prev_ability()
            elif key == curses.KEY_DOWN:
                current_navigator.next_ability()
            elif key == curses.KEY_RESIZE:
                continue

        except curses.error:
            pass  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ curses –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏


def get_player_abilities(player: Any) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–º–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    
    Args:
        player: –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
        
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —É–º–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞
    """
    class_name = getattr(player, 'role', 'default')
    abilities_data = CLASS_ABILITIES.get(class_name, DEFAULT_ABILITIES)
    return abilities_data["active"] + abilities_data["passive"]

- Utils/UI/Statistics/statistics_window.py
# stats_windows.py

import curses
import abc
from typing import List, Optional, TYPE_CHECKING

if TYPE_CHECKING:
    from Battle.battle_statistics import BattleSummaryRecord, CombatActionRecord, GameTotalsRecord

from Battle.battle_statistics import get_battle_statistics
from Utils.UI.window import Window
from Utils.UI.key_hints import STATISTICS_HINTS

class GlobalStatsWindow(Window):
    """–û–∫–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self, stdscr) -> None:
        super().__init__(stdscr)
        self.battle_stats = get_battle_statistics()
        self.selected_battle_index: int = 0
        self.battle_summaries: List['BattleSummaryRecord'] = []
        self.hint_class = STATISTICS_HINTS
    
    def get_header_text(self) -> str:
        return "üìä –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê"
    
    def _display_body(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ - –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å–ø–∏—Å–æ–∫ –±–∏—Ç–≤"""
        if self.height < 5:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        game_totals = self.battle_stats.get_current_game_totals()
        self.battle_summaries = self.battle_stats.get_battle_summaries()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å)
        self._display_global_stats(game_totals, 2)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator_y = min(12, self.height - 3)
        if separator_y > 3:
            try:
                self.stdscr.addstr(separator_y, 0, "‚îÄ" * (self.width - 1), self.get_separator_style())
                if separator_y + 1 < self.height - 2:
                    self.stdscr.addstr(separator_y + 1, max(0, self.width // 2 - 7), "–°–ø–∏—Å–æ–∫ –±–∏—Ç–≤", curses.A_BOLD)
            except curses.error:
                pass
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∏—Ç–≤ (–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)
        list_start_y = separator_y + 3
        if list_start_y < self.height - 2:
            self._display_battle_list(list_start_y)
    
    def _display_global_stats(self, game_totals: 'GameTotalsRecord', start_y: int) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.height <= start_y:
            return
            
        stats_lines = [
            f"–í—Å–µ–≥–æ –±–æ—ë–≤: {game_totals.total_battles}",
            f"–ü–æ–±–µ–¥: {game_totals.total_victories} | –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {game_totals.total_defeats}",
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {self._calculate_win_rate(game_totals):.1f}%",
            f"–û–±—â–∏–π –Ω–∞–Ω–µ—Å—ë–Ω–Ω—ã–π —É—Ä–æ–Ω: {game_totals.total_damage_dealt}",
            f"–û–±—â–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω: {game_totals.total_damage_taken}",
            f"–û–±—â–µ–µ –ª–µ—á–µ–Ω–∏–µ: {game_totals.total_healing_done}",
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –≤ –±–∏—Ç–≤–µ: {game_totals.most_damage_in_single_battle}",
            f"–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –±–∏—Ç–≤–∞: {game_totals.longest_battle_rounds} —Ä–∞—É–Ω–¥–æ–≤"
        ]
        
        for i, line in enumerate(stats_lines):
            if start_y + i >= self.height - 3:
                break
            try:
                self.stdscr.addstr(start_y + i, 2, line[:self.width - 4], curses.A_NORMAL)
            except curses.error:
                pass
    
    def _calculate_win_rate(self, game_totals: 'GameTotalsRecord') -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥"""
        if game_totals.total_battles == 0:
            return 0.0
        return (game_totals.total_victories / game_totals.total_battles) * 100
    
    def _display_battle_list(self, start_y: int) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –±–∏—Ç–≤"""
        if not self.battle_summaries:
            if start_y < self.height - 3:
                try:
                    self.stdscr.addstr(start_y, 2, "–ù–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –±–æ—ë–≤", curses.A_DIM)
                except curses.error:
                    pass
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∏—Ç–≤—ã —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π
        max_battles_to_show = max(1, self.height - start_y - 3)
        
        for i, battle in enumerate(self.battle_summaries[:max_battles_to_show]):
            if start_y + i >= self.height - 3:
                break
                
            y_pos = start_y + i
            battle_text = f"–ë–∏—Ç–≤–∞ {battle.battle_id[:10]} - –†–∞—É–Ω–¥–æ–≤: {battle.total_rounds} - "
            battle_text += "–ü–æ–±–µ–¥–∞" if battle.player_victory else "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
            
            try:
                if i == self.selected_battle_index:
                    # –í—ã–¥–µ–ª–µ–Ω–Ω–∞—è –±–∏—Ç–≤–∞
                    self.stdscr.addstr(y_pos, 2, f"> {battle_text[:self.width - 6]}", 
                                     curses.A_BOLD | curses.A_REVERSE)
                else:
                    # –û–±—ã—á–Ω–∞—è –±–∏—Ç–≤–∞
                    self.stdscr.addstr(y_pos, 2, f"  {battle_text[:self.width - 6]}", 
                                     curses.A_NORMAL)
            except curses.error:
                pass
    
    def _handle_input(self, key: int) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –æ–∫–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if key in [ord('q'), ord('Q'), ord('e'), ord('E'), 27]:  # ESC, q, e
            return True
        elif key == curses.KEY_UP:
            if self.battle_summaries:
                self.selected_battle_index = max(0, self.selected_battle_index - 1)
        elif key == curses.KEY_DOWN:
            if self.battle_summaries:
                self.selected_battle_index = min(len(self.battle_summaries) - 1, 
                                               self.selected_battle_index + 1)
        elif key in [10, 13]:  # Enter
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∏—Ç–≤—ã
            if self.battle_summaries and 0 <= self.selected_battle_index < len(self.battle_summaries):
                selected_battle = self.battle_summaries[self.selected_battle_index]
                battle_detail_window = BattleDetailWindow(self.stdscr, selected_battle)
                battle_detail_window.run()
        elif key == curses.KEY_RESIZE:
            return False  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ
        
        return False


class BattleDetailWindow(Window):
    """–û–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ç–≤—ã"""
    
    def __init__(self, stdscr, battle_record: 'BattleSummaryRecord') -> None:
        super().__init__(stdscr)
        self.battle_record = battle_record
        self.battle_stats = get_battle_statistics()
        self.selected_action_index: int = 0
        self.detailed_actions: List['CombatActionRecord'] = []
        self.hint_class = STATISTICS_HINTS
    
    def get_header_text(self) -> str:
        return f"üìä –î–ï–¢–ê–õ–ò –ë–ò–¢–í–´ {self.battle_record.battle_id}"
    
    def _display_body(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏—Ç–≤–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏"""
        if self.height < 5:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–π –±–∏—Ç–≤—ã
        self.detailed_actions = self.battle_stats.get_detailed_records(self.battle_record.battle_id)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏—Ç–≤–µ (–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å)
        self._display_battle_summary(2)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator_y = min(10, self.height - 3)
        if separator_y > 4:
            try:
                self.stdscr.addstr(separator_y, 0, "‚îÄ" * (self.width - 1), self.get_separator_style())
                if separator_y + 1 < self.height - 2:
                    self.stdscr.addstr(separator_y + 1, max(0, self.width // 2 - 12), "–î–µ—Ç–∞–ª–∏ –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π", curses.A_BOLD)
            except curses.error:
                pass
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)
        list_start_y = separator_y + 3
        if list_start_y < self.height - 2:
            self._display_detailed_actions(list_start_y)
    
    def _display_battle_summary(self, start_y: int) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏—Ç–≤–µ"""
        if self.height <= start_y:
            return
            
        summary_lines = [
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü–æ–±–µ–¥–∞' if self.battle_record.player_victory else '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}",
            f"–í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: {self.battle_record.total_rounds}",
            f"–ò–≥—Ä–æ–∫–∏: {', '.join(self.battle_record.player_names)}",
            f"–í—Ä–∞–≥–∏: {', '.join(self.battle_record.enemy_names)}",
            f"–£—Ä–æ–Ω –∏–≥—Ä–æ–∫–æ–≤: {self.battle_record.total_damage_dealt_by_players}",
            f"–£—Ä–æ–Ω –ø–æ –∏–≥—Ä–æ–∫–∞–º: {self.battle_record.total_damage_dealt_to_players}",
            f"–õ–µ—á–µ–Ω–∏–µ: {self.battle_record.total_healing_done}",
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–¥–∞—Ä—ã: {self.battle_record.critical_hits_count}",
            f"–£–∫–ª–æ–Ω–µ–Ω–∏—è: {self.battle_record.dodges_count}"
        ]
        
        for i, line in enumerate(summary_lines):
            if start_y + i >= self.height - 3:
                break
            try:
                self.stdscr.addstr(start_y + i, 2, line[:self.width - 4], curses.A_NORMAL)
            except curses.error:
                pass
    
    def _display_detailed_actions(self, start_y: int) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        if not self.detailed_actions:
            if start_y < self.height - 3:
                try:
                    self.stdscr.addstr(start_y, 2, "–ù–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", curses.A_DIM)
                except curses.error:
                    pass
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
        max_actions_to_show = max(1, self.height - start_y - 3)
        
        for i, action in enumerate(self.detailed_actions[:max_actions_to_show]):
            if start_y + i >= self.height - 3:
                break
                
            y_pos = start_y + i
            action_text = f"–†–∞—É–Ω–¥ {action.round_number}: {action.attacker_name} -> {action.target_name} ({action.ability_name})"
            if action.damage_dealt > 0:
                action_text += f" –£—Ä–æ–Ω: {action.damage_dealt}"
            if action.heal_amount > 0:
                action_text += f" –õ–µ—á–µ–Ω–∏–µ: {action.heal_amount}"
            if action.is_critical:
                action_text += " [–ö–†–ò–¢]"
            if action.is_dodge:
                action_text += " [–£–ö–õ–û–ù–ï–ù–ò–ï]"
            
            try:
                if i == self.selected_action_index:
                    # –í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                    self.stdscr.addstr(y_pos, 2, f"> {action_text[:self.width - 6]}", 
                                     curses.A_BOLD | curses.A_REVERSE)
                else:
                    # –û–±—ã—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                    self.stdscr.addstr(y_pos, 2, f"  {action_text[:self.width - 6]}", 
                                     curses.A_NORMAL)
            except curses.error:
                pass
    
    def _handle_input(self, key: int) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –±–∏—Ç–≤—ã"""
        if key in [ord('q'), ord('Q'), ord('e'), ord('E'), 27]:  # ESC, q, e
            return True
        elif key == curses.KEY_UP:
            if self.detailed_actions:
                self.selected_action_index = max(0, self.selected_action_index - 1)
        elif key == curses.KEY_DOWN:
            if self.detailed_actions:
                self.selected_action_index = min(len(self.detailed_actions) - 1, 
                                               self.selected_action_index + 1)
        elif key == curses.KEY_RESIZE:
            return False  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ
        
        return False


