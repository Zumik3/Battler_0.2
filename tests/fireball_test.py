# tests/fireball_test.py

import sys
import os
import unittest
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from Characters.Abilities.Attack_abilities.fireball import Fireball
from Characters.Abilities.ability import AbilityResult
from Characters.character import Character

class TestFireball(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.fireball = Fireball()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è stats
        mock_stats = Mock()
        mock_stats.intelligence = 100
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.character = Mock(spec=Character)
        self.character.name = "–¢–µ—Å—Ç–æ–≤—ã–π –ú–∞–≥"
        self.character.stats = mock_stats
        self.character.is_alive.return_value = True
        self.character.energy = 10  # –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Ü–µ–ª—å
        self.target = Mock(spec=Character)
        self.target.name = "–¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞–≥"
        self.target.is_alive.return_value = True
        self.target.take_damage = Mock()
        self.target.status_manager = Mock()  # –î–æ–±–∞–≤–ª—è–µ–º status_manager
        self.target.status_manager.add_effect = Mock(return_value=Mock())  # –ú–æ–∫ –¥–ª—è add_effect
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        self.targets = [self.target]
    
    def test_fireball_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —à–∞—Ä–∞"""
        self.assertEqual(self.fireball.name, "–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä")
        self.assertEqual(self.fireball.damage_scale, 0.8)
        self.assertEqual(self.fireball.cooldown, 1)
        self.assertEqual(self.fireball.energy_cost, 5)
        self.assertEqual(self.fireball.icon, "üî•")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç BurnEffect –¥–æ–±–∞–≤–ª–µ–Ω
        self.fireball.level = 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        effects = self.fireball.get_effects_info()
        self.assertTrue(len(effects) > 0)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "Burn"
        effect_names = [effect.__name__ for effect in effects]
        self.assertTrue(any("Burn" in name for name in effect_names))
    
    def test_execute_no_targets(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑ —Ü–µ–ª–µ–π"""
        result = self.fireball.execute(self.character, [])
        self.assertIsInstance(result, AbilityResult)
        self.assertFalse(result.success)
        self.assertEqual(result.reason, '–ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏')
    
    def test_execute_dead_target(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –º–µ—Ä—Ç–≤–æ–π —Ü–µ–ª—å—é"""
        self.target.is_alive.return_value = False
        result = self.fireball.execute(self.character, [self.target])
        self.assertIsInstance(result, AbilityResult)
        self.assertFalse(result.success)
        self.assertEqual(result.reason, '–ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏')
    
    @patch('Battle.base_mechanics.GameMechanics.apply_all_mechanics')
    def test_execute_dodge_success(self, mock_apply_mechanics):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ —É–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –º–µ—Ö–∞–Ω–∏–∫
        mock_apply_mechanics.return_value = {
            'dodge_success': True,
            'dodge_message': '–£–∫–ª–æ–Ω–µ–Ω–∏–µ!',
            'final_damage': 0,
            'blocked_damage': 0,
            'critical_hit': False
        }
        
        result = self.fireball.execute(self.character, self.targets)
        
        self.assertIsInstance(result, AbilityResult)
        self.assertFalse(result.success)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        self.assertTrue(len(result.messages) > 0)
    
    @patch('Battle.base_mechanics.GameMechanics.apply_all_mechanics')
    @patch('Battle.battle_logger.battle_logger.create_log_message')
    def test_execute_successful_hit(self, mock_create_message, mock_apply_mechanics):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_apply_mechanics.return_value = {
            'dodge_success': False,
            'dodge_message': '',
            'final_damage': 80,  # 100 * 0.8
            'blocked_damage': 10,
            'critical_hit': False
        }
        mock_create_message.return_value = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        result = self.fireball.execute(self.character, self.targets)
        
        self.assertIsInstance(result, AbilityResult)
        self.assertTrue(result.success)
        self.assertEqual(result.total_damage, 80)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–Ω –±—ã–ª –Ω–∞–Ω–µ—Å–µ–Ω
        self.target.take_damage.assert_called_once_with(80)
    
    @patch('Battle.base_mechanics.GameMechanics.apply_all_mechanics')
    @patch('Battle.battle_logger.battle_logger.create_log_message')
    def test_execute_critical_hit(self, mock_create_message, mock_apply_mechanics):
        """–¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_apply_mechanics.return_value = {
            'dodge_success': False,
            'dodge_message': '',
            'final_damage': 160,  # 100 * 0.8 * 2 (–∫—Ä–∏—Ç)
            'blocked_damage': 0,
            'critical_hit': True
        }
        mock_create_message.return_value = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ!"
        
        result = self.fireball.execute(self.character, self.targets)
        
        self.assertIsInstance(result, AbilityResult)
        self.assertTrue(result.success)
        self.assertEqual(result.total_damage, 160)
        self.target.take_damage.assert_called_once_with(160)
    
    def test_check_specific_conditions(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π"""
        # –ü–æ–∫–∞ –º–µ—Ç–æ–¥ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
        self.assertTrue(self.fireball.check_specific_conditions(self.character, self.targets))
        self.assertTrue(self.fireball.check_specific_conditions(self.character, []))
        self.assertTrue(self.fireball.check_specific_conditions(self.character, [self.target, self.target]))

if __name__ == '__main__':
    unittest.main()